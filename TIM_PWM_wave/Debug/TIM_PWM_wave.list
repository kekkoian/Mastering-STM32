
TIM_PWM_wave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08004280  08004280  00014280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004678  08004678  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004680  08004680  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08004694  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08004694  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009896  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001782  00000000  00000000  000298d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002ba40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015080  00000000  00000000  0002c370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a80d  00000000  00000000  000413f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008689e  00000000  00000000  0004bbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d249b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be4  00000000  00000000  000d24f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004268 	.word	0x08004268

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004268 	.word	0x08004268

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b96e 	b.w	8000b78 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	4604      	mov	r4, r0
 80008bc:	468c      	mov	ip, r1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f040 8083 	bne.w	80009ca <__udivmoddi4+0x116>
 80008c4:	428a      	cmp	r2, r1
 80008c6:	4617      	mov	r7, r2
 80008c8:	d947      	bls.n	800095a <__udivmoddi4+0xa6>
 80008ca:	fab2 f282 	clz	r2, r2
 80008ce:	b142      	cbz	r2, 80008e2 <__udivmoddi4+0x2e>
 80008d0:	f1c2 0020 	rsb	r0, r2, #32
 80008d4:	fa24 f000 	lsr.w	r0, r4, r0
 80008d8:	4091      	lsls	r1, r2
 80008da:	4097      	lsls	r7, r2
 80008dc:	ea40 0c01 	orr.w	ip, r0, r1
 80008e0:	4094      	lsls	r4, r2
 80008e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008e6:	0c23      	lsrs	r3, r4, #16
 80008e8:	fbbc f6f8 	udiv	r6, ip, r8
 80008ec:	fa1f fe87 	uxth.w	lr, r7
 80008f0:	fb08 c116 	mls	r1, r8, r6, ip
 80008f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f8:	fb06 f10e 	mul.w	r1, r6, lr
 80008fc:	4299      	cmp	r1, r3
 80008fe:	d909      	bls.n	8000914 <__udivmoddi4+0x60>
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	f106 30ff 	add.w	r0, r6, #4294967295
 8000906:	f080 8119 	bcs.w	8000b3c <__udivmoddi4+0x288>
 800090a:	4299      	cmp	r1, r3
 800090c:	f240 8116 	bls.w	8000b3c <__udivmoddi4+0x288>
 8000910:	3e02      	subs	r6, #2
 8000912:	443b      	add	r3, r7
 8000914:	1a5b      	subs	r3, r3, r1
 8000916:	b2a4      	uxth	r4, r4
 8000918:	fbb3 f0f8 	udiv	r0, r3, r8
 800091c:	fb08 3310 	mls	r3, r8, r0, r3
 8000920:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000924:	fb00 fe0e 	mul.w	lr, r0, lr
 8000928:	45a6      	cmp	lr, r4
 800092a:	d909      	bls.n	8000940 <__udivmoddi4+0x8c>
 800092c:	193c      	adds	r4, r7, r4
 800092e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000932:	f080 8105 	bcs.w	8000b40 <__udivmoddi4+0x28c>
 8000936:	45a6      	cmp	lr, r4
 8000938:	f240 8102 	bls.w	8000b40 <__udivmoddi4+0x28c>
 800093c:	3802      	subs	r0, #2
 800093e:	443c      	add	r4, r7
 8000940:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000944:	eba4 040e 	sub.w	r4, r4, lr
 8000948:	2600      	movs	r6, #0
 800094a:	b11d      	cbz	r5, 8000954 <__udivmoddi4+0xa0>
 800094c:	40d4      	lsrs	r4, r2
 800094e:	2300      	movs	r3, #0
 8000950:	e9c5 4300 	strd	r4, r3, [r5]
 8000954:	4631      	mov	r1, r6
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	b902      	cbnz	r2, 800095e <__udivmoddi4+0xaa>
 800095c:	deff      	udf	#255	; 0xff
 800095e:	fab2 f282 	clz	r2, r2
 8000962:	2a00      	cmp	r2, #0
 8000964:	d150      	bne.n	8000a08 <__udivmoddi4+0x154>
 8000966:	1bcb      	subs	r3, r1, r7
 8000968:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800096c:	fa1f f887 	uxth.w	r8, r7
 8000970:	2601      	movs	r6, #1
 8000972:	fbb3 fcfe 	udiv	ip, r3, lr
 8000976:	0c21      	lsrs	r1, r4, #16
 8000978:	fb0e 331c 	mls	r3, lr, ip, r3
 800097c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000980:	fb08 f30c 	mul.w	r3, r8, ip
 8000984:	428b      	cmp	r3, r1
 8000986:	d907      	bls.n	8000998 <__udivmoddi4+0xe4>
 8000988:	1879      	adds	r1, r7, r1
 800098a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0xe2>
 8000990:	428b      	cmp	r3, r1
 8000992:	f200 80e9 	bhi.w	8000b68 <__udivmoddi4+0x2b4>
 8000996:	4684      	mov	ip, r0
 8000998:	1ac9      	subs	r1, r1, r3
 800099a:	b2a3      	uxth	r3, r4
 800099c:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a0:	fb0e 1110 	mls	r1, lr, r0, r1
 80009a4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009a8:	fb08 f800 	mul.w	r8, r8, r0
 80009ac:	45a0      	cmp	r8, r4
 80009ae:	d907      	bls.n	80009c0 <__udivmoddi4+0x10c>
 80009b0:	193c      	adds	r4, r7, r4
 80009b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0x10a>
 80009b8:	45a0      	cmp	r8, r4
 80009ba:	f200 80d9 	bhi.w	8000b70 <__udivmoddi4+0x2bc>
 80009be:	4618      	mov	r0, r3
 80009c0:	eba4 0408 	sub.w	r4, r4, r8
 80009c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c8:	e7bf      	b.n	800094a <__udivmoddi4+0x96>
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d909      	bls.n	80009e2 <__udivmoddi4+0x12e>
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	f000 80b1 	beq.w	8000b36 <__udivmoddi4+0x282>
 80009d4:	2600      	movs	r6, #0
 80009d6:	e9c5 0100 	strd	r0, r1, [r5]
 80009da:	4630      	mov	r0, r6
 80009dc:	4631      	mov	r1, r6
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	fab3 f683 	clz	r6, r3
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d14a      	bne.n	8000a80 <__udivmoddi4+0x1cc>
 80009ea:	428b      	cmp	r3, r1
 80009ec:	d302      	bcc.n	80009f4 <__udivmoddi4+0x140>
 80009ee:	4282      	cmp	r2, r0
 80009f0:	f200 80b8 	bhi.w	8000b64 <__udivmoddi4+0x2b0>
 80009f4:	1a84      	subs	r4, r0, r2
 80009f6:	eb61 0103 	sbc.w	r1, r1, r3
 80009fa:	2001      	movs	r0, #1
 80009fc:	468c      	mov	ip, r1
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d0a8      	beq.n	8000954 <__udivmoddi4+0xa0>
 8000a02:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a06:	e7a5      	b.n	8000954 <__udivmoddi4+0xa0>
 8000a08:	f1c2 0320 	rsb	r3, r2, #32
 8000a0c:	fa20 f603 	lsr.w	r6, r0, r3
 8000a10:	4097      	lsls	r7, r2
 8000a12:	fa01 f002 	lsl.w	r0, r1, r2
 8000a16:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a1a:	40d9      	lsrs	r1, r3
 8000a1c:	4330      	orrs	r0, r6
 8000a1e:	0c03      	lsrs	r3, r0, #16
 8000a20:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a24:	fa1f f887 	uxth.w	r8, r7
 8000a28:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a30:	fb06 f108 	mul.w	r1, r6, r8
 8000a34:	4299      	cmp	r1, r3
 8000a36:	fa04 f402 	lsl.w	r4, r4, r2
 8000a3a:	d909      	bls.n	8000a50 <__udivmoddi4+0x19c>
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a42:	f080 808d 	bcs.w	8000b60 <__udivmoddi4+0x2ac>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 808a 	bls.w	8000b60 <__udivmoddi4+0x2ac>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	443b      	add	r3, r7
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b281      	uxth	r1, r0
 8000a54:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a58:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a60:	fb00 f308 	mul.w	r3, r0, r8
 8000a64:	428b      	cmp	r3, r1
 8000a66:	d907      	bls.n	8000a78 <__udivmoddi4+0x1c4>
 8000a68:	1879      	adds	r1, r7, r1
 8000a6a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a6e:	d273      	bcs.n	8000b58 <__udivmoddi4+0x2a4>
 8000a70:	428b      	cmp	r3, r1
 8000a72:	d971      	bls.n	8000b58 <__udivmoddi4+0x2a4>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4439      	add	r1, r7
 8000a78:	1acb      	subs	r3, r1, r3
 8000a7a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a7e:	e778      	b.n	8000972 <__udivmoddi4+0xbe>
 8000a80:	f1c6 0c20 	rsb	ip, r6, #32
 8000a84:	fa03 f406 	lsl.w	r4, r3, r6
 8000a88:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a8c:	431c      	orrs	r4, r3
 8000a8e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a92:	fa01 f306 	lsl.w	r3, r1, r6
 8000a96:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a9a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a9e:	431f      	orrs	r7, r3
 8000aa0:	0c3b      	lsrs	r3, r7, #16
 8000aa2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aa6:	fa1f f884 	uxth.w	r8, r4
 8000aaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ab2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ab6:	458a      	cmp	sl, r1
 8000ab8:	fa02 f206 	lsl.w	r2, r2, r6
 8000abc:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x220>
 8000ac2:	1861      	adds	r1, r4, r1
 8000ac4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ac8:	d248      	bcs.n	8000b5c <__udivmoddi4+0x2a8>
 8000aca:	458a      	cmp	sl, r1
 8000acc:	d946      	bls.n	8000b5c <__udivmoddi4+0x2a8>
 8000ace:	f1a9 0902 	sub.w	r9, r9, #2
 8000ad2:	4421      	add	r1, r4
 8000ad4:	eba1 010a 	sub.w	r1, r1, sl
 8000ad8:	b2bf      	uxth	r7, r7
 8000ada:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ade:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ae2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ae6:	fb00 f808 	mul.w	r8, r0, r8
 8000aea:	45b8      	cmp	r8, r7
 8000aec:	d907      	bls.n	8000afe <__udivmoddi4+0x24a>
 8000aee:	19e7      	adds	r7, r4, r7
 8000af0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000af4:	d22e      	bcs.n	8000b54 <__udivmoddi4+0x2a0>
 8000af6:	45b8      	cmp	r8, r7
 8000af8:	d92c      	bls.n	8000b54 <__udivmoddi4+0x2a0>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4427      	add	r7, r4
 8000afe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b02:	eba7 0708 	sub.w	r7, r7, r8
 8000b06:	fba0 8902 	umull	r8, r9, r0, r2
 8000b0a:	454f      	cmp	r7, r9
 8000b0c:	46c6      	mov	lr, r8
 8000b0e:	4649      	mov	r1, r9
 8000b10:	d31a      	bcc.n	8000b48 <__udivmoddi4+0x294>
 8000b12:	d017      	beq.n	8000b44 <__udivmoddi4+0x290>
 8000b14:	b15d      	cbz	r5, 8000b2e <__udivmoddi4+0x27a>
 8000b16:	ebb3 020e 	subs.w	r2, r3, lr
 8000b1a:	eb67 0701 	sbc.w	r7, r7, r1
 8000b1e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b22:	40f2      	lsrs	r2, r6
 8000b24:	ea4c 0202 	orr.w	r2, ip, r2
 8000b28:	40f7      	lsrs	r7, r6
 8000b2a:	e9c5 2700 	strd	r2, r7, [r5]
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	462e      	mov	r6, r5
 8000b38:	4628      	mov	r0, r5
 8000b3a:	e70b      	b.n	8000954 <__udivmoddi4+0xa0>
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	e6e9      	b.n	8000914 <__udivmoddi4+0x60>
 8000b40:	4618      	mov	r0, r3
 8000b42:	e6fd      	b.n	8000940 <__udivmoddi4+0x8c>
 8000b44:	4543      	cmp	r3, r8
 8000b46:	d2e5      	bcs.n	8000b14 <__udivmoddi4+0x260>
 8000b48:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b4c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b50:	3801      	subs	r0, #1
 8000b52:	e7df      	b.n	8000b14 <__udivmoddi4+0x260>
 8000b54:	4608      	mov	r0, r1
 8000b56:	e7d2      	b.n	8000afe <__udivmoddi4+0x24a>
 8000b58:	4660      	mov	r0, ip
 8000b5a:	e78d      	b.n	8000a78 <__udivmoddi4+0x1c4>
 8000b5c:	4681      	mov	r9, r0
 8000b5e:	e7b9      	b.n	8000ad4 <__udivmoddi4+0x220>
 8000b60:	4666      	mov	r6, ip
 8000b62:	e775      	b.n	8000a50 <__udivmoddi4+0x19c>
 8000b64:	4630      	mov	r0, r6
 8000b66:	e74a      	b.n	80009fe <__udivmoddi4+0x14a>
 8000b68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b6c:	4439      	add	r1, r7
 8000b6e:	e713      	b.n	8000998 <__udivmoddi4+0xe4>
 8000b70:	3802      	subs	r0, #2
 8000b72:	443c      	add	r4, r7
 8000b74:	e724      	b.n	80009c0 <__udivmoddi4+0x10c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	0000      	movs	r0, r0
	...

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b0e7      	sub	sp, #412	; 0x19c
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f000 fac5 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f877 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f000 f975 	bl	8000e7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b92:	f000 f953 	bl	8000e3c <MX_DMA_Init>
  MX_TIM3_Init();
 8000b96:	f000 f8db 	bl	8000d50 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint16_t IV[200];
   float angle;

   for (uint8_t i = 0; i < 200; i++) {
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8000ba0:	e051      	b.n	8000c46 <main+0xc6>
     angle = ASR*(float)i;
 8000ba2:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bae:	ee17 0a90 	vmov	r0, s15
 8000bb2:	f7ff fd9f 	bl	80006f4 <__aeabi_f2d>
 8000bb6:	a32d      	add	r3, pc, #180	; (adr r3, 8000c6c <main+0xec>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f7ff fb0c 	bl	80001d8 <__aeabi_dmul>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f7ff fe0c 	bl	80007e4 <__aeabi_d2f>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
     IV[i] = (uint16_t) rint(100 + 99*sinf(angle*(PI/180)));
 8000bd2:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8000bd6:	f7ff fd8d 	bl	80006f4 <__aeabi_f2d>
 8000bda:	a326      	add	r3, pc, #152	; (adr r3, 8000c74 <main+0xf4>)
 8000bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be0:	f7ff fafa 	bl	80001d8 <__aeabi_dmul>
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	4610      	mov	r0, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	f7ff fdfa 	bl	80007e4 <__aeabi_d2f>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	ee00 3a10 	vmov	s0, r3
 8000bf6:	f002 fdcb 	bl	8003790 <sinf>
 8000bfa:	eef0 7a40 	vmov.f32	s15, s0
 8000bfe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000c60 <main+0xe0>
 8000c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c06:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000c64 <main+0xe4>
 8000c0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c0e:	ee17 0a90 	vmov	r0, s15
 8000c12:	f7ff fd6f 	bl	80006f4 <__aeabi_f2d>
 8000c16:	4602      	mov	r2, r0
 8000c18:	460b      	mov	r3, r1
 8000c1a:	ec43 2b10 	vmov	d0, r2, r3
 8000c1e:	f002 fd2d 	bl	800367c <rint>
 8000c22:	ec53 2b10 	vmov	r2, r3, d0
 8000c26:	f897 4197 	ldrb.w	r4, [r7, #407]	; 0x197
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f7ff fdb9 	bl	80007a4 <__aeabi_d2uiz>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	463b      	mov	r3, r7
 8000c38:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
   for (uint8_t i = 0; i < 200; i++) {
 8000c3c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000c40:	3301      	adds	r3, #1
 8000c42:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8000c46:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000c4a:	2bc7      	cmp	r3, #199	; 0xc7
 8000c4c:	d9a9      	bls.n	8000ba2 <main+0x22>
   }

   HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)IV, 200);
 8000c4e:	463a      	mov	r2, r7
 8000c50:	23c8      	movs	r3, #200	; 0xc8
 8000c52:	2100      	movs	r1, #0
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <main+0xe8>)
 8000c56:	f001 fd91 	bl	800277c <HAL_TIM_PWM_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <main+0xda>
 8000c5c:	f3af 8000 	nop.w
 8000c60:	42c60000 	.word	0x42c60000
 8000c64:	42c80000 	.word	0x42c80000
 8000c68:	20000028 	.word	0x20000028
 8000c6c:	cccccccd 	.word	0xcccccccd
 8000c70:	3ffccccc 	.word	0x3ffccccc
 8000c74:	a50de270 	.word	0xa50de270
 8000c78:	3f91df45 	.word	0x3f91df45

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	; 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 fcee 	bl	800366c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <SystemClock_Config+0xcc>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a27      	ldr	r2, [pc, #156]	; (8000d48 <SystemClock_Config+0xcc>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <SystemClock_Config+0xcc>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cc8:	4a20      	ldr	r2, [pc, #128]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cf4:	23c0      	movs	r3, #192	; 0xc0
 8000cf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 f87d 	bl	8001e04 <HAL_RCC_OscConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d10:	f000 f8ce 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	230f      	movs	r3, #15
 8000d16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fadf 	bl	80022f4 <HAL_RCC_ClockConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d3c:	f000 f8b8 	bl	8000eb0 <Error_Handler>
  }
}
 8000d40:	bf00      	nop
 8000d42:	3750      	adds	r7, #80	; 0x50
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	; 0x38
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	615a      	str	r2, [r3, #20]
 8000d7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d80:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000d82:	4a2d      	ldr	r2, [pc, #180]	; (8000e38 <MX_TIM3_Init+0xe8>)
 8000d84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000d88:	2218      	movs	r2, #24
 8000d8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000d94:	22c8      	movs	r2, #200	; 0xc8
 8000d96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000da4:	4823      	ldr	r0, [pc, #140]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000da6:	f001 fc41 	bl	800262c <HAL_TIM_Base_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000db0:	f000 f87e 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	481c      	ldr	r0, [pc, #112]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000dc2:	f001 ff41 	bl	8002c48 <HAL_TIM_ConfigClockSource>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000dcc:	f000 f870 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000dd2:	f001 fc7a 	bl	80026ca <HAL_TIM_PWM_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000ddc:	f000 f868 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	4619      	mov	r1, r3
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000df0:	f002 fbaa 	bl	8003548 <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000dfa:	f000 f859 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dfe:	2360      	movs	r3, #96	; 0x60
 8000e00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	4619      	mov	r1, r3
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000e16:	f001 fe59 	bl	8002acc <HAL_TIM_PWM_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000e20:	f000 f846 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <MX_TIM3_Init+0xe4>)
 8000e26:	f000 f8cb 	bl	8000fc0 <HAL_TIM_MspPostInit>

}
 8000e2a:	bf00      	nop
 8000e2c:	3738      	adds	r7, #56	; 0x38
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000028 	.word	0x20000028
 8000e38:	40000400 	.word	0x40000400

08000e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_DMA_Init+0x3c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <MX_DMA_Init+0x3c>)
 8000e4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_DMA_Init+0x3c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	200d      	movs	r0, #13
 8000e64:	f000 faa3 	bl	80013ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e68:	200d      	movs	r0, #13
 8000e6a:	f000 fabc 	bl	80013e6 <HAL_NVIC_EnableIRQ>

}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_GPIO_Init+0x30>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <MX_GPIO_Init+0x30>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_GPIO_Init+0x30>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a25      	ldr	r2, [pc, #148]	; (8000fb0 <HAL_TIM_Base_MspInit+0xa4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d144      	bne.n	8000fa8 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <HAL_TIM_Base_MspInit+0xa8>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <HAL_TIM_Base_MspInit+0xa8>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_TIM_Base_MspInit+0xa8>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f3c:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <HAL_TIM_Base_MspInit+0xb0>)
 8000f3e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f42:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000f46:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f4a:	2240      	movs	r2, #64	; 0x40
 8000f4c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f5a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f62:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f6a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f72:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f82:	f000 fa4b 	bl	800141c <HAL_DMA_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000f8c:	f7ff ff90 	bl	8000eb0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000fa0:	621a      	str	r2, [r3, #32]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_TIM_Base_MspInit+0xac>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40000400 	.word	0x40000400
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	20000070 	.word	0x20000070
 8000fbc:	40026040 	.word	0x40026040

08000fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a12      	ldr	r2, [pc, #72]	; (8001028 <HAL_TIM_MspPostInit+0x68>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d11d      	bne.n	800101e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_TIM_MspPostInit+0x6c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_TIM_MspPostInit+0x6c>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_TIM_MspPostInit+0x6c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ffe:	2340      	movs	r3, #64	; 0x40
 8001000:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800100e:	2302      	movs	r3, #2
 8001010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_TIM_MspPostInit+0x70>)
 800101a:	f000 fd6f 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40000400 	.word	0x40000400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f89a 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <DMA1_Stream2_IRQHandler+0x10>)
 800108e:	f000 facb 	bl	8001628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000070 	.word	0x20000070

0800109c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <SystemInit+0x20>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <SystemInit+0x20>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010c6:	490e      	ldr	r1, [pc, #56]	; (8001100 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010c8:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010dc:	4c0b      	ldr	r4, [pc, #44]	; (800110c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ea:	f7ff ffd7 	bl	800109c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ee:	f002 fa99 	bl	8003624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f2:	f7ff fd45 	bl	8000b80 <main>
  bx  lr    
 80010f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001104:	08004688 	.word	0x08004688
  ldr r2, =_sbss
 8001108:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800110c:	200000d4 	.word	0x200000d4

08001110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC_IRQHandler>
	...

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_Init+0x40>)
 800111e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_Init+0x40>)
 800112a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_Init+0x40>)
 8001136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f92b 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f808 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff feb8 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023c00 	.word	0x40023c00

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x54>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x58>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f943 	bl	8001402 <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00e      	b.n	80011a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80a      	bhi.n	80011a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f90b 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_InitTick+0x5c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008
 80011dc:	200000d0 	.word	0x200000d0

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200000d0 	.word	0x200000d0

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff29 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff3e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff8e 	bl	80012ec <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5d 	bl	8001298 <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff31 	bl	800125c <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff feda 	bl	80011e0 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e099      	b.n	800156c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001458:	e00f      	b.n	800147a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145a:	f7ff fec1 	bl	80011e0 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b05      	cmp	r3, #5
 8001466:	d908      	bls.n	800147a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2203      	movs	r2, #3
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e078      	b.n	800156c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e8      	bne.n	800145a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <HAL_DMA_Init+0x158>)
 8001494:	4013      	ands	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d107      	bne.n	80014e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	4313      	orrs	r3, r2
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f023 0307 	bic.w	r3, r3, #7
 80014fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	2b04      	cmp	r3, #4
 800150c:	d117      	bne.n	800153e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4313      	orrs	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00e      	beq.n	800153e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fa6f 	bl	8001a04 <DMA_CheckFifoParam>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2240      	movs	r2, #64	; 0x40
 8001530:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800153a:	2301      	movs	r3, #1
 800153c:	e016      	b.n	800156c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fa26 	bl	8001998 <DMA_CalcBaseAndBitshift>
 800154c:	4603      	mov	r3, r0
 800154e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	223f      	movs	r2, #63	; 0x3f
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	f010803f 	.word	0xf010803f

08001578 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_DMA_Start_IT+0x26>
 800159a:	2302      	movs	r3, #2
 800159c:	e040      	b.n	8001620 <HAL_DMA_Start_IT+0xa8>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d12f      	bne.n	8001612 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2202      	movs	r2, #2
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f9b8 	bl	800193c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	223f      	movs	r2, #63	; 0x3f
 80015d2:	409a      	lsls	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0216 	orr.w	r2, r2, #22
 80015e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d007      	beq.n	8001600 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0208 	orr.w	r2, r2, #8
 80015fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e005      	b.n	800161e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800161a:	2302      	movs	r3, #2
 800161c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800161e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001634:	4b92      	ldr	r3, [pc, #584]	; (8001880 <HAL_DMA_IRQHandler+0x258>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a92      	ldr	r2, [pc, #584]	; (8001884 <HAL_DMA_IRQHandler+0x25c>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0a9b      	lsrs	r3, r3, #10
 8001640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001652:	2208      	movs	r2, #8
 8001654:	409a      	lsls	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01a      	beq.n	8001694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0204 	bic.w	r2, r2, #4
 800167a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2208      	movs	r2, #8
 8001682:	409a      	lsls	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	2201      	movs	r2, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d012      	beq.n	80016ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b6:	2201      	movs	r2, #1
 80016b8:	409a      	lsls	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	f043 0202 	orr.w	r2, r3, #2
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ce:	2204      	movs	r2, #4
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d012      	beq.n	8001700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00b      	beq.n	8001700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	2204      	movs	r2, #4
 80016ee:	409a      	lsls	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f8:	f043 0204 	orr.w	r2, r3, #4
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	2210      	movs	r2, #16
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d043      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d03c      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001722:	2210      	movs	r2, #16
 8001724:	409a      	lsls	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d018      	beq.n	800176a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d108      	bne.n	8001758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d024      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
 8001756:	e01f      	b.n	8001798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01b      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
 8001768:	e016      	b.n	8001798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0208 	bic.w	r2, r2, #8
 8001786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	2220      	movs	r2, #32
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 808e 	beq.w	80018c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8086 	beq.w	80018c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	2220      	movs	r2, #32
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d136      	bne.n	8001840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0216 	bic.w	r2, r2, #22
 80017e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <HAL_DMA_IRQHandler+0x1da>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0208 	bic.w	r2, r2, #8
 8001810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	223f      	movs	r2, #63	; 0x3f
 8001818:	409a      	lsls	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001832:	2b00      	cmp	r3, #0
 8001834:	d07d      	beq.n	8001932 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	4798      	blx	r3
        }
        return;
 800183e:	e078      	b.n	8001932 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01c      	beq.n	8001888 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d108      	bne.n	800186e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	2b00      	cmp	r3, #0
 8001862:	d030      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
 800186c:	e02b      	b.n	80018c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001872:	2b00      	cmp	r3, #0
 8001874:	d027      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
 800187e:	e022      	b.n	80018c6 <HAL_DMA_IRQHandler+0x29e>
 8001880:	20000000 	.word	0x20000000
 8001884:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10f      	bne.n	80018b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0210 	bic.w	r2, r2, #16
 80018a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d032      	beq.n	8001934 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d022      	beq.n	8001920 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2205      	movs	r2, #5
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	3301      	adds	r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d307      	bcc.n	800190e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f2      	bne.n	80018f2 <HAL_DMA_IRQHandler+0x2ca>
 800190c:	e000      	b.n	8001910 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800190e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
 8001930:	e000      	b.n	8001934 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001932:	bf00      	nop
    }
  }
}
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop

0800193c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001958:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b40      	cmp	r3, #64	; 0x40
 8001968:	d108      	bne.n	800197c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800197a:	e007      	b.n	800198c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3b10      	subs	r3, #16
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <DMA_CalcBaseAndBitshift+0x64>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019b2:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <DMA_CalcBaseAndBitshift+0x68>)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d909      	bls.n	80019da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	1d1a      	adds	r2, r3, #4
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	659a      	str	r2, [r3, #88]	; 0x58
 80019d8:	e007      	b.n	80019ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019e2:	f023 0303 	bic.w	r3, r3, #3
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	aaaaaaab 	.word	0xaaaaaaab
 8001a00:	08004290 	.word	0x08004290

08001a04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d11f      	bne.n	8001a5e <DMA_CheckFifoParam+0x5a>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d856      	bhi.n	8001ad2 <DMA_CheckFifoParam+0xce>
 8001a24:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <DMA_CheckFifoParam+0x28>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a4f 	.word	0x08001a4f
 8001a34:	08001a3d 	.word	0x08001a3d
 8001a38:	08001ad3 	.word	0x08001ad3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d046      	beq.n	8001ad6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a4c:	e043      	b.n	8001ad6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a56:	d140      	bne.n	8001ada <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a5c:	e03d      	b.n	8001ada <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a66:	d121      	bne.n	8001aac <DMA_CheckFifoParam+0xa8>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d837      	bhi.n	8001ade <DMA_CheckFifoParam+0xda>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <DMA_CheckFifoParam+0x70>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	08001a8b 	.word	0x08001a8b
 8001a7c:	08001a85 	.word	0x08001a85
 8001a80:	08001a9d 	.word	0x08001a9d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
      break;
 8001a88:	e030      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d025      	beq.n	8001ae2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a9a:	e022      	b.n	8001ae2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aa4:	d11f      	bne.n	8001ae6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aaa:	e01c      	b.n	8001ae6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d903      	bls.n	8001aba <DMA_CheckFifoParam+0xb6>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d003      	beq.n	8001ac0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ab8:	e018      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
      break;
 8001abe:	e015      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00e      	beq.n	8001aea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad0:	e00b      	b.n	8001aea <DMA_CheckFifoParam+0xe6>
      break;
 8001ad2:	bf00      	nop
 8001ad4:	e00a      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ad6:	bf00      	nop
 8001ad8:	e008      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ada:	bf00      	nop
 8001adc:	e006      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ade:	bf00      	nop
 8001ae0:	e004      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ae2:	bf00      	nop
 8001ae4:	e002      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;   
 8001ae6:	bf00      	nop
 8001ae8:	e000      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001aea:	bf00      	nop
    }
  } 
  
  return status; 
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e159      	b.n	8001dcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f040 8148 	bne.w	8001dc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d005      	beq.n	8001b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d130      	bne.n	8001bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b84:	2201      	movs	r2, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 0201 	and.w	r2, r3, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d017      	beq.n	8001bec <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d123      	bne.n	8001c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	08da      	lsrs	r2, r3, #3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3208      	adds	r2, #8
 8001c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	69b9      	ldr	r1, [r7, #24]
 8001c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0203 	and.w	r2, r3, #3
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a2 	beq.w	8001dc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b57      	ldr	r3, [pc, #348]	; (8001de4 <HAL_GPIO_Init+0x2e8>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a56      	ldr	r2, [pc, #344]	; (8001de4 <HAL_GPIO_Init+0x2e8>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b54      	ldr	r3, [pc, #336]	; (8001de4 <HAL_GPIO_Init+0x2e8>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9e:	4a52      	ldr	r2, [pc, #328]	; (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d019      	beq.n	8001cfe <HAL_GPIO_Init+0x202>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a48      	ldr	r2, [pc, #288]	; (8001df0 <HAL_GPIO_Init+0x2f4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0x1fe>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a47      	ldr	r2, [pc, #284]	; (8001df4 <HAL_GPIO_Init+0x2f8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_GPIO_Init+0x1fa>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a46      	ldr	r2, [pc, #280]	; (8001df8 <HAL_GPIO_Init+0x2fc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x1f6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a45      	ldr	r2, [pc, #276]	; (8001dfc <HAL_GPIO_Init+0x300>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_GPIO_Init+0x1f2>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cee:	2307      	movs	r3, #7
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1e:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d42:	4a2f      	ldr	r2, [pc, #188]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d48:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d72:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d96:	4a1a      	ldr	r2, [pc, #104]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f aea2 	bls.w	8001b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40013c00 	.word	0x40013c00

08001e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e264      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d075      	beq.n	8001f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e22:	4ba3      	ldr	r3, [pc, #652]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d00c      	beq.n	8001e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2e:	4ba0      	ldr	r3, [pc, #640]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d112      	bne.n	8001e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3a:	4b9d      	ldr	r3, [pc, #628]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e46:	d10b      	bne.n	8001e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	4b99      	ldr	r3, [pc, #612]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d05b      	beq.n	8001f0c <HAL_RCC_OscConfig+0x108>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d157      	bne.n	8001f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e23f      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e68:	d106      	bne.n	8001e78 <HAL_RCC_OscConfig+0x74>
 8001e6a:	4b91      	ldr	r3, [pc, #580]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a90      	ldr	r2, [pc, #576]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e01d      	b.n	8001eb4 <HAL_RCC_OscConfig+0xb0>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x98>
 8001e82:	4b8b      	ldr	r3, [pc, #556]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a8a      	ldr	r2, [pc, #552]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a87      	ldr	r2, [pc, #540]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_OscConfig+0xb0>
 8001e9c:	4b84      	ldr	r3, [pc, #528]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a83      	ldr	r2, [pc, #524]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a80      	ldr	r2, [pc, #512]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d013      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f990 	bl	80011e0 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff f98c 	bl	80011e0 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e204      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	4b76      	ldr	r3, [pc, #472]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0xc0>
 8001ee2:	e014      	b.n	8001f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f97c 	bl	80011e0 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff f978 	bl	80011e0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1f0      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	4b6c      	ldr	r3, [pc, #432]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0xe8>
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d063      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f1a:	4b65      	ldr	r3, [pc, #404]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f26:	4b62      	ldr	r3, [pc, #392]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d11c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d116      	bne.n	8001f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	4b5c      	ldr	r3, [pc, #368]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_RCC_OscConfig+0x152>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e1c4      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4952      	ldr	r1, [pc, #328]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	e03a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f74:	4b4f      	ldr	r3, [pc, #316]	; (80020b4 <HAL_RCC_OscConfig+0x2b0>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff f931 	bl	80011e0 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff f92d 	bl	80011e0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e1a5      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4940      	ldr	r1, [pc, #256]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_RCC_OscConfig+0x2b0>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff f910 	bl	80011e0 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7ff f90c 	bl	80011e0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e184      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d030      	beq.n	8002050 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff6:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_RCC_OscConfig+0x2b4>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f8f0 	bl	80011e0 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002004:	f7ff f8ec 	bl	80011e0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e164      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x200>
 8002022:	e015      	b.n	8002050 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_OscConfig+0x2b4>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202a:	f7ff f8d9 	bl	80011e0 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002032:	f7ff f8d5 	bl	80011e0 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e14d      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8002046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80a0 	beq.w	800219e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10f      	bne.n	800208e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_OscConfig+0x2b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d121      	bne.n	80020de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_RCC_OscConfig+0x2b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_RCC_OscConfig+0x2b8>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7ff f89b 	bl	80011e0 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	e011      	b.n	80020d2 <HAL_RCC_OscConfig+0x2ce>
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	42470000 	.word	0x42470000
 80020b8:	42470e80 	.word	0x42470e80
 80020bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c0:	f7ff f88e 	bl	80011e0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e106      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b85      	ldr	r3, [pc, #532]	; (80022e8 <HAL_RCC_OscConfig+0x4e4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2f0>
 80020e6:	4b81      	ldr	r3, [pc, #516]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	4a80      	ldr	r2, [pc, #512]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70
 80020f2:	e01c      	b.n	800212e <HAL_RCC_OscConfig+0x32a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	d10c      	bne.n	8002116 <HAL_RCC_OscConfig+0x312>
 80020fc:	4b7b      	ldr	r3, [pc, #492]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a7a      	ldr	r2, [pc, #488]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	4b78      	ldr	r3, [pc, #480]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	4a77      	ldr	r2, [pc, #476]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
 8002114:	e00b      	b.n	800212e <HAL_RCC_OscConfig+0x32a>
 8002116:	4b75      	ldr	r3, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	4a74      	ldr	r2, [pc, #464]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6713      	str	r3, [r2, #112]	; 0x70
 8002122:	4b72      	ldr	r3, [pc, #456]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a71      	ldr	r2, [pc, #452]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d015      	beq.n	8002162 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002136:	f7ff f853 	bl	80011e0 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7ff f84f 	bl	80011e0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	; 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0c5      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002154:	4b65      	ldr	r3, [pc, #404]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ee      	beq.n	800213e <HAL_RCC_OscConfig+0x33a>
 8002160:	e014      	b.n	800218c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7ff f83d 	bl	80011e0 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7ff f839 	bl	80011e0 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	; 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0af      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002180:	4b5a      	ldr	r3, [pc, #360]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ee      	bne.n	800216a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d105      	bne.n	800219e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002192:	4b56      	ldr	r3, [pc, #344]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a55      	ldr	r2, [pc, #340]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 8002198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 809b 	beq.w	80022de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021a8:	4b50      	ldr	r3, [pc, #320]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d05c      	beq.n	800226e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d141      	bne.n	8002240 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021bc:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <HAL_RCC_OscConfig+0x4ec>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7ff f80d 	bl	80011e0 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ca:	f7ff f809 	bl	80011e0 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e081      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f0      	bne.n	80021ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	019b      	lsls	r3, r3, #6
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	3b01      	subs	r3, #1
 8002202:	041b      	lsls	r3, r3, #16
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	061b      	lsls	r3, r3, #24
 800220c:	4937      	ldr	r1, [pc, #220]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_RCC_OscConfig+0x4ec>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe ffe2 	bl	80011e0 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe ffde 	bl	80011e0 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e056      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x41c>
 800223e:	e04e      	b.n	80022de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_RCC_OscConfig+0x4ec>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7fe ffcb 	bl	80011e0 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224e:	f7fe ffc7 	bl	80011e0 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e03f      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002260:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x44a>
 800226c:	e037      	b.n	80022de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e032      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d028      	beq.n	80022da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d121      	bne.n	80022da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d11a      	bne.n	80022da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022aa:	4013      	ands	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d111      	bne.n	80022da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	085b      	lsrs	r3, r3, #1
 80022c2:	3b01      	subs	r3, #1
 80022c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d107      	bne.n	80022da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40007000 	.word	0x40007000
 80022ec:	40023800 	.word	0x40023800
 80022f0:	42470060 	.word	0x42470060

080022f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0cc      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d90c      	bls.n	8002330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b65      	ldr	r3, [pc, #404]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0b8      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002348:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002360:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800236a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236c:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	494d      	ldr	r1, [pc, #308]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d044      	beq.n	8002414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d119      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e07f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e06f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e067      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4934      	ldr	r1, [pc, #208]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e4:	f7fe fefc 	bl	80011e0 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7fe fef8 	bl	80011e0 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e04f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	429a      	cmp	r2, r3
 8002412:	d1eb      	bne.n	80023ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d20c      	bcs.n	800243c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e032      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4916      	ldr	r1, [pc, #88]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	490e      	ldr	r1, [pc, #56]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800247a:	f000 f821 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 800247e:	4602      	mov	r2, r0
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	490a      	ldr	r1, [pc, #40]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	5ccb      	ldrb	r3, [r1, r3]
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_ClockConfig+0x1c8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fe5c 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00
 80024b0:	40023800 	.word	0x40023800
 80024b4:	08004280 	.word	0x08004280
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000004 	.word	0x20000004

080024c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	b5b0      	push	{r4, r5, r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024c6:	2100      	movs	r1, #0
 80024c8:	6079      	str	r1, [r7, #4]
 80024ca:	2100      	movs	r1, #0
 80024cc:	60f9      	str	r1, [r7, #12]
 80024ce:	2100      	movs	r1, #0
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024d2:	2100      	movs	r1, #0
 80024d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d6:	4952      	ldr	r1, [pc, #328]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 80024d8:	6889      	ldr	r1, [r1, #8]
 80024da:	f001 010c 	and.w	r1, r1, #12
 80024de:	2908      	cmp	r1, #8
 80024e0:	d00d      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x3e>
 80024e2:	2908      	cmp	r1, #8
 80024e4:	f200 8094 	bhi.w	8002610 <HAL_RCC_GetSysClockFreq+0x150>
 80024e8:	2900      	cmp	r1, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x32>
 80024ec:	2904      	cmp	r1, #4
 80024ee:	d003      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x38>
 80024f0:	e08e      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f2:	4b4c      	ldr	r3, [pc, #304]	; (8002624 <HAL_RCC_GetSysClockFreq+0x164>)
 80024f4:	60bb      	str	r3, [r7, #8]
       break;
 80024f6:	e08e      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_RCC_GetSysClockFreq+0x168>)
 80024fa:	60bb      	str	r3, [r7, #8]
      break;
 80024fc:	e08b      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024fe:	4948      	ldr	r1, [pc, #288]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 8002500:	6849      	ldr	r1, [r1, #4]
 8002502:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002506:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002508:	4945      	ldr	r1, [pc, #276]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 800250a:	6849      	ldr	r1, [r1, #4]
 800250c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002510:	2900      	cmp	r1, #0
 8002512:	d024      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002514:	4942      	ldr	r1, [pc, #264]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 8002516:	6849      	ldr	r1, [r1, #4]
 8002518:	0989      	lsrs	r1, r1, #6
 800251a:	4608      	mov	r0, r1
 800251c:	f04f 0100 	mov.w	r1, #0
 8002520:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002524:	f04f 0500 	mov.w	r5, #0
 8002528:	ea00 0204 	and.w	r2, r0, r4
 800252c:	ea01 0305 	and.w	r3, r1, r5
 8002530:	493d      	ldr	r1, [pc, #244]	; (8002628 <HAL_RCC_GetSysClockFreq+0x168>)
 8002532:	fb01 f003 	mul.w	r0, r1, r3
 8002536:	2100      	movs	r1, #0
 8002538:	fb01 f102 	mul.w	r1, r1, r2
 800253c:	1844      	adds	r4, r0, r1
 800253e:	493a      	ldr	r1, [pc, #232]	; (8002628 <HAL_RCC_GetSysClockFreq+0x168>)
 8002540:	fba2 0101 	umull	r0, r1, r2, r1
 8002544:	1863      	adds	r3, r4, r1
 8002546:	4619      	mov	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	461a      	mov	r2, r3
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	f7fe f998 	bl	8000884 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4613      	mov	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e04a      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	461a      	mov	r2, r3
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	ea02 0400 	and.w	r4, r2, r0
 8002576:	ea03 0501 	and.w	r5, r3, r1
 800257a:	4620      	mov	r0, r4
 800257c:	4629      	mov	r1, r5
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	014b      	lsls	r3, r1, #5
 8002588:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800258c:	0142      	lsls	r2, r0, #5
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	1b00      	subs	r0, r0, r4
 8002594:	eb61 0105 	sbc.w	r1, r1, r5
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	018b      	lsls	r3, r1, #6
 80025a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025a6:	0182      	lsls	r2, r0, #6
 80025a8:	1a12      	subs	r2, r2, r0
 80025aa:	eb63 0301 	sbc.w	r3, r3, r1
 80025ae:	f04f 0000 	mov.w	r0, #0
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	00d9      	lsls	r1, r3, #3
 80025b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025bc:	00d0      	lsls	r0, r2, #3
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	1912      	adds	r2, r2, r4
 80025c4:	eb45 0303 	adc.w	r3, r5, r3
 80025c8:	f04f 0000 	mov.w	r0, #0
 80025cc:	f04f 0100 	mov.w	r1, #0
 80025d0:	0299      	lsls	r1, r3, #10
 80025d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025d6:	0290      	lsls	r0, r2, #10
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	461a      	mov	r2, r3
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	f7fe f94c 	bl	8000884 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4613      	mov	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	3301      	adds	r3, #1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	60bb      	str	r3, [r7, #8]
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <HAL_RCC_GetSysClockFreq+0x164>)
 8002612:	60bb      	str	r3, [r7, #8]
      break;
 8002614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002616:	68bb      	ldr	r3, [r7, #8]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bdb0      	pop	{r4, r5, r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	00f42400 	.word	0x00f42400
 8002628:	017d7840 	.word	0x017d7840

0800262c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e041      	b.n	80026c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fc5a 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 fca0 	bl	8002fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e041      	b.n	8002760 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f839 	bl	8002768 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2202      	movs	r2, #2
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f000 fc51 	bl	8002fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_TIM_PWM_Start_DMA+0x28>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e022      	b.n	80027ea <HAL_TIM_PWM_Start_DMA+0x6e>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d109      	bne.n	80027be <HAL_TIM_PWM_Start_DMA+0x42>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	e015      	b.n	80027ea <HAL_TIM_PWM_Start_DMA+0x6e>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d109      	bne.n	80027d8 <HAL_TIM_PWM_Start_DMA+0x5c>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e008      	b.n	80027ea <HAL_TIM_PWM_Start_DMA+0x6e>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80027ee:	2302      	movs	r3, #2
 80027f0:	e158      	b.n	8002aa4 <HAL_TIM_PWM_Start_DMA+0x328>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <HAL_TIM_PWM_Start_DMA+0x90>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e022      	b.n	8002852 <HAL_TIM_PWM_Start_DMA+0xd6>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b04      	cmp	r3, #4
 8002810:	d109      	bne.n	8002826 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	e015      	b.n	8002852 <HAL_TIM_PWM_Start_DMA+0xd6>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d109      	bne.n	8002840 <HAL_TIM_PWM_Start_DMA+0xc4>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e008      	b.n	8002852 <HAL_TIM_PWM_Start_DMA+0xd6>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d024      	beq.n	80028a0 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d104      	bne.n	8002866 <HAL_TIM_PWM_Start_DMA+0xea>
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e11e      	b.n	8002aa4 <HAL_TIM_PWM_Start_DMA+0x328>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d104      	bne.n	8002876 <HAL_TIM_PWM_Start_DMA+0xfa>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002874:	e016      	b.n	80028a4 <HAL_TIM_PWM_Start_DMA+0x128>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b04      	cmp	r3, #4
 800287a:	d104      	bne.n	8002886 <HAL_TIM_PWM_Start_DMA+0x10a>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002884:	e00e      	b.n	80028a4 <HAL_TIM_PWM_Start_DMA+0x128>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d104      	bne.n	8002896 <HAL_TIM_PWM_Start_DMA+0x11a>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002894:	e006      	b.n	80028a4 <HAL_TIM_PWM_Start_DMA+0x128>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800289e:	e001      	b.n	80028a4 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0ff      	b.n	8002aa4 <HAL_TIM_PWM_Start_DMA+0x328>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	f200 80ae 	bhi.w	8002a08 <HAL_TIM_PWM_Start_DMA+0x28c>
 80028ac:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <HAL_TIM_PWM_Start_DMA+0x138>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028e9 	.word	0x080028e9
 80028b8:	08002a09 	.word	0x08002a09
 80028bc:	08002a09 	.word	0x08002a09
 80028c0:	08002a09 	.word	0x08002a09
 80028c4:	08002931 	.word	0x08002931
 80028c8:	08002a09 	.word	0x08002a09
 80028cc:	08002a09 	.word	0x08002a09
 80028d0:	08002a09 	.word	0x08002a09
 80028d4:	08002979 	.word	0x08002979
 80028d8:	08002a09 	.word	0x08002a09
 80028dc:	08002a09 	.word	0x08002a09
 80028e0:	08002a09 	.word	0x08002a09
 80028e4:	080029c1 	.word	0x080029c1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	4a6f      	ldr	r2, [pc, #444]	; (8002aac <HAL_TIM_PWM_Start_DMA+0x330>)
 80028ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	4a6e      	ldr	r2, [pc, #440]	; (8002ab0 <HAL_TIM_PWM_Start_DMA+0x334>)
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	4a6d      	ldr	r2, [pc, #436]	; (8002ab4 <HAL_TIM_PWM_Start_DMA+0x338>)
 80028fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3334      	adds	r3, #52	; 0x34
 800290c:	461a      	mov	r2, r3
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	f7fe fe32 	bl	8001578 <HAL_DMA_Start_IT>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_TIM_PWM_Start_DMA+0x1a2>
      {
        /* Return error status */
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0c2      	b.n	8002aa4 <HAL_TIM_PWM_Start_DMA+0x328>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292c:	60da      	str	r2, [r3, #12]
      break;
 800292e:	e06c      	b.n	8002a0a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	4a5d      	ldr	r2, [pc, #372]	; (8002aac <HAL_TIM_PWM_Start_DMA+0x330>)
 8002936:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	4a5c      	ldr	r2, [pc, #368]	; (8002ab0 <HAL_TIM_PWM_Start_DMA+0x334>)
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	4a5b      	ldr	r2, [pc, #364]	; (8002ab4 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002946:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3338      	adds	r3, #56	; 0x38
 8002954:	461a      	mov	r2, r3
 8002956:	887b      	ldrh	r3, [r7, #2]
 8002958:	f7fe fe0e 	bl	8001578 <HAL_DMA_Start_IT>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_TIM_PWM_Start_DMA+0x1ea>
      {
        /* Return error status */
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e09e      	b.n	8002aa4 <HAL_TIM_PWM_Start_DMA+0x328>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002974:	60da      	str	r2, [r3, #12]
      break;
 8002976:	e048      	b.n	8002a0a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	4a4b      	ldr	r2, [pc, #300]	; (8002aac <HAL_TIM_PWM_Start_DMA+0x330>)
 800297e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	4a4a      	ldr	r2, [pc, #296]	; (8002ab0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002986:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	4a49      	ldr	r2, [pc, #292]	; (8002ab4 <HAL_TIM_PWM_Start_DMA+0x338>)
 800298e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	333c      	adds	r3, #60	; 0x3c
 800299c:	461a      	mov	r2, r3
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	f7fe fdea 	bl	8001578 <HAL_DMA_Start_IT>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_TIM_PWM_Start_DMA+0x232>
      {
        /* Return error status */
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e07a      	b.n	8002aa4 <HAL_TIM_PWM_Start_DMA+0x328>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029bc:	60da      	str	r2, [r3, #12]
      break;
 80029be:	e024      	b.n	8002a0a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	4a39      	ldr	r2, [pc, #228]	; (8002aac <HAL_TIM_PWM_Start_DMA+0x330>)
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a38      	ldr	r2, [pc, #224]	; (8002ab0 <HAL_TIM_PWM_Start_DMA+0x334>)
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	4a37      	ldr	r2, [pc, #220]	; (8002ab4 <HAL_TIM_PWM_Start_DMA+0x338>)
 80029d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3340      	adds	r3, #64	; 0x40
 80029e4:	461a      	mov	r2, r3
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	f7fe fdc6 	bl	8001578 <HAL_DMA_Start_IT>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_TIM_PWM_Start_DMA+0x27a>
      {
        /* Return error status */
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e056      	b.n	8002aa4 <HAL_TIM_PWM_Start_DMA+0x328>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a04:	60da      	str	r2, [r3, #12]
      break;
 8002a06:	e000      	b.n	8002a0a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8002a08:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fd72 	bl	80034fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d107      	bne.n	8002a32 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_TIM_PWM_Start_DMA+0x2f2>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d013      	beq.n	8002a6e <HAL_TIM_PWM_Start_DMA+0x2f2>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <HAL_TIM_PWM_Start_DMA+0x340>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_TIM_PWM_Start_DMA+0x2f2>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_TIM_PWM_Start_DMA+0x2f2>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_TIM_PWM_Start_DMA+0x2f2>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d111      	bne.n	8002a92 <HAL_TIM_PWM_Start_DMA+0x316>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	d010      	beq.n	8002aa2 <HAL_TIM_PWM_Start_DMA+0x326>
    {
      __HAL_TIM_ENABLE(htim);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a90:	e007      	b.n	8002aa2 <HAL_TIM_PWM_Start_DMA+0x326>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	08002e9f 	.word	0x08002e9f
 8002ab0:	08002f47 	.word	0x08002f47
 8002ab4:	08002e0d 	.word	0x08002e0d
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800
 8002ac4:	40000c00 	.word	0x40000c00
 8002ac8:	40014000 	.word	0x40014000

08002acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0ac      	b.n	8002c40 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	f200 809f 	bhi.w	8002c34 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b31 	.word	0x08002b31
 8002b00:	08002c35 	.word	0x08002c35
 8002b04:	08002c35 	.word	0x08002c35
 8002b08:	08002c35 	.word	0x08002c35
 8002b0c:	08002b71 	.word	0x08002b71
 8002b10:	08002c35 	.word	0x08002c35
 8002b14:	08002c35 	.word	0x08002c35
 8002b18:	08002c35 	.word	0x08002c35
 8002b1c:	08002bb3 	.word	0x08002bb3
 8002b20:	08002c35 	.word	0x08002c35
 8002b24:	08002c35 	.word	0x08002c35
 8002b28:	08002c35 	.word	0x08002c35
 8002b2c:	08002bf3 	.word	0x08002bf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 faba 	bl	80030b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0208 	orr.w	r2, r2, #8
 8002b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0204 	bic.w	r2, r2, #4
 8002b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6999      	ldr	r1, [r3, #24]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	619a      	str	r2, [r3, #24]
      break;
 8002b6e:	e062      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fb00 	bl	800317c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6999      	ldr	r1, [r3, #24]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	021a      	lsls	r2, r3, #8
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	619a      	str	r2, [r3, #24]
      break;
 8002bb0:	e041      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fb4b 	bl	8003254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0208 	orr.w	r2, r2, #8
 8002bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0204 	bic.w	r2, r2, #4
 8002bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69d9      	ldr	r1, [r3, #28]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	61da      	str	r2, [r3, #28]
      break;
 8002bf0:	e021      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fb95 	bl	8003328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69d9      	ldr	r1, [r3, #28]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	021a      	lsls	r2, r3, #8
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	61da      	str	r2, [r3, #28]
      break;
 8002c32:	e000      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_TIM_ConfigClockSource+0x18>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e0b3      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x180>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c98:	d03e      	beq.n	8002d18 <HAL_TIM_ConfigClockSource+0xd0>
 8002c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9e:	f200 8087 	bhi.w	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca6:	f000 8085 	beq.w	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
 8002caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cae:	d87f      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cb0:	2b70      	cmp	r3, #112	; 0x70
 8002cb2:	d01a      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0xa2>
 8002cb4:	2b70      	cmp	r3, #112	; 0x70
 8002cb6:	d87b      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cb8:	2b60      	cmp	r3, #96	; 0x60
 8002cba:	d050      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x116>
 8002cbc:	2b60      	cmp	r3, #96	; 0x60
 8002cbe:	d877      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cc0:	2b50      	cmp	r3, #80	; 0x50
 8002cc2:	d03c      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0xf6>
 8002cc4:	2b50      	cmp	r3, #80	; 0x50
 8002cc6:	d873      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cc8:	2b40      	cmp	r3, #64	; 0x40
 8002cca:	d058      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x136>
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d86f      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cd0:	2b30      	cmp	r3, #48	; 0x30
 8002cd2:	d064      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
 8002cd4:	2b30      	cmp	r3, #48	; 0x30
 8002cd6:	d86b      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d060      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d867      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d05c      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d05a      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ce8:	e062      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6899      	ldr	r1, [r3, #8]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f000 fbdf 	bl	80034bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	609a      	str	r2, [r3, #8]
      break;
 8002d16:	e04e      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6899      	ldr	r1, [r3, #8]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f000 fbc8 	bl	80034bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d3a:	609a      	str	r2, [r3, #8]
      break;
 8002d3c:	e03b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f000 fb3c 	bl	80033c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2150      	movs	r1, #80	; 0x50
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fb95 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8002d5c:	e02b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f000 fb5b 	bl	8003426 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2160      	movs	r1, #96	; 0x60
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fb85 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8002d7c:	e01b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f000 fb1c 	bl	80033c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2140      	movs	r1, #64	; 0x40
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fb75 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8002d9c:	e00b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	4610      	mov	r0, r2
 8002daa:	f000 fb6c 	bl	8003486 <TIM_ITRx_SetConfig>
        break;
 8002dae:	e002      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002db4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d107      	bne.n	8002e34 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e32:	e02a      	b.n	8002e8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d107      	bne.n	8002e4e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2202      	movs	r2, #2
 8002e42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e4c:	e01d      	b.n	8002e8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d107      	bne.n	8002e68 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e66:	e010      	b.n	8002e8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d107      	bne.n	8002e82 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2208      	movs	r2, #8
 8002e76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e80:	e003      	b.n	8002e8a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff ffb4 	bl	8002df8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	771a      	strb	r2, [r3, #28]
}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d10b      	bne.n	8002ece <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d136      	bne.n	8002f32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ecc:	e031      	b.n	8002f32 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d10b      	bne.n	8002ef0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2202      	movs	r2, #2
 8002edc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d125      	bne.n	8002f32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eee:	e020      	b.n	8002f32 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d10b      	bne.n	8002f12 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2204      	movs	r2, #4
 8002efe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d114      	bne.n	8002f32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f10:	e00f      	b.n	8002f32 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d10a      	bne.n	8002f32 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2208      	movs	r2, #8
 8002f20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7ff ff4c 	bl	8002dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	771a      	strb	r2, [r3, #28]
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d103      	bne.n	8002f66 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	771a      	strb	r2, [r3, #28]
 8002f64:	e019      	b.n	8002f9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d103      	bne.n	8002f78 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2202      	movs	r2, #2
 8002f74:	771a      	strb	r2, [r3, #28]
 8002f76:	e010      	b.n	8002f9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d103      	bne.n	8002f8a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2204      	movs	r2, #4
 8002f86:	771a      	strb	r2, [r3, #28]
 8002f88:	e007      	b.n	8002f9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d102      	bne.n	8002f9a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2208      	movs	r2, #8
 8002f98:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff ff22 	bl	8002de4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	771a      	strb	r2, [r3, #28]
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a34      	ldr	r2, [pc, #208]	; (8003094 <TIM_Base_SetConfig+0xe4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00f      	beq.n	8002fe8 <TIM_Base_SetConfig+0x38>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fce:	d00b      	beq.n	8002fe8 <TIM_Base_SetConfig+0x38>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a31      	ldr	r2, [pc, #196]	; (8003098 <TIM_Base_SetConfig+0xe8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <TIM_Base_SetConfig+0x38>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a30      	ldr	r2, [pc, #192]	; (800309c <TIM_Base_SetConfig+0xec>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_Base_SetConfig+0x38>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a2f      	ldr	r2, [pc, #188]	; (80030a0 <TIM_Base_SetConfig+0xf0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d108      	bne.n	8002ffa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <TIM_Base_SetConfig+0xe4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01b      	beq.n	800303a <TIM_Base_SetConfig+0x8a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003008:	d017      	beq.n	800303a <TIM_Base_SetConfig+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a22      	ldr	r2, [pc, #136]	; (8003098 <TIM_Base_SetConfig+0xe8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <TIM_Base_SetConfig+0x8a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a21      	ldr	r2, [pc, #132]	; (800309c <TIM_Base_SetConfig+0xec>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00f      	beq.n	800303a <TIM_Base_SetConfig+0x8a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a20      	ldr	r2, [pc, #128]	; (80030a0 <TIM_Base_SetConfig+0xf0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00b      	beq.n	800303a <TIM_Base_SetConfig+0x8a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a1f      	ldr	r2, [pc, #124]	; (80030a4 <TIM_Base_SetConfig+0xf4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <TIM_Base_SetConfig+0x8a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a1e      	ldr	r2, [pc, #120]	; (80030a8 <TIM_Base_SetConfig+0xf8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d003      	beq.n	800303a <TIM_Base_SetConfig+0x8a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <TIM_Base_SetConfig+0xfc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d108      	bne.n	800304c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a08      	ldr	r2, [pc, #32]	; (8003094 <TIM_Base_SetConfig+0xe4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d103      	bne.n	8003080 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	615a      	str	r2, [r3, #20]
}
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800
 80030a0:	40000c00 	.word	0x40000c00
 80030a4:	40014000 	.word	0x40014000
 80030a8:	40014400 	.word	0x40014400
 80030ac:	40014800 	.word	0x40014800

080030b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f023 0201 	bic.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f023 0302 	bic.w	r3, r3, #2
 80030f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <TIM_OC1_SetConfig+0xc8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10c      	bne.n	8003126 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0308 	bic.w	r3, r3, #8
 8003112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a13      	ldr	r2, [pc, #76]	; (8003178 <TIM_OC1_SetConfig+0xc8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d111      	bne.n	8003152 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800313c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	621a      	str	r2, [r3, #32]
}
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40010000 	.word	0x40010000

0800317c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f023 0210 	bic.w	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0320 	bic.w	r3, r3, #32
 80031c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <TIM_OC2_SetConfig+0xd4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10d      	bne.n	80031f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a15      	ldr	r2, [pc, #84]	; (8003250 <TIM_OC2_SetConfig+0xd4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d113      	bne.n	8003228 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800320e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	621a      	str	r2, [r3, #32]
}
 8003242:	bf00      	nop
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40010000 	.word	0x40010000

08003254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0303 	bic.w	r3, r3, #3
 800328a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800329c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <TIM_OC3_SetConfig+0xd0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10d      	bne.n	80032ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a14      	ldr	r2, [pc, #80]	; (8003324 <TIM_OC3_SetConfig+0xd0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d113      	bne.n	80032fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40010000 	.word	0x40010000

08003328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	031b      	lsls	r3, r3, #12
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <TIM_OC4_SetConfig+0x9c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d109      	bne.n	800339c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40010000 	.word	0x40010000

080033c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 030a 	bic.w	r3, r3, #10
 8003404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003426:	b480      	push	{r7}
 8003428:	b087      	sub	sp, #28
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0210 	bic.w	r2, r3, #16
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	031b      	lsls	r3, r3, #12
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f043 0307 	orr.w	r3, r3, #7
 80034a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	021a      	lsls	r2, r3, #8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	431a      	orrs	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	609a      	str	r2, [r3, #8]
}
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	2201      	movs	r2, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1a      	ldr	r2, [r3, #32]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	43db      	mvns	r3, r3
 800351e:	401a      	ands	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1a      	ldr	r2, [r3, #32]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	431a      	orrs	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800355c:	2302      	movs	r3, #2
 800355e:	e050      	b.n	8003602 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ac:	d013      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a18      	ldr	r2, [pc, #96]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a16      	ldr	r2, [pc, #88]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a15      	ldr	r2, [pc, #84]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a13      	ldr	r2, [pc, #76]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10c      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40014000 	.word	0x40014000

08003624 <__libc_init_array>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	4d0d      	ldr	r5, [pc, #52]	; (800365c <__libc_init_array+0x38>)
 8003628:	4c0d      	ldr	r4, [pc, #52]	; (8003660 <__libc_init_array+0x3c>)
 800362a:	1b64      	subs	r4, r4, r5
 800362c:	10a4      	asrs	r4, r4, #2
 800362e:	2600      	movs	r6, #0
 8003630:	42a6      	cmp	r6, r4
 8003632:	d109      	bne.n	8003648 <__libc_init_array+0x24>
 8003634:	4d0b      	ldr	r5, [pc, #44]	; (8003664 <__libc_init_array+0x40>)
 8003636:	4c0c      	ldr	r4, [pc, #48]	; (8003668 <__libc_init_array+0x44>)
 8003638:	f000 fe16 	bl	8004268 <_init>
 800363c:	1b64      	subs	r4, r4, r5
 800363e:	10a4      	asrs	r4, r4, #2
 8003640:	2600      	movs	r6, #0
 8003642:	42a6      	cmp	r6, r4
 8003644:	d105      	bne.n	8003652 <__libc_init_array+0x2e>
 8003646:	bd70      	pop	{r4, r5, r6, pc}
 8003648:	f855 3b04 	ldr.w	r3, [r5], #4
 800364c:	4798      	blx	r3
 800364e:	3601      	adds	r6, #1
 8003650:	e7ee      	b.n	8003630 <__libc_init_array+0xc>
 8003652:	f855 3b04 	ldr.w	r3, [r5], #4
 8003656:	4798      	blx	r3
 8003658:	3601      	adds	r6, #1
 800365a:	e7f2      	b.n	8003642 <__libc_init_array+0x1e>
 800365c:	08004680 	.word	0x08004680
 8003660:	08004680 	.word	0x08004680
 8003664:	08004680 	.word	0x08004680
 8003668:	08004684 	.word	0x08004684

0800366c <memset>:
 800366c:	4402      	add	r2, r0
 800366e:	4603      	mov	r3, r0
 8003670:	4293      	cmp	r3, r2
 8003672:	d100      	bne.n	8003676 <memset+0xa>
 8003674:	4770      	bx	lr
 8003676:	f803 1b01 	strb.w	r1, [r3], #1
 800367a:	e7f9      	b.n	8003670 <memset+0x4>

0800367c <rint>:
 800367c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800367e:	ec51 0b10 	vmov	r0, r1, d0
 8003682:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003686:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800368a:	2e13      	cmp	r6, #19
 800368c:	ee10 4a10 	vmov	r4, s0
 8003690:	460b      	mov	r3, r1
 8003692:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8003696:	dc58      	bgt.n	800374a <rint+0xce>
 8003698:	2e00      	cmp	r6, #0
 800369a:	da2b      	bge.n	80036f4 <rint+0x78>
 800369c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80036a0:	4302      	orrs	r2, r0
 80036a2:	d023      	beq.n	80036ec <rint+0x70>
 80036a4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80036a8:	4302      	orrs	r2, r0
 80036aa:	4254      	negs	r4, r2
 80036ac:	4314      	orrs	r4, r2
 80036ae:	0c4b      	lsrs	r3, r1, #17
 80036b0:	0b24      	lsrs	r4, r4, #12
 80036b2:	045b      	lsls	r3, r3, #17
 80036b4:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80036b8:	ea44 0103 	orr.w	r1, r4, r3
 80036bc:	4b32      	ldr	r3, [pc, #200]	; (8003788 <rint+0x10c>)
 80036be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80036c2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4630      	mov	r0, r6
 80036cc:	4639      	mov	r1, r7
 80036ce:	f7fc feb3 	bl	8000438 <__adddf3>
 80036d2:	e9cd 0100 	strd	r0, r1, [sp]
 80036d6:	463b      	mov	r3, r7
 80036d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036dc:	4632      	mov	r2, r6
 80036de:	f7fc fea9 	bl	8000434 <__aeabi_dsub>
 80036e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80036e6:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80036ea:	4639      	mov	r1, r7
 80036ec:	ec41 0b10 	vmov	d0, r0, r1
 80036f0:	b003      	add	sp, #12
 80036f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f4:	4a25      	ldr	r2, [pc, #148]	; (800378c <rint+0x110>)
 80036f6:	4132      	asrs	r2, r6
 80036f8:	ea01 0702 	and.w	r7, r1, r2
 80036fc:	4307      	orrs	r7, r0
 80036fe:	d0f5      	beq.n	80036ec <rint+0x70>
 8003700:	0851      	lsrs	r1, r2, #1
 8003702:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8003706:	4314      	orrs	r4, r2
 8003708:	d00c      	beq.n	8003724 <rint+0xa8>
 800370a:	ea23 0201 	bic.w	r2, r3, r1
 800370e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003712:	2e13      	cmp	r6, #19
 8003714:	fa43 f606 	asr.w	r6, r3, r6
 8003718:	bf0c      	ite	eq
 800371a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800371e:	2400      	movne	r4, #0
 8003720:	ea42 0306 	orr.w	r3, r2, r6
 8003724:	4918      	ldr	r1, [pc, #96]	; (8003788 <rint+0x10c>)
 8003726:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800372a:	4622      	mov	r2, r4
 800372c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003730:	4620      	mov	r0, r4
 8003732:	4629      	mov	r1, r5
 8003734:	f7fc fe80 	bl	8000438 <__adddf3>
 8003738:	e9cd 0100 	strd	r0, r1, [sp]
 800373c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003740:	4622      	mov	r2, r4
 8003742:	462b      	mov	r3, r5
 8003744:	f7fc fe76 	bl	8000434 <__aeabi_dsub>
 8003748:	e7d0      	b.n	80036ec <rint+0x70>
 800374a:	2e33      	cmp	r6, #51	; 0x33
 800374c:	dd07      	ble.n	800375e <rint+0xe2>
 800374e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003752:	d1cb      	bne.n	80036ec <rint+0x70>
 8003754:	ee10 2a10 	vmov	r2, s0
 8003758:	f7fc fe6e 	bl	8000438 <__adddf3>
 800375c:	e7c6      	b.n	80036ec <rint+0x70>
 800375e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8003762:	f04f 36ff 	mov.w	r6, #4294967295
 8003766:	40d6      	lsrs	r6, r2
 8003768:	4230      	tst	r0, r6
 800376a:	d0bf      	beq.n	80036ec <rint+0x70>
 800376c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8003770:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8003774:	bf1f      	itttt	ne
 8003776:	ea24 0101 	bicne.w	r1, r4, r1
 800377a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800377e:	fa44 f202 	asrne.w	r2, r4, r2
 8003782:	ea41 0402 	orrne.w	r4, r1, r2
 8003786:	e7cd      	b.n	8003724 <rint+0xa8>
 8003788:	08004298 	.word	0x08004298
 800378c:	000fffff 	.word	0x000fffff

08003790 <sinf>:
 8003790:	ee10 3a10 	vmov	r3, s0
 8003794:	b507      	push	{r0, r1, r2, lr}
 8003796:	4a1d      	ldr	r2, [pc, #116]	; (800380c <sinf+0x7c>)
 8003798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800379c:	4293      	cmp	r3, r2
 800379e:	dc05      	bgt.n	80037ac <sinf+0x1c>
 80037a0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003810 <sinf+0x80>
 80037a4:	2000      	movs	r0, #0
 80037a6:	f000 fc5b 	bl	8004060 <__kernel_sinf>
 80037aa:	e004      	b.n	80037b6 <sinf+0x26>
 80037ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80037b0:	db04      	blt.n	80037bc <sinf+0x2c>
 80037b2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80037b6:	b003      	add	sp, #12
 80037b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80037bc:	4668      	mov	r0, sp
 80037be:	f000 f829 	bl	8003814 <__ieee754_rem_pio2f>
 80037c2:	f000 0003 	and.w	r0, r0, #3
 80037c6:	2801      	cmp	r0, #1
 80037c8:	d008      	beq.n	80037dc <sinf+0x4c>
 80037ca:	2802      	cmp	r0, #2
 80037cc:	d00d      	beq.n	80037ea <sinf+0x5a>
 80037ce:	b9b0      	cbnz	r0, 80037fe <sinf+0x6e>
 80037d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80037d4:	ed9d 0a00 	vldr	s0, [sp]
 80037d8:	2001      	movs	r0, #1
 80037da:	e7e4      	b.n	80037a6 <sinf+0x16>
 80037dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80037e0:	ed9d 0a00 	vldr	s0, [sp]
 80037e4:	f000 f952 	bl	8003a8c <__kernel_cosf>
 80037e8:	e7e5      	b.n	80037b6 <sinf+0x26>
 80037ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80037ee:	ed9d 0a00 	vldr	s0, [sp]
 80037f2:	2001      	movs	r0, #1
 80037f4:	f000 fc34 	bl	8004060 <__kernel_sinf>
 80037f8:	eeb1 0a40 	vneg.f32	s0, s0
 80037fc:	e7db      	b.n	80037b6 <sinf+0x26>
 80037fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8003802:	ed9d 0a00 	vldr	s0, [sp]
 8003806:	f000 f941 	bl	8003a8c <__kernel_cosf>
 800380a:	e7f5      	b.n	80037f8 <sinf+0x68>
 800380c:	3f490fd8 	.word	0x3f490fd8
 8003810:	00000000 	.word	0x00000000

08003814 <__ieee754_rem_pio2f>:
 8003814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003816:	ee10 6a10 	vmov	r6, s0
 800381a:	4b8e      	ldr	r3, [pc, #568]	; (8003a54 <__ieee754_rem_pio2f+0x240>)
 800381c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003820:	429d      	cmp	r5, r3
 8003822:	b087      	sub	sp, #28
 8003824:	eef0 7a40 	vmov.f32	s15, s0
 8003828:	4604      	mov	r4, r0
 800382a:	dc05      	bgt.n	8003838 <__ieee754_rem_pio2f+0x24>
 800382c:	2300      	movs	r3, #0
 800382e:	ed80 0a00 	vstr	s0, [r0]
 8003832:	6043      	str	r3, [r0, #4]
 8003834:	2000      	movs	r0, #0
 8003836:	e01a      	b.n	800386e <__ieee754_rem_pio2f+0x5a>
 8003838:	4b87      	ldr	r3, [pc, #540]	; (8003a58 <__ieee754_rem_pio2f+0x244>)
 800383a:	429d      	cmp	r5, r3
 800383c:	dc46      	bgt.n	80038cc <__ieee754_rem_pio2f+0xb8>
 800383e:	2e00      	cmp	r6, #0
 8003840:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8003a5c <__ieee754_rem_pio2f+0x248>
 8003844:	4b86      	ldr	r3, [pc, #536]	; (8003a60 <__ieee754_rem_pio2f+0x24c>)
 8003846:	f025 050f 	bic.w	r5, r5, #15
 800384a:	dd1f      	ble.n	800388c <__ieee754_rem_pio2f+0x78>
 800384c:	429d      	cmp	r5, r3
 800384e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003852:	d00e      	beq.n	8003872 <__ieee754_rem_pio2f+0x5e>
 8003854:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003a64 <__ieee754_rem_pio2f+0x250>
 8003858:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800385c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003860:	ed80 0a00 	vstr	s0, [r0]
 8003864:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003868:	2001      	movs	r0, #1
 800386a:	edc4 7a01 	vstr	s15, [r4, #4]
 800386e:	b007      	add	sp, #28
 8003870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003872:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8003a68 <__ieee754_rem_pio2f+0x254>
 8003876:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8003a6c <__ieee754_rem_pio2f+0x258>
 800387a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800387e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003882:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003886:	edc0 6a00 	vstr	s13, [r0]
 800388a:	e7eb      	b.n	8003864 <__ieee754_rem_pio2f+0x50>
 800388c:	429d      	cmp	r5, r3
 800388e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003892:	d00e      	beq.n	80038b2 <__ieee754_rem_pio2f+0x9e>
 8003894:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003a64 <__ieee754_rem_pio2f+0x250>
 8003898:	ee37 0a87 	vadd.f32	s0, s15, s14
 800389c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80038a0:	ed80 0a00 	vstr	s0, [r0]
 80038a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ac:	edc4 7a01 	vstr	s15, [r4, #4]
 80038b0:	e7dd      	b.n	800386e <__ieee754_rem_pio2f+0x5a>
 80038b2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8003a68 <__ieee754_rem_pio2f+0x254>
 80038b6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8003a6c <__ieee754_rem_pio2f+0x258>
 80038ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80038be:	ee77 6a87 	vadd.f32	s13, s15, s14
 80038c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80038c6:	edc0 6a00 	vstr	s13, [r0]
 80038ca:	e7eb      	b.n	80038a4 <__ieee754_rem_pio2f+0x90>
 80038cc:	4b68      	ldr	r3, [pc, #416]	; (8003a70 <__ieee754_rem_pio2f+0x25c>)
 80038ce:	429d      	cmp	r5, r3
 80038d0:	dc72      	bgt.n	80039b8 <__ieee754_rem_pio2f+0x1a4>
 80038d2:	f000 fc0d 	bl	80040f0 <fabsf>
 80038d6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003a74 <__ieee754_rem_pio2f+0x260>
 80038da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80038de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80038e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ea:	ee17 0a90 	vmov	r0, s15
 80038ee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8003a5c <__ieee754_rem_pio2f+0x248>
 80038f2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80038f6:	281f      	cmp	r0, #31
 80038f8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003a64 <__ieee754_rem_pio2f+0x250>
 80038fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003900:	eeb1 6a47 	vneg.f32	s12, s14
 8003904:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003908:	ee16 2a90 	vmov	r2, s13
 800390c:	dc1c      	bgt.n	8003948 <__ieee754_rem_pio2f+0x134>
 800390e:	495a      	ldr	r1, [pc, #360]	; (8003a78 <__ieee754_rem_pio2f+0x264>)
 8003910:	1e47      	subs	r7, r0, #1
 8003912:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8003916:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800391a:	428b      	cmp	r3, r1
 800391c:	d014      	beq.n	8003948 <__ieee754_rem_pio2f+0x134>
 800391e:	6022      	str	r2, [r4, #0]
 8003920:	ed94 7a00 	vldr	s14, [r4]
 8003924:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003928:	2e00      	cmp	r6, #0
 800392a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800392e:	ed84 0a01 	vstr	s0, [r4, #4]
 8003932:	da9c      	bge.n	800386e <__ieee754_rem_pio2f+0x5a>
 8003934:	eeb1 7a47 	vneg.f32	s14, s14
 8003938:	eeb1 0a40 	vneg.f32	s0, s0
 800393c:	ed84 7a00 	vstr	s14, [r4]
 8003940:	ed84 0a01 	vstr	s0, [r4, #4]
 8003944:	4240      	negs	r0, r0
 8003946:	e792      	b.n	800386e <__ieee754_rem_pio2f+0x5a>
 8003948:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800394c:	15eb      	asrs	r3, r5, #23
 800394e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8003952:	2d08      	cmp	r5, #8
 8003954:	dde3      	ble.n	800391e <__ieee754_rem_pio2f+0x10a>
 8003956:	eddf 7a44 	vldr	s15, [pc, #272]	; 8003a68 <__ieee754_rem_pio2f+0x254>
 800395a:	eef0 6a40 	vmov.f32	s13, s0
 800395e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8003962:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003966:	eea6 0a27 	vfma.f32	s0, s12, s15
 800396a:	eddf 7a40 	vldr	s15, [pc, #256]	; 8003a6c <__ieee754_rem_pio2f+0x258>
 800396e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8003972:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8003976:	eef0 7a40 	vmov.f32	s15, s0
 800397a:	ee15 2a90 	vmov	r2, s11
 800397e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003982:	1a5b      	subs	r3, r3, r1
 8003984:	2b19      	cmp	r3, #25
 8003986:	dc04      	bgt.n	8003992 <__ieee754_rem_pio2f+0x17e>
 8003988:	edc4 5a00 	vstr	s11, [r4]
 800398c:	eeb0 0a66 	vmov.f32	s0, s13
 8003990:	e7c6      	b.n	8003920 <__ieee754_rem_pio2f+0x10c>
 8003992:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8003a7c <__ieee754_rem_pio2f+0x268>
 8003996:	eeb0 0a66 	vmov.f32	s0, s13
 800399a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800399e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80039a2:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003a80 <__ieee754_rem_pio2f+0x26c>
 80039a6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80039aa:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80039ae:	ee30 7a67 	vsub.f32	s14, s0, s15
 80039b2:	ed84 7a00 	vstr	s14, [r4]
 80039b6:	e7b3      	b.n	8003920 <__ieee754_rem_pio2f+0x10c>
 80039b8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80039bc:	db06      	blt.n	80039cc <__ieee754_rem_pio2f+0x1b8>
 80039be:	ee70 7a40 	vsub.f32	s15, s0, s0
 80039c2:	edc0 7a01 	vstr	s15, [r0, #4]
 80039c6:	edc0 7a00 	vstr	s15, [r0]
 80039ca:	e733      	b.n	8003834 <__ieee754_rem_pio2f+0x20>
 80039cc:	15ea      	asrs	r2, r5, #23
 80039ce:	3a86      	subs	r2, #134	; 0x86
 80039d0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80039dc:	eddf 6a29 	vldr	s13, [pc, #164]	; 8003a84 <__ieee754_rem_pio2f+0x270>
 80039e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80039e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039e8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80039ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80039f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80039f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80039f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039fc:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003a00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0c:	edcd 7a05 	vstr	s15, [sp, #20]
 8003a10:	d11e      	bne.n	8003a50 <__ieee754_rem_pio2f+0x23c>
 8003a12:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1a:	bf14      	ite	ne
 8003a1c:	2302      	movne	r3, #2
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	4919      	ldr	r1, [pc, #100]	; (8003a88 <__ieee754_rem_pio2f+0x274>)
 8003a22:	9101      	str	r1, [sp, #4]
 8003a24:	2102      	movs	r1, #2
 8003a26:	9100      	str	r1, [sp, #0]
 8003a28:	a803      	add	r0, sp, #12
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	f000 f88e 	bl	8003b4c <__kernel_rem_pio2f>
 8003a30:	2e00      	cmp	r6, #0
 8003a32:	f6bf af1c 	bge.w	800386e <__ieee754_rem_pio2f+0x5a>
 8003a36:	edd4 7a00 	vldr	s15, [r4]
 8003a3a:	eef1 7a67 	vneg.f32	s15, s15
 8003a3e:	edc4 7a00 	vstr	s15, [r4]
 8003a42:	edd4 7a01 	vldr	s15, [r4, #4]
 8003a46:	eef1 7a67 	vneg.f32	s15, s15
 8003a4a:	edc4 7a01 	vstr	s15, [r4, #4]
 8003a4e:	e779      	b.n	8003944 <__ieee754_rem_pio2f+0x130>
 8003a50:	2303      	movs	r3, #3
 8003a52:	e7e5      	b.n	8003a20 <__ieee754_rem_pio2f+0x20c>
 8003a54:	3f490fd8 	.word	0x3f490fd8
 8003a58:	4016cbe3 	.word	0x4016cbe3
 8003a5c:	3fc90f80 	.word	0x3fc90f80
 8003a60:	3fc90fd0 	.word	0x3fc90fd0
 8003a64:	37354443 	.word	0x37354443
 8003a68:	37354400 	.word	0x37354400
 8003a6c:	2e85a308 	.word	0x2e85a308
 8003a70:	43490f80 	.word	0x43490f80
 8003a74:	3f22f984 	.word	0x3f22f984
 8003a78:	080042a8 	.word	0x080042a8
 8003a7c:	2e85a300 	.word	0x2e85a300
 8003a80:	248d3132 	.word	0x248d3132
 8003a84:	43800000 	.word	0x43800000
 8003a88:	08004328 	.word	0x08004328

08003a8c <__kernel_cosf>:
 8003a8c:	ee10 3a10 	vmov	r3, s0
 8003a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a94:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003a98:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003a9c:	da05      	bge.n	8003aaa <__kernel_cosf+0x1e>
 8003a9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003aa2:	ee17 2a90 	vmov	r2, s15
 8003aa6:	2a00      	cmp	r2, #0
 8003aa8:	d03d      	beq.n	8003b26 <__kernel_cosf+0x9a>
 8003aaa:	ee60 5a00 	vmul.f32	s11, s0, s0
 8003aae:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003b2c <__kernel_cosf+0xa0>
 8003ab2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003b30 <__kernel_cosf+0xa4>
 8003ab6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003b34 <__kernel_cosf+0xa8>
 8003aba:	4a1f      	ldr	r2, [pc, #124]	; (8003b38 <__kernel_cosf+0xac>)
 8003abc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003b3c <__kernel_cosf+0xb0>
 8003ac6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003aca:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003b40 <__kernel_cosf+0xb4>
 8003ace:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8003ad2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003b44 <__kernel_cosf+0xb8>
 8003ad6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003ada:	eeb0 7a66 	vmov.f32	s14, s13
 8003ade:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8003ae2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003ae6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8003aea:	ee67 6a25 	vmul.f32	s13, s14, s11
 8003aee:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8003af2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8003af6:	dc04      	bgt.n	8003b02 <__kernel_cosf+0x76>
 8003af8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003afc:	ee36 0a47 	vsub.f32	s0, s12, s14
 8003b00:	4770      	bx	lr
 8003b02:	4a11      	ldr	r2, [pc, #68]	; (8003b48 <__kernel_cosf+0xbc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bfda      	itte	le
 8003b08:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8003b0c:	ee06 3a90 	vmovle	s13, r3
 8003b10:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8003b14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003b18:	ee36 0a66 	vsub.f32	s0, s12, s13
 8003b1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b20:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003b24:	4770      	bx	lr
 8003b26:	eeb0 0a46 	vmov.f32	s0, s12
 8003b2a:	4770      	bx	lr
 8003b2c:	ad47d74e 	.word	0xad47d74e
 8003b30:	310f74f6 	.word	0x310f74f6
 8003b34:	3d2aaaab 	.word	0x3d2aaaab
 8003b38:	3e999999 	.word	0x3e999999
 8003b3c:	b493f27c 	.word	0xb493f27c
 8003b40:	37d00d01 	.word	0x37d00d01
 8003b44:	bab60b61 	.word	0xbab60b61
 8003b48:	3f480000 	.word	0x3f480000

08003b4c <__kernel_rem_pio2f>:
 8003b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b50:	ed2d 8b04 	vpush	{d8-d9}
 8003b54:	b0d7      	sub	sp, #348	; 0x15c
 8003b56:	4616      	mov	r6, r2
 8003b58:	4698      	mov	r8, r3
 8003b5a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003b5c:	4bbb      	ldr	r3, [pc, #748]	; (8003e4c <__kernel_rem_pio2f+0x300>)
 8003b5e:	9001      	str	r0, [sp, #4]
 8003b60:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8003b64:	1d33      	adds	r3, r6, #4
 8003b66:	460d      	mov	r5, r1
 8003b68:	f108 39ff 	add.w	r9, r8, #4294967295
 8003b6c:	db29      	blt.n	8003bc2 <__kernel_rem_pio2f+0x76>
 8003b6e:	1ef1      	subs	r1, r6, #3
 8003b70:	bf48      	it	mi
 8003b72:	1d31      	addmi	r1, r6, #4
 8003b74:	10c9      	asrs	r1, r1, #3
 8003b76:	1c4c      	adds	r4, r1, #1
 8003b78:	00e3      	lsls	r3, r4, #3
 8003b7a:	9302      	str	r3, [sp, #8]
 8003b7c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003b7e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8003e5c <__kernel_rem_pio2f+0x310>
 8003b82:	eba1 0009 	sub.w	r0, r1, r9
 8003b86:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8003b8a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8003b8e:	eb07 0c09 	add.w	ip, r7, r9
 8003b92:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8003b96:	2300      	movs	r3, #0
 8003b98:	4563      	cmp	r3, ip
 8003b9a:	dd14      	ble.n	8003bc6 <__kernel_rem_pio2f+0x7a>
 8003b9c:	ab1a      	add	r3, sp, #104	; 0x68
 8003b9e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8003ba2:	46cc      	mov	ip, r9
 8003ba4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8003ba8:	f1c8 0b01 	rsb	fp, r8, #1
 8003bac:	eb0b 020c 	add.w	r2, fp, ip
 8003bb0:	4297      	cmp	r7, r2
 8003bb2:	db27      	blt.n	8003c04 <__kernel_rem_pio2f+0xb8>
 8003bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003bb8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8003e5c <__kernel_rem_pio2f+0x310>
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	e016      	b.n	8003bf0 <__kernel_rem_pio2f+0xa4>
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	e7d7      	b.n	8003b76 <__kernel_rem_pio2f+0x2a>
 8003bc6:	42d8      	cmn	r0, r3
 8003bc8:	bf5d      	ittte	pl
 8003bca:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8003bce:	ee07 2a90 	vmovpl	s15, r2
 8003bd2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003bd6:	eef0 7a47 	vmovmi.f32	s15, s14
 8003bda:	ecea 7a01 	vstmia	sl!, {s15}
 8003bde:	3301      	adds	r3, #1
 8003be0:	e7da      	b.n	8003b98 <__kernel_rem_pio2f+0x4c>
 8003be2:	ecfe 6a01 	vldmia	lr!, {s13}
 8003be6:	ed90 7a00 	vldr	s14, [r0]
 8003bea:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003bee:	3201      	adds	r2, #1
 8003bf0:	454a      	cmp	r2, r9
 8003bf2:	f1a0 0004 	sub.w	r0, r0, #4
 8003bf6:	ddf4      	ble.n	8003be2 <__kernel_rem_pio2f+0x96>
 8003bf8:	ecea 7a01 	vstmia	sl!, {s15}
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	f10c 0c01 	add.w	ip, ip, #1
 8003c02:	e7d3      	b.n	8003bac <__kernel_rem_pio2f+0x60>
 8003c04:	ab06      	add	r3, sp, #24
 8003c06:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8003c0a:	9304      	str	r3, [sp, #16]
 8003c0c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003c0e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8003e58 <__kernel_rem_pio2f+0x30c>
 8003c12:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8003e54 <__kernel_rem_pio2f+0x308>
 8003c16:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003c1a:	9303      	str	r3, [sp, #12]
 8003c1c:	46ba      	mov	sl, r7
 8003c1e:	ab56      	add	r3, sp, #344	; 0x158
 8003c20:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003c24:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8003c28:	ab06      	add	r3, sp, #24
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	4652      	mov	r2, sl
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	dc51      	bgt.n	8003cd6 <__kernel_rem_pio2f+0x18a>
 8003c32:	4620      	mov	r0, r4
 8003c34:	9305      	str	r3, [sp, #20]
 8003c36:	f000 faa5 	bl	8004184 <scalbnf>
 8003c3a:	eeb0 8a40 	vmov.f32	s16, s0
 8003c3e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8003c42:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003c46:	f000 fa5b 	bl	8004100 <floorf>
 8003c4a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8003c4e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003c52:	2c00      	cmp	r4, #0
 8003c54:	9b05      	ldr	r3, [sp, #20]
 8003c56:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003c5a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003c5e:	edcd 7a00 	vstr	s15, [sp]
 8003c62:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003c66:	dd4b      	ble.n	8003d00 <__kernel_rem_pio2f+0x1b4>
 8003c68:	f10a 3cff 	add.w	ip, sl, #4294967295
 8003c6c:	aa06      	add	r2, sp, #24
 8003c6e:	f1c4 0e08 	rsb	lr, r4, #8
 8003c72:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8003c76:	ee17 1a90 	vmov	r1, s15
 8003c7a:	fa42 f00e 	asr.w	r0, r2, lr
 8003c7e:	4401      	add	r1, r0
 8003c80:	9100      	str	r1, [sp, #0]
 8003c82:	fa00 f00e 	lsl.w	r0, r0, lr
 8003c86:	a906      	add	r1, sp, #24
 8003c88:	1a12      	subs	r2, r2, r0
 8003c8a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8003c8e:	f1c4 0007 	rsb	r0, r4, #7
 8003c92:	fa42 fb00 	asr.w	fp, r2, r0
 8003c96:	f1bb 0f00 	cmp.w	fp, #0
 8003c9a:	dd43      	ble.n	8003d24 <__kernel_rem_pio2f+0x1d8>
 8003c9c:	9a00      	ldr	r2, [sp, #0]
 8003c9e:	f04f 0e00 	mov.w	lr, #0
 8003ca2:	3201      	adds	r2, #1
 8003ca4:	9200      	str	r2, [sp, #0]
 8003ca6:	4670      	mov	r0, lr
 8003ca8:	45f2      	cmp	sl, lr
 8003caa:	dc6c      	bgt.n	8003d86 <__kernel_rem_pio2f+0x23a>
 8003cac:	2c00      	cmp	r4, #0
 8003cae:	dd04      	ble.n	8003cba <__kernel_rem_pio2f+0x16e>
 8003cb0:	2c01      	cmp	r4, #1
 8003cb2:	d079      	beq.n	8003da8 <__kernel_rem_pio2f+0x25c>
 8003cb4:	2c02      	cmp	r4, #2
 8003cb6:	f000 8082 	beq.w	8003dbe <__kernel_rem_pio2f+0x272>
 8003cba:	f1bb 0f02 	cmp.w	fp, #2
 8003cbe:	d131      	bne.n	8003d24 <__kernel_rem_pio2f+0x1d8>
 8003cc0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003cc4:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003cc8:	b360      	cbz	r0, 8003d24 <__kernel_rem_pio2f+0x1d8>
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f000 fa5a 	bl	8004184 <scalbnf>
 8003cd0:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003cd4:	e026      	b.n	8003d24 <__kernel_rem_pio2f+0x1d8>
 8003cd6:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003cda:	3a01      	subs	r2, #1
 8003cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ce0:	a942      	add	r1, sp, #264	; 0x108
 8003ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ce6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8003cea:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003cee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003cf2:	eca0 0a01 	vstmia	r0!, {s0}
 8003cf6:	ed9c 0a00 	vldr	s0, [ip]
 8003cfa:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003cfe:	e796      	b.n	8003c2e <__kernel_rem_pio2f+0xe2>
 8003d00:	d107      	bne.n	8003d12 <__kernel_rem_pio2f+0x1c6>
 8003d02:	f10a 32ff 	add.w	r2, sl, #4294967295
 8003d06:	a906      	add	r1, sp, #24
 8003d08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d0c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8003d10:	e7c1      	b.n	8003c96 <__kernel_rem_pio2f+0x14a>
 8003d12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003d16:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	da2f      	bge.n	8003d80 <__kernel_rem_pio2f+0x234>
 8003d20:	f04f 0b00 	mov.w	fp, #0
 8003d24:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2c:	f040 8098 	bne.w	8003e60 <__kernel_rem_pio2f+0x314>
 8003d30:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003d34:	469c      	mov	ip, r3
 8003d36:	2200      	movs	r2, #0
 8003d38:	45bc      	cmp	ip, r7
 8003d3a:	da48      	bge.n	8003dce <__kernel_rem_pio2f+0x282>
 8003d3c:	2a00      	cmp	r2, #0
 8003d3e:	d05f      	beq.n	8003e00 <__kernel_rem_pio2f+0x2b4>
 8003d40:	aa06      	add	r2, sp, #24
 8003d42:	3c08      	subs	r4, #8
 8003d44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d48:	2900      	cmp	r1, #0
 8003d4a:	d07d      	beq.n	8003e48 <__kernel_rem_pio2f+0x2fc>
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	f000 fa16 	bl	8004184 <scalbnf>
 8003d58:	9b01      	ldr	r3, [sp, #4]
 8003d5a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003e58 <__kernel_rem_pio2f+0x30c>
 8003d5e:	4619      	mov	r1, r3
 8003d60:	2900      	cmp	r1, #0
 8003d62:	f280 80af 	bge.w	8003ec4 <__kernel_rem_pio2f+0x378>
 8003d66:	4618      	mov	r0, r3
 8003d68:	2400      	movs	r4, #0
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	f2c0 80d0 	blt.w	8003f10 <__kernel_rem_pio2f+0x3c4>
 8003d70:	a942      	add	r1, sp, #264	; 0x108
 8003d72:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8003d76:	4a36      	ldr	r2, [pc, #216]	; (8003e50 <__kernel_rem_pio2f+0x304>)
 8003d78:	eddf 7a38 	vldr	s15, [pc, #224]	; 8003e5c <__kernel_rem_pio2f+0x310>
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	e0bb      	b.n	8003ef8 <__kernel_rem_pio2f+0x3ac>
 8003d80:	f04f 0b02 	mov.w	fp, #2
 8003d84:	e78a      	b.n	8003c9c <__kernel_rem_pio2f+0x150>
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	b948      	cbnz	r0, 8003d9e <__kernel_rem_pio2f+0x252>
 8003d8a:	b11a      	cbz	r2, 8003d94 <__kernel_rem_pio2f+0x248>
 8003d8c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f10e 0e01 	add.w	lr, lr, #1
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	e784      	b.n	8003ca8 <__kernel_rem_pio2f+0x15c>
 8003d9e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	4602      	mov	r2, r0
 8003da6:	e7f5      	b.n	8003d94 <__kernel_rem_pio2f+0x248>
 8003da8:	f10a 3cff 	add.w	ip, sl, #4294967295
 8003dac:	ab06      	add	r3, sp, #24
 8003dae:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8003db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db6:	aa06      	add	r2, sp, #24
 8003db8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8003dbc:	e77d      	b.n	8003cba <__kernel_rem_pio2f+0x16e>
 8003dbe:	f10a 3cff 	add.w	ip, sl, #4294967295
 8003dc2:	ab06      	add	r3, sp, #24
 8003dc4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8003dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dcc:	e7f3      	b.n	8003db6 <__kernel_rem_pio2f+0x26a>
 8003dce:	a906      	add	r1, sp, #24
 8003dd0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8003dd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003dd8:	4302      	orrs	r2, r0
 8003dda:	e7ad      	b.n	8003d38 <__kernel_rem_pio2f+0x1ec>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003de2:	2a00      	cmp	r2, #0
 8003de4:	d0fa      	beq.n	8003ddc <__kernel_rem_pio2f+0x290>
 8003de6:	a91a      	add	r1, sp, #104	; 0x68
 8003de8:	eb0a 0208 	add.w	r2, sl, r8
 8003dec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003df0:	f10a 0301 	add.w	r3, sl, #1
 8003df4:	eb0a 0100 	add.w	r1, sl, r0
 8003df8:	4299      	cmp	r1, r3
 8003dfa:	da04      	bge.n	8003e06 <__kernel_rem_pio2f+0x2ba>
 8003dfc:	468a      	mov	sl, r1
 8003dfe:	e70e      	b.n	8003c1e <__kernel_rem_pio2f+0xd2>
 8003e00:	9b04      	ldr	r3, [sp, #16]
 8003e02:	2001      	movs	r0, #1
 8003e04:	e7eb      	b.n	8003dde <__kernel_rem_pio2f+0x292>
 8003e06:	9803      	ldr	r0, [sp, #12]
 8003e08:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003e0c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003e10:	9000      	str	r0, [sp, #0]
 8003e12:	ee07 0a90 	vmov	s15, r0
 8003e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	ece2 7a01 	vstmia	r2!, {s15}
 8003e20:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003e5c <__kernel_rem_pio2f+0x310>
 8003e24:	4696      	mov	lr, r2
 8003e26:	4548      	cmp	r0, r9
 8003e28:	dd06      	ble.n	8003e38 <__kernel_rem_pio2f+0x2ec>
 8003e2a:	a842      	add	r0, sp, #264	; 0x108
 8003e2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003e30:	edc0 7a00 	vstr	s15, [r0]
 8003e34:	3301      	adds	r3, #1
 8003e36:	e7df      	b.n	8003df8 <__kernel_rem_pio2f+0x2ac>
 8003e38:	ecfc 6a01 	vldmia	ip!, {s13}
 8003e3c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8003e40:	3001      	adds	r0, #1
 8003e42:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003e46:	e7ee      	b.n	8003e26 <__kernel_rem_pio2f+0x2da>
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	e779      	b.n	8003d40 <__kernel_rem_pio2f+0x1f4>
 8003e4c:	0800466c 	.word	0x0800466c
 8003e50:	08004640 	.word	0x08004640
 8003e54:	43800000 	.word	0x43800000
 8003e58:	3b800000 	.word	0x3b800000
 8003e5c:	00000000 	.word	0x00000000
 8003e60:	9b02      	ldr	r3, [sp, #8]
 8003e62:	eeb0 0a48 	vmov.f32	s0, s16
 8003e66:	1b98      	subs	r0, r3, r6
 8003e68:	f000 f98c 	bl	8004184 <scalbnf>
 8003e6c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8003e54 <__kernel_rem_pio2f+0x308>
 8003e70:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e78:	db1b      	blt.n	8003eb2 <__kernel_rem_pio2f+0x366>
 8003e7a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8003e58 <__kernel_rem_pio2f+0x30c>
 8003e7e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003e82:	aa06      	add	r2, sp, #24
 8003e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e88:	a906      	add	r1, sp, #24
 8003e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e8e:	3408      	adds	r4, #8
 8003e90:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003e9c:	ee10 3a10 	vmov	r3, s0
 8003ea0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8003ea4:	ee17 2a90 	vmov	r2, s15
 8003ea8:	f10a 0301 	add.w	r3, sl, #1
 8003eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003eb0:	e74c      	b.n	8003d4c <__kernel_rem_pio2f+0x200>
 8003eb2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003eb6:	aa06      	add	r2, sp, #24
 8003eb8:	ee10 3a10 	vmov	r3, s0
 8003ebc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8003ec0:	4653      	mov	r3, sl
 8003ec2:	e743      	b.n	8003d4c <__kernel_rem_pio2f+0x200>
 8003ec4:	aa42      	add	r2, sp, #264	; 0x108
 8003ec6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8003eca:	aa06      	add	r2, sp, #24
 8003ecc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003ed0:	9201      	str	r2, [sp, #4]
 8003ed2:	ee07 2a90 	vmov	s15, r2
 8003ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eda:	3901      	subs	r1, #1
 8003edc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003ee0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003ee4:	edc0 7a00 	vstr	s15, [r0]
 8003ee8:	e73a      	b.n	8003d60 <__kernel_rem_pio2f+0x214>
 8003eea:	ecf2 6a01 	vldmia	r2!, {s13}
 8003eee:	ecb6 7a01 	vldmia	r6!, {s14}
 8003ef2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003ef6:	3101      	adds	r1, #1
 8003ef8:	42b9      	cmp	r1, r7
 8003efa:	dc01      	bgt.n	8003f00 <__kernel_rem_pio2f+0x3b4>
 8003efc:	428c      	cmp	r4, r1
 8003efe:	daf4      	bge.n	8003eea <__kernel_rem_pio2f+0x39e>
 8003f00:	aa56      	add	r2, sp, #344	; 0x158
 8003f02:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8003f06:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8003f0a:	3801      	subs	r0, #1
 8003f0c:	3401      	adds	r4, #1
 8003f0e:	e72c      	b.n	8003d6a <__kernel_rem_pio2f+0x21e>
 8003f10:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003f12:	2a02      	cmp	r2, #2
 8003f14:	dc0a      	bgt.n	8003f2c <__kernel_rem_pio2f+0x3e0>
 8003f16:	2a00      	cmp	r2, #0
 8003f18:	dc61      	bgt.n	8003fde <__kernel_rem_pio2f+0x492>
 8003f1a:	d03c      	beq.n	8003f96 <__kernel_rem_pio2f+0x44a>
 8003f1c:	9b00      	ldr	r3, [sp, #0]
 8003f1e:	f003 0007 	and.w	r0, r3, #7
 8003f22:	b057      	add	sp, #348	; 0x15c
 8003f24:	ecbd 8b04 	vpop	{d8-d9}
 8003f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003f2e:	2a03      	cmp	r2, #3
 8003f30:	d1f4      	bne.n	8003f1c <__kernel_rem_pio2f+0x3d0>
 8003f32:	aa2e      	add	r2, sp, #184	; 0xb8
 8003f34:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003f38:	4608      	mov	r0, r1
 8003f3a:	461c      	mov	r4, r3
 8003f3c:	2c00      	cmp	r4, #0
 8003f3e:	f1a0 0004 	sub.w	r0, r0, #4
 8003f42:	dc59      	bgt.n	8003ff8 <__kernel_rem_pio2f+0x4ac>
 8003f44:	4618      	mov	r0, r3
 8003f46:	2801      	cmp	r0, #1
 8003f48:	f1a1 0104 	sub.w	r1, r1, #4
 8003f4c:	dc64      	bgt.n	8004018 <__kernel_rem_pio2f+0x4cc>
 8003f4e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8003e5c <__kernel_rem_pio2f+0x310>
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	dc70      	bgt.n	8004038 <__kernel_rem_pio2f+0x4ec>
 8003f56:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8003f5a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8003f5e:	f1bb 0f00 	cmp.w	fp, #0
 8003f62:	d172      	bne.n	800404a <__kernel_rem_pio2f+0x4fe>
 8003f64:	edc5 6a00 	vstr	s13, [r5]
 8003f68:	ed85 7a01 	vstr	s14, [r5, #4]
 8003f6c:	edc5 7a02 	vstr	s15, [r5, #8]
 8003f70:	e7d4      	b.n	8003f1c <__kernel_rem_pio2f+0x3d0>
 8003f72:	aa2e      	add	r2, sp, #184	; 0xb8
 8003f74:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003f78:	ed91 7a00 	vldr	s14, [r1]
 8003f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f80:	3b01      	subs	r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	daf5      	bge.n	8003f72 <__kernel_rem_pio2f+0x426>
 8003f86:	f1bb 0f00 	cmp.w	fp, #0
 8003f8a:	d001      	beq.n	8003f90 <__kernel_rem_pio2f+0x444>
 8003f8c:	eef1 7a67 	vneg.f32	s15, s15
 8003f90:	edc5 7a00 	vstr	s15, [r5]
 8003f94:	e7c2      	b.n	8003f1c <__kernel_rem_pio2f+0x3d0>
 8003f96:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8003e5c <__kernel_rem_pio2f+0x310>
 8003f9a:	e7f2      	b.n	8003f82 <__kernel_rem_pio2f+0x436>
 8003f9c:	aa2e      	add	r2, sp, #184	; 0xb8
 8003f9e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8003fa2:	edd0 7a00 	vldr	s15, [r0]
 8003fa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003faa:	3901      	subs	r1, #1
 8003fac:	2900      	cmp	r1, #0
 8003fae:	daf5      	bge.n	8003f9c <__kernel_rem_pio2f+0x450>
 8003fb0:	f1bb 0f00 	cmp.w	fp, #0
 8003fb4:	d017      	beq.n	8003fe6 <__kernel_rem_pio2f+0x49a>
 8003fb6:	eef1 7a47 	vneg.f32	s15, s14
 8003fba:	edc5 7a00 	vstr	s15, [r5]
 8003fbe:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8003fc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fc6:	a82f      	add	r0, sp, #188	; 0xbc
 8003fc8:	2101      	movs	r1, #1
 8003fca:	428b      	cmp	r3, r1
 8003fcc:	da0e      	bge.n	8003fec <__kernel_rem_pio2f+0x4a0>
 8003fce:	f1bb 0f00 	cmp.w	fp, #0
 8003fd2:	d001      	beq.n	8003fd8 <__kernel_rem_pio2f+0x48c>
 8003fd4:	eef1 7a67 	vneg.f32	s15, s15
 8003fd8:	edc5 7a01 	vstr	s15, [r5, #4]
 8003fdc:	e79e      	b.n	8003f1c <__kernel_rem_pio2f+0x3d0>
 8003fde:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8003e5c <__kernel_rem_pio2f+0x310>
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	e7e2      	b.n	8003fac <__kernel_rem_pio2f+0x460>
 8003fe6:	eef0 7a47 	vmov.f32	s15, s14
 8003fea:	e7e6      	b.n	8003fba <__kernel_rem_pio2f+0x46e>
 8003fec:	ecb0 7a01 	vldmia	r0!, {s14}
 8003ff0:	3101      	adds	r1, #1
 8003ff2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ff6:	e7e8      	b.n	8003fca <__kernel_rem_pio2f+0x47e>
 8003ff8:	edd0 7a00 	vldr	s15, [r0]
 8003ffc:	edd0 6a01 	vldr	s13, [r0, #4]
 8004000:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004004:	3c01      	subs	r4, #1
 8004006:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800400a:	ed80 7a00 	vstr	s14, [r0]
 800400e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004012:	edc0 7a01 	vstr	s15, [r0, #4]
 8004016:	e791      	b.n	8003f3c <__kernel_rem_pio2f+0x3f0>
 8004018:	edd1 7a00 	vldr	s15, [r1]
 800401c:	edd1 6a01 	vldr	s13, [r1, #4]
 8004020:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004024:	3801      	subs	r0, #1
 8004026:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800402a:	ed81 7a00 	vstr	s14, [r1]
 800402e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004032:	edc1 7a01 	vstr	s15, [r1, #4]
 8004036:	e786      	b.n	8003f46 <__kernel_rem_pio2f+0x3fa>
 8004038:	aa2e      	add	r2, sp, #184	; 0xb8
 800403a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800403e:	ed91 7a00 	vldr	s14, [r1]
 8004042:	3b01      	subs	r3, #1
 8004044:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004048:	e783      	b.n	8003f52 <__kernel_rem_pio2f+0x406>
 800404a:	eef1 6a66 	vneg.f32	s13, s13
 800404e:	eeb1 7a47 	vneg.f32	s14, s14
 8004052:	edc5 6a00 	vstr	s13, [r5]
 8004056:	ed85 7a01 	vstr	s14, [r5, #4]
 800405a:	eef1 7a67 	vneg.f32	s15, s15
 800405e:	e785      	b.n	8003f6c <__kernel_rem_pio2f+0x420>

08004060 <__kernel_sinf>:
 8004060:	ee10 3a10 	vmov	r3, s0
 8004064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004068:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800406c:	da04      	bge.n	8004078 <__kernel_sinf+0x18>
 800406e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004072:	ee17 3a90 	vmov	r3, s15
 8004076:	b35b      	cbz	r3, 80040d0 <__kernel_sinf+0x70>
 8004078:	ee20 7a00 	vmul.f32	s14, s0, s0
 800407c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80040d4 <__kernel_sinf+0x74>
 8004080:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80040d8 <__kernel_sinf+0x78>
 8004084:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004088:	eddf 7a14 	vldr	s15, [pc, #80]	; 80040dc <__kernel_sinf+0x7c>
 800408c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004090:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80040e0 <__kernel_sinf+0x80>
 8004094:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004098:	eddf 7a12 	vldr	s15, [pc, #72]	; 80040e4 <__kernel_sinf+0x84>
 800409c:	ee60 6a07 	vmul.f32	s13, s0, s14
 80040a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80040a4:	b930      	cbnz	r0, 80040b4 <__kernel_sinf+0x54>
 80040a6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80040e8 <__kernel_sinf+0x88>
 80040aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80040ae:	eea6 0a26 	vfma.f32	s0, s12, s13
 80040b2:	4770      	bx	lr
 80040b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80040b8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80040bc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80040c0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80040c4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80040ec <__kernel_sinf+0x8c>
 80040c8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80040cc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	2f2ec9d3 	.word	0x2f2ec9d3
 80040d8:	b2d72f34 	.word	0xb2d72f34
 80040dc:	3638ef1b 	.word	0x3638ef1b
 80040e0:	b9500d01 	.word	0xb9500d01
 80040e4:	3c088889 	.word	0x3c088889
 80040e8:	be2aaaab 	.word	0xbe2aaaab
 80040ec:	3e2aaaab 	.word	0x3e2aaaab

080040f0 <fabsf>:
 80040f0:	ee10 3a10 	vmov	r3, s0
 80040f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040f8:	ee00 3a10 	vmov	s0, r3
 80040fc:	4770      	bx	lr
	...

08004100 <floorf>:
 8004100:	ee10 3a10 	vmov	r3, s0
 8004104:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004108:	3a7f      	subs	r2, #127	; 0x7f
 800410a:	2a16      	cmp	r2, #22
 800410c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004110:	dc2a      	bgt.n	8004168 <floorf+0x68>
 8004112:	2a00      	cmp	r2, #0
 8004114:	da11      	bge.n	800413a <floorf+0x3a>
 8004116:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004178 <floorf+0x78>
 800411a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800411e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004126:	dd05      	ble.n	8004134 <floorf+0x34>
 8004128:	2b00      	cmp	r3, #0
 800412a:	da23      	bge.n	8004174 <floorf+0x74>
 800412c:	4a13      	ldr	r2, [pc, #76]	; (800417c <floorf+0x7c>)
 800412e:	2900      	cmp	r1, #0
 8004130:	bf18      	it	ne
 8004132:	4613      	movne	r3, r2
 8004134:	ee00 3a10 	vmov	s0, r3
 8004138:	4770      	bx	lr
 800413a:	4911      	ldr	r1, [pc, #68]	; (8004180 <floorf+0x80>)
 800413c:	4111      	asrs	r1, r2
 800413e:	420b      	tst	r3, r1
 8004140:	d0fa      	beq.n	8004138 <floorf+0x38>
 8004142:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004178 <floorf+0x78>
 8004146:	ee30 0a27 	vadd.f32	s0, s0, s15
 800414a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800414e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004152:	ddef      	ble.n	8004134 <floorf+0x34>
 8004154:	2b00      	cmp	r3, #0
 8004156:	bfbe      	ittt	lt
 8004158:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800415c:	fa40 f202 	asrlt.w	r2, r0, r2
 8004160:	189b      	addlt	r3, r3, r2
 8004162:	ea23 0301 	bic.w	r3, r3, r1
 8004166:	e7e5      	b.n	8004134 <floorf+0x34>
 8004168:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800416c:	d3e4      	bcc.n	8004138 <floorf+0x38>
 800416e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004172:	4770      	bx	lr
 8004174:	2300      	movs	r3, #0
 8004176:	e7dd      	b.n	8004134 <floorf+0x34>
 8004178:	7149f2ca 	.word	0x7149f2ca
 800417c:	bf800000 	.word	0xbf800000
 8004180:	007fffff 	.word	0x007fffff

08004184 <scalbnf>:
 8004184:	ee10 3a10 	vmov	r3, s0
 8004188:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800418c:	d025      	beq.n	80041da <scalbnf+0x56>
 800418e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004192:	d302      	bcc.n	800419a <scalbnf+0x16>
 8004194:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004198:	4770      	bx	lr
 800419a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800419e:	d122      	bne.n	80041e6 <scalbnf+0x62>
 80041a0:	4b2a      	ldr	r3, [pc, #168]	; (800424c <scalbnf+0xc8>)
 80041a2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004250 <scalbnf+0xcc>
 80041a6:	4298      	cmp	r0, r3
 80041a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80041ac:	db16      	blt.n	80041dc <scalbnf+0x58>
 80041ae:	ee10 3a10 	vmov	r3, s0
 80041b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80041b6:	3a19      	subs	r2, #25
 80041b8:	4402      	add	r2, r0
 80041ba:	2afe      	cmp	r2, #254	; 0xfe
 80041bc:	dd15      	ble.n	80041ea <scalbnf+0x66>
 80041be:	ee10 3a10 	vmov	r3, s0
 80041c2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004254 <scalbnf+0xd0>
 80041c6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004258 <scalbnf+0xd4>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	eeb0 7a67 	vmov.f32	s14, s15
 80041d0:	bfb8      	it	lt
 80041d2:	eef0 7a66 	vmovlt.f32	s15, s13
 80041d6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80041da:	4770      	bx	lr
 80041dc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800425c <scalbnf+0xd8>
 80041e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80041e4:	4770      	bx	lr
 80041e6:	0dd2      	lsrs	r2, r2, #23
 80041e8:	e7e6      	b.n	80041b8 <scalbnf+0x34>
 80041ea:	2a00      	cmp	r2, #0
 80041ec:	dd06      	ble.n	80041fc <scalbnf+0x78>
 80041ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80041f2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80041f6:	ee00 3a10 	vmov	s0, r3
 80041fa:	4770      	bx	lr
 80041fc:	f112 0f16 	cmn.w	r2, #22
 8004200:	da1a      	bge.n	8004238 <scalbnf+0xb4>
 8004202:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004206:	4298      	cmp	r0, r3
 8004208:	ee10 3a10 	vmov	r3, s0
 800420c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004210:	dd0a      	ble.n	8004228 <scalbnf+0xa4>
 8004212:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004254 <scalbnf+0xd0>
 8004216:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004258 <scalbnf+0xd4>
 800421a:	eef0 7a40 	vmov.f32	s15, s0
 800421e:	2b00      	cmp	r3, #0
 8004220:	bf18      	it	ne
 8004222:	eeb0 0a47 	vmovne.f32	s0, s14
 8004226:	e7db      	b.n	80041e0 <scalbnf+0x5c>
 8004228:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800425c <scalbnf+0xd8>
 800422c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004260 <scalbnf+0xdc>
 8004230:	eef0 7a40 	vmov.f32	s15, s0
 8004234:	2b00      	cmp	r3, #0
 8004236:	e7f3      	b.n	8004220 <scalbnf+0x9c>
 8004238:	3219      	adds	r2, #25
 800423a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800423e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004242:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004264 <scalbnf+0xe0>
 8004246:	ee07 3a10 	vmov	s14, r3
 800424a:	e7c4      	b.n	80041d6 <scalbnf+0x52>
 800424c:	ffff3cb0 	.word	0xffff3cb0
 8004250:	4c000000 	.word	0x4c000000
 8004254:	7149f2ca 	.word	0x7149f2ca
 8004258:	f149f2ca 	.word	0xf149f2ca
 800425c:	0da24260 	.word	0x0da24260
 8004260:	8da24260 	.word	0x8da24260
 8004264:	33000000 	.word	0x33000000

08004268 <_init>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	bf00      	nop
 800426c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426e:	bc08      	pop	{r3}
 8004270:	469e      	mov	lr, r3
 8004272:	4770      	bx	lr

08004274 <_fini>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	bf00      	nop
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr
