
TIM_InputCaptureMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000743c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080075e0  080075e0  000175e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079fc  080079fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a04  08007a04  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200001e0  08007bec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08007bec  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddf2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f82  00000000  00000000  0002e002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  0002ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00030c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017187  00000000  00000000  00031890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d377  00000000  00000000  00048a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e6ab  00000000  00000000  00055d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4439  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000479c  00000000  00000000  000e448c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080075c4 	.word	0x080075c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080075c4 	.word	0x080075c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t diffCapture = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	83fb      	strh	r3, [r7, #30]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fd4f 	bl	800195c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f889 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 fa21 	bl	8001308 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec6:	f000 f9e9 	bl	800129c <MX_DMA_Init>
  MX_TIM1_Init();
 8000eca:	f000 f8f7 	bl	80010bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ece:	f000 f945 	bl	800115c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ed2:	f000 f9b9 	bl	8001248 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000ed6:	4835      	ldr	r0, [pc, #212]	; (8000fac <main+0xfc>)
 8000ed8:	f002 f90e 	bl	80030f8 <HAL_TIM_Base_Start>
  HAL_DMA_Start(&hdma_tim1_up, (uint32_t) odrVals, (uint32_t) &GPIOA->ODR, 2);
 8000edc:	4934      	ldr	r1, [pc, #208]	; (8000fb0 <main+0x100>)
 8000ede:	2302      	movs	r3, #2
 8000ee0:	4a34      	ldr	r2, [pc, #208]	; (8000fb4 <main+0x104>)
 8000ee2:	4835      	ldr	r0, [pc, #212]	; (8000fb8 <main+0x108>)
 8000ee4:	f000 ff6c 	bl	8001dc0 <HAL_DMA_Start>
         __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000ee8:	4b30      	ldr	r3, [pc, #192]	; (8000fac <main+0xfc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <main+0xfc>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ef6:	60da      	str	r2, [r3, #12]

    HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) captures, 2);
 8000ef8:	2302      	movs	r3, #2
 8000efa:	4a30      	ldr	r2, [pc, #192]	; (8000fbc <main+0x10c>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4830      	ldr	r0, [pc, #192]	; (8000fc0 <main+0x110>)
 8000f00:	f002 f9ae 	bl	8003260 <HAL_TIM_IC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (captureDone != 0) {
 8000f04:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <main+0x114>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0fa      	beq.n	8000f04 <main+0x54>
	        if (captures[1] >= captures[0])
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <main+0x10c>)
 8000f10:	885a      	ldrh	r2, [r3, #2]
 8000f12:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <main+0x10c>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d306      	bcc.n	8000f28 <main+0x78>
	        	diffCapture = captures[1] - captures[0];
 8000f1a:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <main+0x10c>)
 8000f1c:	885a      	ldrh	r2, [r3, #2]
 8000f1e:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <main+0x10c>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	83fb      	strh	r3, [r7, #30]
 8000f26:	e00b      	b.n	8000f40 <main+0x90>
	        else

	        	diffCapture = (htim3.Instance->ARR - captures[0]) + captures[1];
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <main+0x110>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <main+0x10c>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <main+0x10c>)
 8000f3a:	885b      	ldrh	r3, [r3, #2]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	83fb      	strh	r3, [r7, #30]

	        frequency = HAL_RCC_GetHCLKFreq() / (htim3.Instance->PSC + 1);
 8000f40:	f002 f856 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8000f44:	4602      	mov	r2, r0
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <main+0x110>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <main+0x118>)
 8000f5c:	edc3 7a00 	vstr	s15, [r3]

	        frequency = (float) frequency / diffCapture;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <main+0x118>)
 8000f62:	edd3 6a00 	vldr	s13, [r3]
 8000f66:	8bfb      	ldrh	r3, [r7, #30]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <main+0x118>)
 8000f76:	edc3 7a00 	vstr	s15, [r3]

	        sprintf(msg, "Input frequency: %.3f\r\n", frequency);
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <main+0x118>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff faea 	bl	8000558 <__aeabi_f2d>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4638      	mov	r0, r7
 8000f8a:	4910      	ldr	r1, [pc, #64]	; (8000fcc <main+0x11c>)
 8000f8c:	f004 f8ee 	bl	800516c <siprintf>
	        HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000f90:	463b      	mov	r3, r7
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff f924 	bl	80001e0 <strlen>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4639      	mov	r1, r7
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <main+0x120>)
 8000fa4:	f003 f9a1 	bl	80042ea <HAL_UART_Transmit>
	        while (1);
 8000fa8:	e7fe      	b.n	8000fa8 <main+0xf8>
 8000faa:	bf00      	nop
 8000fac:	200002bc 	.word	0x200002bc
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	40020014 	.word	0x40020014
 8000fb8:	20000304 	.word	0x20000304
 8000fbc:	200002b8 	.word	0x200002b8
 8000fc0:	20000210 	.word	0x20000210
 8000fc4:	20000200 	.word	0x20000200
 8000fc8:	200001fc 	.word	0x200001fc
 8000fcc:	080075e0 	.word	0x080075e0
 8000fd0:	20000364 	.word	0x20000364

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	; 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fc50 	bl	8004888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <SystemClock_Config+0xe0>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a2c      	ldr	r2, [pc, #176]	; (80010b4 <SystemClock_Config+0xe0>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <SystemClock_Config+0xe0>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <SystemClock_Config+0xe4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001020:	4a25      	ldr	r2, [pc, #148]	; (80010b8 <SystemClock_Config+0xe4>)
 8001022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <SystemClock_Config+0xe4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001034:	2306      	movs	r3, #6
 8001036:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001038:	2301      	movs	r3, #1
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	2310      	movs	r3, #16
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001048:	2300      	movs	r3, #0
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800104c:	2310      	movs	r3, #16
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001050:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001054:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001056:	2304      	movs	r3, #4
 8001058:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800105a:	2304      	movs	r3, #4
 800105c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fb48 	bl	80026f8 <HAL_RCC_OscConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800106e:	f000 f9c1 	bl	80013f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001072:	230f      	movs	r3, #15
 8001074:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001076:	2302      	movs	r3, #2
 8001078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001082:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2102      	movs	r1, #2
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fdaa 	bl	8002be8 <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800109a:	f000 f9ab 	bl	80013f4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80010a4:	2000      	movs	r0, #0
 80010a6:	f001 fe85 	bl	8002db4 <HAL_RCC_MCOConfig>
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_TIM1_Init+0x98>)
 80010da:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <MX_TIM1_Init+0x9c>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_TIM1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_TIM1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_TIM1_Init+0x98>)
 80010ec:	f240 3247 	movw	r2, #839	; 0x347
 80010f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_TIM1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_TIM1_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_TIM1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001104:	4813      	ldr	r0, [pc, #76]	; (8001154 <MX_TIM1_Init+0x98>)
 8001106:	f001 ffa7 	bl	8003058 <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001110:	f000 f970 	bl	80013f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4619      	mov	r1, r3
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <MX_TIM1_Init+0x98>)
 8001122:	f002 fbd3 	bl	80038cc <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800112c:	f000 f962 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_TIM1_Init+0x98>)
 800113e:	f003 f805 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001148:	f000 f954 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200002bc 	.word	0x200002bc
 8001158:	40010000 	.word	0x40010000

0800115c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0318 	add.w	r3, r7, #24
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <MX_TIM3_Init+0xe4>)
 8001188:	4a2e      	ldr	r2, [pc, #184]	; (8001244 <MX_TIM3_Init+0xe8>)
 800118a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <MX_TIM3_Init+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <MX_TIM3_Init+0xe4>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MX_TIM3_Init+0xe4>)
 800119a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ac:	4824      	ldr	r0, [pc, #144]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011ae:	f001 ff53 	bl	8003058 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80011b8:	f000 f91c 	bl	80013f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80011bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c0:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockFilter = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	4619      	mov	r1, r3
 80011d4:	481a      	ldr	r0, [pc, #104]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011d6:	f002 fb79 	bl	80038cc <HAL_TIM_ConfigClockSource>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80011e0:	f000 f908 	bl	80013f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011e4:	4816      	ldr	r0, [pc, #88]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011e6:	f001 ffe1 	bl	80031ac <HAL_TIM_IC_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80011f0:	f000 f900 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	480f      	ldr	r0, [pc, #60]	; (8001240 <MX_TIM3_Init+0xe4>)
 8001204:	f002 ffa2 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800120e:	f000 f8f1 	bl	80013f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001216:	2301      	movs	r3, #1
 8001218:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001222:	463b      	mov	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_TIM3_Init+0xe4>)
 800122a:	f002 fabb 	bl	80037a4 <HAL_TIM_IC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001234:	f000 f8de 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000210 	.word	0x20000210
 8001244:	40000400 	.word	0x40000400

08001248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <MX_USART2_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001254:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001280:	f002 ffe6 	bl	8004250 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f000 f8b3 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000364 	.word	0x20000364
 8001298:	40004400 	.word	0x40004400

0800129c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_DMA_Init+0x68>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a16      	ldr	r2, [pc, #88]	; (8001304 <MX_DMA_Init+0x68>)
 80012ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_DMA_Init+0x68>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_DMA_Init+0x68>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <MX_DMA_Init+0x68>)
 80012c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_DMA_Init+0x68>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	200f      	movs	r0, #15
 80012e0:	f000 fc89 	bl	8001bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80012e4:	200f      	movs	r0, #15
 80012e6:	f000 fca2 	bl	8001c2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2044      	movs	r0, #68	; 0x44
 80012f0:	f000 fc81 	bl	8001bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80012f4:	2044      	movs	r0, #68	; 0x44
 80012f6:	f000 fc9a 	bl	8001c2e <HAL_NVIC_EnableIRQ>

}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <MX_GPIO_Init+0xbc>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <MX_GPIO_Init+0xbc>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <MX_GPIO_Init+0xbc>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <MX_GPIO_Init+0xbc>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a20      	ldr	r2, [pc, #128]	; (80013c4 <MX_GPIO_Init+0xbc>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_GPIO_Init+0xbc>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_GPIO_Init+0xbc>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <MX_GPIO_Init+0xbc>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_GPIO_Init+0xbc>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2120      	movs	r1, #32
 8001376:	4814      	ldr	r0, [pc, #80]	; (80013c8 <MX_GPIO_Init+0xc0>)
 8001378:	f001 f9a4 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800137c:	2320      	movs	r3, #32
 800137e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	4619      	mov	r1, r3
 8001392:	480d      	ldr	r0, [pc, #52]	; (80013c8 <MX_GPIO_Init+0xc0>)
 8001394:	f001 f812 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_GPIO_Init+0xc0>)
 80013b6:	f001 f801 	bl	80023bc <HAL_GPIO_Init>

}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7f1b      	ldrb	r3, [r3, #28]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <HAL_TIM_IC_CaptureCallback+0x16>
    captureDone = 1;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x24>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000200 	.word	0x20000200

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	e7fe      	b.n	80013fc <Error_Handler+0x8>
	...

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_MspInit+0x4c>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_MspInit+0x4c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a69      	ldr	r2, [pc, #420]	; (8001614 <HAL_TIM_Base_MspInit+0x1c4>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d13d      	bne.n	80014ee <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	4b68      	ldr	r3, [pc, #416]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a67      	ldr	r2, [pc, #412]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b65      	ldr	r3, [pc, #404]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800148e:	4b63      	ldr	r3, [pc, #396]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 8001490:	4a63      	ldr	r2, [pc, #396]	; (8001620 <HAL_TIM_Base_MspInit+0x1d0>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001494:	4b61      	ldr	r3, [pc, #388]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 8001496:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800149a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800149c:	4b5f      	ldr	r3, [pc, #380]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 800149e:	2240      	movs	r2, #64	; 0x40
 80014a0:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a2:	4b5e      	ldr	r3, [pc, #376]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80014a8:	4b5c      	ldr	r3, [pc, #368]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 80014aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ae:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b0:	4b5a      	ldr	r3, [pc, #360]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b6:	4b59      	ldr	r3, [pc, #356]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80014bc:	4b57      	ldr	r3, [pc, #348]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 80014be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c2:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ca:	4b54      	ldr	r3, [pc, #336]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80014d0:	4852      	ldr	r0, [pc, #328]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 80014d2:	f000 fbc7 	bl	8001c64 <HAL_DMA_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_TIM_Base_MspInit+0x90>
    {
      Error_Handler();
 80014dc:	f7ff ff8a 	bl	80013f4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a4e      	ldr	r2, [pc, #312]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 80014e4:	621a      	str	r2, [r3, #32]
 80014e6:	4a4d      	ldr	r2, [pc, #308]	; (800161c <HAL_TIM_Base_MspInit+0x1cc>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014ec:	e08e      	b.n	800160c <HAL_TIM_Base_MspInit+0x1bc>
  else if(htim_base->Instance==TIM3)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_TIM_Base_MspInit+0x1d4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	f040 8089 	bne.w	800160c <HAL_TIM_Base_MspInit+0x1bc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	4b46      	ldr	r3, [pc, #280]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a45      	ldr	r2, [pc, #276]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b43      	ldr	r3, [pc, #268]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a3e      	ldr	r2, [pc, #248]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b3c      	ldr	r3, [pc, #240]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a37      	ldr	r2, [pc, #220]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b35      	ldr	r3, [pc, #212]	; (8001618 <HAL_TIM_Base_MspInit+0x1c8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800154e:	2340      	movs	r3, #64	; 0x40
 8001550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800155e:	2302      	movs	r3, #2
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	482f      	ldr	r0, [pc, #188]	; (8001628 <HAL_TIM_Base_MspInit+0x1d8>)
 800156a:	f000 ff27 	bl	80023bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800156e:	2304      	movs	r3, #4
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800157e:	2302      	movs	r3, #2
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4619      	mov	r1, r3
 8001588:	4828      	ldr	r0, [pc, #160]	; (800162c <HAL_TIM_Base_MspInit+0x1dc>)
 800158a:	f000 ff17 	bl	80023bc <HAL_GPIO_Init>
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 8001590:	4a28      	ldr	r2, [pc, #160]	; (8001634 <HAL_TIM_Base_MspInit+0x1e4>)
 8001592:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 8001596:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800159a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80015a8:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ae:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015be:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80015d4:	4816      	ldr	r0, [pc, #88]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015d6:	f000 fb45 	bl	8001c64 <HAL_DMA_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_TIM_Base_MspInit+0x194>
      Error_Handler();
 80015e0:	f7ff ff08 	bl	80013f4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
 80015ea:	4a11      	ldr	r2, [pc, #68]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015f4:	639a      	str	r2, [r3, #56]	; 0x38
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_TIM_Base_MspInit+0x1e0>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	201d      	movs	r0, #29
 8001602:	f000 faf8 	bl	8001bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001606:	201d      	movs	r0, #29
 8001608:	f000 fb11 	bl	8001c2e <HAL_NVIC_EnableIRQ>
}
 800160c:	bf00      	nop
 800160e:	3730      	adds	r7, #48	; 0x30
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40010000 	.word	0x40010000
 8001618:	40023800 	.word	0x40023800
 800161c:	20000304 	.word	0x20000304
 8001620:	40026488 	.word	0x40026488
 8001624:	40000400 	.word	0x40000400
 8001628:	40020000 	.word	0x40020000
 800162c:	40020c00 	.word	0x40020c00
 8001630:	20000258 	.word	0x20000258
 8001634:	40026070 	.word	0x40026070

08001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <HAL_UART_MspInit+0x84>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12b      	bne.n	80016b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_UART_MspInit+0x88>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_UART_MspInit+0x88>)
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_UART_MspInit+0x88>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_UART_MspInit+0x88>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <HAL_UART_MspInit+0x88>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_UART_MspInit+0x88>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001692:	230c      	movs	r3, #12
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a2:	2307      	movs	r3, #7
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <HAL_UART_MspInit+0x8c>)
 80016ae:	f000 fe85 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40004400 	.word	0x40004400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <NMI_Handler+0x4>

080016ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <MemManage_Handler+0x4>

080016da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001714:	f000 f974 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <DMA1_Stream4_IRQHandler+0x10>)
 8001722:	f000 fbe1 	bl	8001ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000258 	.word	0x20000258

08001730 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <TIM3_IRQHandler+0x10>)
 8001736:	f001 ff2d 	bl	8003594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000210 	.word	0x20000210

08001744 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA2_Stream5_IRQHandler+0x10>)
 800174a:	f000 fbcd 	bl	8001ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000304 	.word	0x20000304

08001758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_kill>:

int _kill(int pid, int sig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001772:	f003 f85f 	bl	8004834 <__errno>
 8001776:	4603      	mov	r3, r0
 8001778:	2216      	movs	r2, #22
 800177a:	601a      	str	r2, [r3, #0]
	return -1;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_exit>:

void _exit (int status)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe7 	bl	8001768 <_kill>
	while (1) {}		/* Make sure we hang here */
 800179a:	e7fe      	b.n	800179a <_exit+0x12>

0800179c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e00a      	b.n	80017c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ae:	f3af 8000 	nop.w
 80017b2:	4601      	mov	r1, r0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60ba      	str	r2, [r7, #8]
 80017ba:	b2ca      	uxtb	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf0      	blt.n	80017ae <_read+0x12>
	}

return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e009      	b.n	80017fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf1      	blt.n	80017e8 <_write+0x12>
	}
	return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_close>:

int _close(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001836:	605a      	str	r2, [r3, #4]
	return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_isatty>:

int _isatty(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	return 1;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
	return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f002 ffc4 	bl	8004834 <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20018000 	.word	0x20018000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	20000204 	.word	0x20000204
 80018e0:	200003c0 	.word	0x200003c0

080018e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001940 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800190e:	490e      	ldr	r1, [pc, #56]	; (8001948 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001924:	4c0b      	ldr	r4, [pc, #44]	; (8001954 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001932:	f7ff ffd7 	bl	80018e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001936:	f002 ff83 	bl	8004840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193a:	f7ff fab9 	bl	8000eb0 <main>
  bx  lr    
 800193e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001940:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800194c:	08007a0c 	.word	0x08007a0c
  ldr r2, =_sbss
 8001950:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001954:	200003bc 	.word	0x200003bc

08001958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC_IRQHandler>
	...

0800195c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_Init+0x40>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_Init+0x40>)
 8001972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_Init+0x40>)
 800197e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 f92b 	bl	8001be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fd36 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f943 	bl	8001c4a <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f000 f90b 	bl	8001bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000004 	.word	0x20000004
 80019f8:	2000000c 	.word	0x2000000c
 80019fc:	20000008 	.word	0x20000008

08001a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	2000000c 	.word	0x2000000c
 8001a24:	200003a8 	.word	0x200003a8

08001a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200003a8 	.word	0x200003a8

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db0b      	blt.n	8001ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	4907      	ldr	r1, [pc, #28]	; (8001adc <__NVIC_EnableIRQ+0x38>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	; (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	; (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	4313      	orrs	r3, r2
         );
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	; 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bac:	d301      	bcc.n	8001bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00f      	b.n	8001bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <SysTick_Config+0x40>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bba:	210f      	movs	r1, #15
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f7ff ff8e 	bl	8001ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <SysTick_Config+0x40>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <SysTick_Config+0x40>)
 8001bcc:	2207      	movs	r2, #7
 8001bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	e000e010 	.word	0xe000e010

08001be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff29 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c08:	f7ff ff3e 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7ff ff8e 	bl	8001b34 <NVIC_EncodePriority>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff5d 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff31 	bl	8001aa4 <__NVIC_EnableIRQ>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffa2 	bl	8001b9c <SysTick_Config>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff feda 	bl	8001a28 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e099      	b.n	8001db4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca0:	e00f      	b.n	8001cc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ca2:	f7ff fec1 	bl	8001a28 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d908      	bls.n	8001cc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e078      	b.n	8001db4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1e8      	bne.n	8001ca2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <HAL_DMA_Init+0x158>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d107      	bne.n	8001d2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	4313      	orrs	r3, r2
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f023 0307 	bic.w	r3, r3, #7
 8001d42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d117      	bne.n	8001d86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00e      	beq.n	8001d86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 faab 	bl	80022c4 <DMA_CheckFifoParam>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2240      	movs	r2, #64	; 0x40
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d82:	2301      	movs	r3, #1
 8001d84:	e016      	b.n	8001db4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fa62 	bl	8002258 <DMA_CalcBaseAndBitshift>
 8001d94:	4603      	mov	r3, r0
 8001d96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	223f      	movs	r2, #63	; 0x3f
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	f010803f 	.word	0xf010803f

08001dc0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_DMA_Start+0x20>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e026      	b.n	8001e2e <HAL_DMA_Start+0x6e>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d115      	bne.n	8001e20 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	68b9      	ldr	r1, [r7, #8]
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f9f7 	bl	80021fc <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e005      	b.n	8001e2c <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_DMA_Start_IT+0x26>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e040      	b.n	8001ede <HAL_DMA_Start_IT+0xa8>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d12f      	bne.n	8001ed0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f9b9 	bl	80021fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	223f      	movs	r2, #63	; 0x3f
 8001e90:	409a      	lsls	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0216 	orr.w	r2, r2, #22
 8001ea4:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0208 	orr.w	r2, r2, #8
 8001ebc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0201 	orr.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e005      	b.n	8001edc <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef4:	4b92      	ldr	r3, [pc, #584]	; (8002140 <HAL_DMA_IRQHandler+0x258>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a92      	ldr	r2, [pc, #584]	; (8002144 <HAL_DMA_IRQHandler+0x25c>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0a9b      	lsrs	r3, r3, #10
 8001f00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2208      	movs	r2, #8
 8001f14:	409a      	lsls	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d01a      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0204 	bic.w	r2, r2, #4
 8001f3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	2208      	movs	r2, #8
 8001f42:	409a      	lsls	r2, r3
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	2201      	movs	r2, #1
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d012      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	2201      	movs	r2, #1
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	2204      	movs	r2, #4
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d012      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	2204      	movs	r2, #4
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f043 0204 	orr.w	r2, r3, #4
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d043      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d03c      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d018      	beq.n	800202a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d108      	bne.n	8002018 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d024      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
 8002016:	e01f      	b.n	8002058 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	e016      	b.n	8002058 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0208 	bic.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2220      	movs	r2, #32
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 808e 	beq.w	8002186 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8086 	beq.w	8002186 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	2220      	movs	r2, #32
 8002080:	409a      	lsls	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b05      	cmp	r3, #5
 8002090:	d136      	bne.n	8002100 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0216 	bic.w	r2, r2, #22
 80020a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_DMA_IRQHandler+0x1da>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0208 	bic.w	r2, r2, #8
 80020d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	223f      	movs	r2, #63	; 0x3f
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d07d      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
        }
        return;
 80020fe:	e078      	b.n	80021f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01c      	beq.n	8002148 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d108      	bne.n	800212e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	2b00      	cmp	r3, #0
 8002122:	d030      	beq.n	8002186 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e02b      	b.n	8002186 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002132:	2b00      	cmp	r3, #0
 8002134:	d027      	beq.n	8002186 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
 800213e:	e022      	b.n	8002186 <HAL_DMA_IRQHandler+0x29e>
 8002140:	20000004 	.word	0x20000004
 8002144:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10f      	bne.n	8002176 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0210 	bic.w	r2, r2, #16
 8002164:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	2b00      	cmp	r3, #0
 800218c:	d032      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d022      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2205      	movs	r2, #5
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3301      	adds	r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d307      	bcc.n	80021ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f2      	bne.n	80021b2 <HAL_DMA_IRQHandler+0x2ca>
 80021cc:	e000      	b.n	80021d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e000      	b.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021f2:	bf00      	nop
    }
  }
}
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop

080021fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002218:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b40      	cmp	r3, #64	; 0x40
 8002228:	d108      	bne.n	800223c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800223a:	e007      	b.n	800224c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3b10      	subs	r3, #16
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <DMA_CalcBaseAndBitshift+0x64>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002272:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d909      	bls.n	800229a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	1d1a      	adds	r2, r3, #4
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	659a      	str	r2, [r3, #88]	; 0x58
 8002298:	e007      	b.n	80022aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	aaaaaaab 	.word	0xaaaaaaab
 80022c0:	08007610 	.word	0x08007610

080022c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d11f      	bne.n	800231e <DMA_CheckFifoParam+0x5a>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d856      	bhi.n	8002392 <DMA_CheckFifoParam+0xce>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <DMA_CheckFifoParam+0x28>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	0800230f 	.word	0x0800230f
 80022f4:	080022fd 	.word	0x080022fd
 80022f8:	08002393 	.word	0x08002393
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d046      	beq.n	8002396 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230c:	e043      	b.n	8002396 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002316:	d140      	bne.n	800239a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800231c:	e03d      	b.n	800239a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002326:	d121      	bne.n	800236c <DMA_CheckFifoParam+0xa8>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d837      	bhi.n	800239e <DMA_CheckFifoParam+0xda>
 800232e:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <DMA_CheckFifoParam+0x70>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002345 	.word	0x08002345
 8002338:	0800234b 	.word	0x0800234b
 800233c:	08002345 	.word	0x08002345
 8002340:	0800235d 	.word	0x0800235d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      break;
 8002348:	e030      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d025      	beq.n	80023a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235a:	e022      	b.n	80023a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002364:	d11f      	bne.n	80023a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800236a:	e01c      	b.n	80023a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d903      	bls.n	800237a <DMA_CheckFifoParam+0xb6>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d003      	beq.n	8002380 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002378:	e018      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
      break;
 800237e:	e015      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e00b      	b.n	80023aa <DMA_CheckFifoParam+0xe6>
      break;
 8002392:	bf00      	nop
 8002394:	e00a      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e008      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e006      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e004      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 80023a2:	bf00      	nop
 80023a4:	e002      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;   
 80023a6:	bf00      	nop
 80023a8:	e000      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 80023aa:	bf00      	nop
    }
  } 
  
  return status; 
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e159      	b.n	800268c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f040 8148 	bne.w	8002686 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d005      	beq.n	800240e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	2b02      	cmp	r3, #2
 800240c:	d130      	bne.n	8002470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 0201 	and.w	r2, r3, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b03      	cmp	r3, #3
 800247a:	d017      	beq.n	80024ac <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d123      	bne.n	8002500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	08da      	lsrs	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3208      	adds	r2, #8
 80024c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	08da      	lsrs	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3208      	adds	r2, #8
 80024fa:	69b9      	ldr	r1, [r7, #24]
 80024fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0203 	and.w	r2, r3, #3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a2 	beq.w	8002686 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <HAL_GPIO_Init+0x2e8>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a56      	ldr	r2, [pc, #344]	; (80026a4 <HAL_GPIO_Init+0x2e8>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b54      	ldr	r3, [pc, #336]	; (80026a4 <HAL_GPIO_Init+0x2e8>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255e:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <HAL_GPIO_Init+0x2ec>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a49      	ldr	r2, [pc, #292]	; (80026ac <HAL_GPIO_Init+0x2f0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d019      	beq.n	80025be <HAL_GPIO_Init+0x202>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a48      	ldr	r2, [pc, #288]	; (80026b0 <HAL_GPIO_Init+0x2f4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x1fe>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a47      	ldr	r2, [pc, #284]	; (80026b4 <HAL_GPIO_Init+0x2f8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x1fa>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a46      	ldr	r2, [pc, #280]	; (80026b8 <HAL_GPIO_Init+0x2fc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x1f6>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a45      	ldr	r2, [pc, #276]	; (80026bc <HAL_GPIO_Init+0x300>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x1f2>
 80025aa:	2304      	movs	r3, #4
 80025ac:	e008      	b.n	80025c0 <HAL_GPIO_Init+0x204>
 80025ae:	2307      	movs	r3, #7
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x204>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_Init+0x204>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_Init+0x204>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_GPIO_Init+0x204>
 80025be:	2300      	movs	r3, #0
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f002 0203 	and.w	r2, r2, #3
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	4093      	lsls	r3, r2
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d0:	4935      	ldr	r1, [pc, #212]	; (80026a8 <HAL_GPIO_Init+0x2ec>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025de:	4b38      	ldr	r3, [pc, #224]	; (80026c0 <HAL_GPIO_Init+0x304>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002602:	4a2f      	ldr	r2, [pc, #188]	; (80026c0 <HAL_GPIO_Init+0x304>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002608:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_GPIO_Init+0x304>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262c:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <HAL_GPIO_Init+0x304>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <HAL_GPIO_Init+0x304>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a1a      	ldr	r2, [pc, #104]	; (80026c0 <HAL_GPIO_Init+0x304>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_GPIO_Init+0x304>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a0f      	ldr	r2, [pc, #60]	; (80026c0 <HAL_GPIO_Init+0x304>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	f67f aea2 	bls.w	80023d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40013800 	.word	0x40013800
 80026ac:	40020000 	.word	0x40020000
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40013c00 	.word	0x40013c00

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e0:	e003      	b.n	80026ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	041a      	lsls	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	619a      	str	r2, [r3, #24]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e264      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d075      	beq.n	8002802 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002716:	4ba3      	ldr	r3, [pc, #652]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b04      	cmp	r3, #4
 8002720:	d00c      	beq.n	800273c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002722:	4ba0      	ldr	r3, [pc, #640]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800272a:	2b08      	cmp	r3, #8
 800272c:	d112      	bne.n	8002754 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272e:	4b9d      	ldr	r3, [pc, #628]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800273a:	d10b      	bne.n	8002754 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	4b99      	ldr	r3, [pc, #612]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d05b      	beq.n	8002800 <HAL_RCC_OscConfig+0x108>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d157      	bne.n	8002800 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e23f      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275c:	d106      	bne.n	800276c <HAL_RCC_OscConfig+0x74>
 800275e:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a90      	ldr	r2, [pc, #576]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e01d      	b.n	80027a8 <HAL_RCC_OscConfig+0xb0>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x98>
 8002776:	4b8b      	ldr	r3, [pc, #556]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a8a      	ldr	r2, [pc, #552]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b88      	ldr	r3, [pc, #544]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a87      	ldr	r2, [pc, #540]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0xb0>
 8002790:	4b84      	ldr	r3, [pc, #528]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a83      	ldr	r2, [pc, #524]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a80      	ldr	r2, [pc, #512]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff f93a 	bl	8001a28 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b8:	f7ff f936 	bl	8001a28 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e204      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0xc0>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff f926 	bl	8001a28 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff f922 	bl	8001a28 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1f0      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	4b6c      	ldr	r3, [pc, #432]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0xe8>
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d063      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800280e:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281a:	4b62      	ldr	r3, [pc, #392]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002822:	2b08      	cmp	r3, #8
 8002824:	d11c      	bne.n	8002860 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002826:	4b5f      	ldr	r3, [pc, #380]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d116      	bne.n	8002860 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_RCC_OscConfig+0x152>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e1c4      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284a:	4b56      	ldr	r3, [pc, #344]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4952      	ldr	r1, [pc, #328]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	e03a      	b.n	80028d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002868:	4b4f      	ldr	r3, [pc, #316]	; (80029a8 <HAL_RCC_OscConfig+0x2b0>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7ff f8db 	bl	8001a28 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002876:	f7ff f8d7 	bl	8001a28 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1a5      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4940      	ldr	r1, [pc, #256]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
 80028a8:	e015      	b.n	80028d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCC_OscConfig+0x2b0>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7ff f8ba 	bl	8001a28 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b8:	f7ff f8b6 	bl	8001a28 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e184      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d030      	beq.n	8002944 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ea:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_RCC_OscConfig+0x2b4>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7ff f89a 	bl	8001a28 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f8:	f7ff f896 	bl	8001a28 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e164      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x200>
 8002916:	e015      	b.n	8002944 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_RCC_OscConfig+0x2b4>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7ff f883 	bl	8001a28 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002926:	f7ff f87f 	bl	8001a28 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e14d      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80a0 	beq.w	8002a92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10f      	bne.n	8002982 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
 8002972:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297e:	2301      	movs	r3, #1
 8002980:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_OscConfig+0x2b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d121      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_RCC_OscConfig+0x2b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_RCC_OscConfig+0x2b8>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299a:	f7ff f845 	bl	8001a28 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a0:	e011      	b.n	80029c6 <HAL_RCC_OscConfig+0x2ce>
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	42470000 	.word	0x42470000
 80029ac:	42470e80 	.word	0x42470e80
 80029b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b4:	f7ff f838 	bl	8001a28 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e106      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b85      	ldr	r3, [pc, #532]	; (8002bdc <HAL_RCC_OscConfig+0x4e4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2f0>
 80029da:	4b81      	ldr	r3, [pc, #516]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a80      	ldr	r2, [pc, #512]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	e01c      	b.n	8002a22 <HAL_RCC_OscConfig+0x32a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d10c      	bne.n	8002a0a <HAL_RCC_OscConfig+0x312>
 80029f0:	4b7b      	ldr	r3, [pc, #492]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4a7a      	ldr	r2, [pc, #488]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	6713      	str	r3, [r2, #112]	; 0x70
 80029fc:	4b78      	ldr	r3, [pc, #480]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a77      	ldr	r2, [pc, #476]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70
 8002a08:	e00b      	b.n	8002a22 <HAL_RCC_OscConfig+0x32a>
 8002a0a:	4b75      	ldr	r3, [pc, #468]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a74      	ldr	r2, [pc, #464]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
 8002a16:	4b72      	ldr	r3, [pc, #456]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a71      	ldr	r2, [pc, #452]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002a1c:	f023 0304 	bic.w	r3, r3, #4
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d015      	beq.n	8002a56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fffd 	bl	8001a28 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe fff9 	bl	8001a28 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e0c5      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ee      	beq.n	8002a32 <HAL_RCC_OscConfig+0x33a>
 8002a54:	e014      	b.n	8002a80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fe ffe7 	bl	8001a28 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe ffe3 	bl	8001a28 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0af      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a74:	4b5a      	ldr	r3, [pc, #360]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ee      	bne.n	8002a5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d105      	bne.n	8002a92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a86:	4b56      	ldr	r3, [pc, #344]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	4a55      	ldr	r2, [pc, #340]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 809b 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a9c:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d05c      	beq.n	8002b62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d141      	bne.n	8002b34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab0:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <HAL_RCC_OscConfig+0x4ec>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe ffb7 	bl	8001a28 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fe ffb3 	bl	8001a28 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e081      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad0:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f0      	bne.n	8002abe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	019b      	lsls	r3, r3, #6
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	3b01      	subs	r3, #1
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	061b      	lsls	r3, r3, #24
 8002b00:	4937      	ldr	r1, [pc, #220]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCC_OscConfig+0x4ec>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe ff8c 	bl	8001a28 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe ff88 	bl	8001a28 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e056      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b26:	4b2e      	ldr	r3, [pc, #184]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x41c>
 8002b32:	e04e      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b34:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_RCC_OscConfig+0x4ec>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7fe ff75 	bl	8001a28 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fe ff71 	bl	8001a28 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e03f      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f0      	bne.n	8002b42 <HAL_RCC_OscConfig+0x44a>
 8002b60:	e037      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e032      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <HAL_RCC_OscConfig+0x4e8>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d028      	beq.n	8002bce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d121      	bne.n	8002bce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d11a      	bne.n	8002bce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ba4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d111      	bne.n	8002bce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	40023800 	.word	0x40023800
 8002be4:	42470060 	.word	0x42470060

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0cc      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d90c      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b63      	ldr	r3, [pc, #396]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0b8      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c3c:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a58      	ldr	r2, [pc, #352]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c54:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c60:	4b50      	ldr	r3, [pc, #320]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	494d      	ldr	r1, [pc, #308]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d044      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d119      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e07f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e06f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e067      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4934      	ldr	r1, [pc, #208]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd8:	f7fe fea6 	bl	8001a28 <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7fe fea2 	bl	8001a28 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e04f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d08:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d20c      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e032      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4916      	ldr	r1, [pc, #88]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	490e      	ldr	r1, [pc, #56]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d6e:	f000 f889 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002d72:	4602      	mov	r2, r0
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	490a      	ldr	r1, [pc, #40]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	5ccb      	ldrb	r3, [r1, r3]
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fe06 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023c00 	.word	0x40023c00
 8002da4:	40023800 	.word	0x40023800
 8002da8:	080075f8 	.word	0x080075f8
 8002dac:	20000004 	.word	0x20000004
 8002db0:	20000008 	.word	0x20000008

08002db4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	; 0x30
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d129      	bne.n	8002e1a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	4b2b      	ldr	r3, [pc, #172]	; (8002e78 <HAL_RCC_MCOConfig+0xc4>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <HAL_RCC_MCOConfig+0xc4>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b28      	ldr	r3, [pc, #160]	; (8002e78 <HAL_RCC_MCOConfig+0xc4>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002df8:	f107 031c 	add.w	r3, r7, #28
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	481f      	ldr	r0, [pc, #124]	; (8002e7c <HAL_RCC_MCOConfig+0xc8>)
 8002e00:	f7ff fadc 	bl	80023bc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002e04:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <HAL_RCC_MCOConfig+0xc4>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	4919      	ldr	r1, [pc, #100]	; (8002e78 <HAL_RCC_MCOConfig+0xc4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002e18:	e029      	b.n	8002e6e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <HAL_RCC_MCOConfig+0xc4>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <HAL_RCC_MCOConfig+0xc4>)
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <HAL_RCC_MCOConfig+0xc4>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	4619      	mov	r1, r3
 8002e52:	480b      	ldr	r0, [pc, #44]	; (8002e80 <HAL_RCC_MCOConfig+0xcc>)
 8002e54:	f7ff fab2 	bl	80023bc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002e58:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_RCC_MCOConfig+0xc4>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	00d9      	lsls	r1, r3, #3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	430b      	orrs	r3, r1
 8002e68:	4903      	ldr	r1, [pc, #12]	; (8002e78 <HAL_RCC_MCOConfig+0xc4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
}
 8002e6e:	bf00      	nop
 8002e70:	3730      	adds	r7, #48	; 0x30
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40020800 	.word	0x40020800

08002e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e84:	b5b0      	push	{r4, r5, r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	6079      	str	r1, [r7, #4]
 8002e8e:	2100      	movs	r1, #0
 8002e90:	60f9      	str	r1, [r7, #12]
 8002e92:	2100      	movs	r1, #0
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e96:	2100      	movs	r1, #0
 8002e98:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e9a:	4952      	ldr	r1, [pc, #328]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e9c:	6889      	ldr	r1, [r1, #8]
 8002e9e:	f001 010c 	and.w	r1, r1, #12
 8002ea2:	2908      	cmp	r1, #8
 8002ea4:	d00d      	beq.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002ea6:	2908      	cmp	r1, #8
 8002ea8:	f200 8094 	bhi.w	8002fd4 <HAL_RCC_GetSysClockFreq+0x150>
 8002eac:	2900      	cmp	r1, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x32>
 8002eb0:	2904      	cmp	r1, #4
 8002eb2:	d003      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x38>
 8002eb4:	e08e      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eb6:	4b4c      	ldr	r3, [pc, #304]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002eb8:	60bb      	str	r3, [r7, #8]
       break;
 8002eba:	e08e      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ebc:	4b4b      	ldr	r3, [pc, #300]	; (8002fec <HAL_RCC_GetSysClockFreq+0x168>)
 8002ebe:	60bb      	str	r3, [r7, #8]
      break;
 8002ec0:	e08b      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec2:	4948      	ldr	r1, [pc, #288]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ec4:	6849      	ldr	r1, [r1, #4]
 8002ec6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002eca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ecc:	4945      	ldr	r1, [pc, #276]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ece:	6849      	ldr	r1, [r1, #4]
 8002ed0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ed4:	2900      	cmp	r1, #0
 8002ed6:	d024      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed8:	4942      	ldr	r1, [pc, #264]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002eda:	6849      	ldr	r1, [r1, #4]
 8002edc:	0989      	lsrs	r1, r1, #6
 8002ede:	4608      	mov	r0, r1
 8002ee0:	f04f 0100 	mov.w	r1, #0
 8002ee4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002ee8:	f04f 0500 	mov.w	r5, #0
 8002eec:	ea00 0204 	and.w	r2, r0, r4
 8002ef0:	ea01 0305 	and.w	r3, r1, r5
 8002ef4:	493d      	ldr	r1, [pc, #244]	; (8002fec <HAL_RCC_GetSysClockFreq+0x168>)
 8002ef6:	fb01 f003 	mul.w	r0, r1, r3
 8002efa:	2100      	movs	r1, #0
 8002efc:	fb01 f102 	mul.w	r1, r1, r2
 8002f00:	1844      	adds	r4, r0, r1
 8002f02:	493a      	ldr	r1, [pc, #232]	; (8002fec <HAL_RCC_GetSysClockFreq+0x168>)
 8002f04:	fba2 0101 	umull	r0, r1, r2, r1
 8002f08:	1863      	adds	r3, r4, r1
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	f7fd fe50 	bl	8000bb8 <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	e04a      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f22:	4b30      	ldr	r3, [pc, #192]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	099b      	lsrs	r3, r3, #6
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	ea02 0400 	and.w	r4, r2, r0
 8002f3a:	ea03 0501 	and.w	r5, r3, r1
 8002f3e:	4620      	mov	r0, r4
 8002f40:	4629      	mov	r1, r5
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	014b      	lsls	r3, r1, #5
 8002f4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f50:	0142      	lsls	r2, r0, #5
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	1b00      	subs	r0, r0, r4
 8002f58:	eb61 0105 	sbc.w	r1, r1, r5
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	018b      	lsls	r3, r1, #6
 8002f66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f6a:	0182      	lsls	r2, r0, #6
 8002f6c:	1a12      	subs	r2, r2, r0
 8002f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f72:	f04f 0000 	mov.w	r0, #0
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	00d9      	lsls	r1, r3, #3
 8002f7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f80:	00d0      	lsls	r0, r2, #3
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	1912      	adds	r2, r2, r4
 8002f88:	eb45 0303 	adc.w	r3, r5, r3
 8002f8c:	f04f 0000 	mov.w	r0, #0
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	0299      	lsls	r1, r3, #10
 8002f96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f9a:	0290      	lsls	r0, r2, #10
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	f7fd fe04 	bl	8000bb8 <__aeabi_uldivmod>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	60bb      	str	r3, [r7, #8]
      break;
 8002fd2:	e002      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002fd6:	60bb      	str	r3, [r7, #8]
      break;
 8002fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fda:	68bb      	ldr	r3, [r7, #8]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	00f42400 	.word	0x00f42400
 8002fec:	017d7840 	.word	0x017d7840

08002ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000004 	.word	0x20000004

08003008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800300c:	f7ff fff0 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	0a9b      	lsrs	r3, r3, #10
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4903      	ldr	r1, [pc, #12]	; (800302c <HAL_RCC_GetPCLK1Freq+0x24>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	08007608 	.word	0x08007608

08003030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003034:	f7ff ffdc 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8003038:	4602      	mov	r2, r0
 800303a:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	0b5b      	lsrs	r3, r3, #13
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	4903      	ldr	r1, [pc, #12]	; (8003054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003046:	5ccb      	ldrb	r3, [r1, r3]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	08007608 	.word	0x08007608

08003058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e041      	b.n	80030ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe f9e6 	bl	8001450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f000 fdfa 	bl	8003c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d001      	beq.n	8003110 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e03c      	b.n	800318a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <HAL_TIM_Base_Start+0xa0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d018      	beq.n	8003154 <HAL_TIM_Base_Start+0x5c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312a:	d013      	beq.n	8003154 <HAL_TIM_Base_Start+0x5c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1a      	ldr	r2, [pc, #104]	; (800319c <HAL_TIM_Base_Start+0xa4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00e      	beq.n	8003154 <HAL_TIM_Base_Start+0x5c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <HAL_TIM_Base_Start+0xa8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d009      	beq.n	8003154 <HAL_TIM_Base_Start+0x5c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <HAL_TIM_Base_Start+0xac>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d004      	beq.n	8003154 <HAL_TIM_Base_Start+0x5c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <HAL_TIM_Base_Start+0xb0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b06      	cmp	r3, #6
 8003164:	d010      	beq.n	8003188 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	e007      	b.n	8003188 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40010000 	.word	0x40010000
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40000c00 	.word	0x40000c00
 80031a8:	40014000 	.word	0x40014000

080031ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e041      	b.n	8003242 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f839 	bl	800324a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 fd50 	bl	8003c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <HAL_TIM_IC_Start_DMA+0x1e>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800327a:	b2db      	uxtb	r3, r3
 800327c:	e013      	b.n	80032a6 <HAL_TIM_IC_Start_DMA+0x46>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d104      	bne.n	800328e <HAL_TIM_IC_Start_DMA+0x2e>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800328a:	b2db      	uxtb	r3, r3
 800328c:	e00b      	b.n	80032a6 <HAL_TIM_IC_Start_DMA+0x46>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d104      	bne.n	800329e <HAL_TIM_IC_Start_DMA+0x3e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800329a:	b2db      	uxtb	r3, r3
 800329c:	e003      	b.n	80032a6 <HAL_TIM_IC_Start_DMA+0x46>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <HAL_TIM_IC_Start_DMA+0x58>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e013      	b.n	80032e0 <HAL_TIM_IC_Start_DMA+0x80>
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d104      	bne.n	80032c8 <HAL_TIM_IC_Start_DMA+0x68>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e00b      	b.n	80032e0 <HAL_TIM_IC_Start_DMA+0x80>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d104      	bne.n	80032d8 <HAL_TIM_IC_Start_DMA+0x78>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e003      	b.n	80032e0 <HAL_TIM_IC_Start_DMA+0x80>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d002      	beq.n	80032ee <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80032e8:	7dbb      	ldrb	r3, [r7, #22]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
 80032f0:	e13b      	b.n	800356a <HAL_TIM_IC_Start_DMA+0x30a>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d143      	bne.n	8003380 <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80032f8:	7dbb      	ldrb	r3, [r7, #22]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d140      	bne.n	8003380 <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <HAL_TIM_IC_Start_DMA+0xae>
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e12d      	b.n	800356a <HAL_TIM_IC_Start_DMA+0x30a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d104      	bne.n	800331e <HAL_TIM_IC_Start_DMA+0xbe>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800331c:	e013      	b.n	8003346 <HAL_TIM_IC_Start_DMA+0xe6>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d104      	bne.n	800332e <HAL_TIM_IC_Start_DMA+0xce>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800332c:	e00b      	b.n	8003346 <HAL_TIM_IC_Start_DMA+0xe6>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d104      	bne.n	800333e <HAL_TIM_IC_Start_DMA+0xde>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800333c:	e003      	b.n	8003346 <HAL_TIM_IC_Start_DMA+0xe6>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d104      	bne.n	8003356 <HAL_TIM_IC_Start_DMA+0xf6>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8003354:	e016      	b.n	8003384 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b04      	cmp	r3, #4
 800335a:	d104      	bne.n	8003366 <HAL_TIM_IC_Start_DMA+0x106>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8003364:	e00e      	b.n	8003384 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d104      	bne.n	8003376 <HAL_TIM_IC_Start_DMA+0x116>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8003374:	e006      	b.n	8003384 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2202      	movs	r2, #2
 800337a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800337e:	e001      	b.n	8003384 <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0f2      	b.n	800356a <HAL_TIM_IC_Start_DMA+0x30a>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	f200 80ae 	bhi.w	80034e8 <HAL_TIM_IC_Start_DMA+0x288>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <HAL_TIM_IC_Start_DMA+0x134>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033c9 	.word	0x080033c9
 8003398:	080034e9 	.word	0x080034e9
 800339c:	080034e9 	.word	0x080034e9
 80033a0:	080034e9 	.word	0x080034e9
 80033a4:	08003411 	.word	0x08003411
 80033a8:	080034e9 	.word	0x080034e9
 80033ac:	080034e9 	.word	0x080034e9
 80033b0:	080034e9 	.word	0x080034e9
 80033b4:	08003459 	.word	0x08003459
 80033b8:	080034e9 	.word	0x080034e9
 80033bc:	080034e9 	.word	0x080034e9
 80033c0:	080034e9 	.word	0x080034e9
 80033c4:	080034a1 	.word	0x080034a1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	4a69      	ldr	r2, [pc, #420]	; (8003574 <HAL_TIM_IC_Start_DMA+0x314>)
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	4a68      	ldr	r2, [pc, #416]	; (8003578 <HAL_TIM_IC_Start_DMA+0x318>)
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	4a67      	ldr	r2, [pc, #412]	; (800357c <HAL_TIM_IC_Start_DMA+0x31c>)
 80033de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3334      	adds	r3, #52	; 0x34
 80033ea:	4619      	mov	r1, r3
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	887b      	ldrh	r3, [r7, #2]
 80033f0:	f7fe fd21 	bl	8001e36 <HAL_DMA_Start_IT>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_TIM_IC_Start_DMA+0x19e>
      {
        /* Return error status */
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0b5      	b.n	800356a <HAL_TIM_IC_Start_DMA+0x30a>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340c:	60da      	str	r2, [r3, #12]
      break;
 800340e:	e06c      	b.n	80034ea <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	4a57      	ldr	r2, [pc, #348]	; (8003574 <HAL_TIM_IC_Start_DMA+0x314>)
 8003416:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	4a56      	ldr	r2, [pc, #344]	; (8003578 <HAL_TIM_IC_Start_DMA+0x318>)
 800341e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	4a55      	ldr	r2, [pc, #340]	; (800357c <HAL_TIM_IC_Start_DMA+0x31c>)
 8003426:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3338      	adds	r3, #56	; 0x38
 8003432:	4619      	mov	r1, r3
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	887b      	ldrh	r3, [r7, #2]
 8003438:	f7fe fcfd 	bl	8001e36 <HAL_DMA_Start_IT>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_TIM_IC_Start_DMA+0x1e6>
      {
        /* Return error status */
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e091      	b.n	800356a <HAL_TIM_IC_Start_DMA+0x30a>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003454:	60da      	str	r2, [r3, #12]
      break;
 8003456:	e048      	b.n	80034ea <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	4a45      	ldr	r2, [pc, #276]	; (8003574 <HAL_TIM_IC_Start_DMA+0x314>)
 800345e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	4a44      	ldr	r2, [pc, #272]	; (8003578 <HAL_TIM_IC_Start_DMA+0x318>)
 8003466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	4a43      	ldr	r2, [pc, #268]	; (800357c <HAL_TIM_IC_Start_DMA+0x31c>)
 800346e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	333c      	adds	r3, #60	; 0x3c
 800347a:	4619      	mov	r1, r3
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	f7fe fcd9 	bl	8001e36 <HAL_DMA_Start_IT>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_TIM_IC_Start_DMA+0x22e>
      {
        /* Return error status */
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06d      	b.n	800356a <HAL_TIM_IC_Start_DMA+0x30a>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800349c:	60da      	str	r2, [r3, #12]
      break;
 800349e:	e024      	b.n	80034ea <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	4a33      	ldr	r2, [pc, #204]	; (8003574 <HAL_TIM_IC_Start_DMA+0x314>)
 80034a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	4a32      	ldr	r2, [pc, #200]	; (8003578 <HAL_TIM_IC_Start_DMA+0x318>)
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	4a31      	ldr	r2, [pc, #196]	; (800357c <HAL_TIM_IC_Start_DMA+0x31c>)
 80034b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3340      	adds	r3, #64	; 0x40
 80034c2:	4619      	mov	r1, r3
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	f7fe fcb5 	bl	8001e36 <HAL_DMA_Start_IT>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_TIM_IC_Start_DMA+0x276>
      {
        /* Return error status */
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e049      	b.n	800356a <HAL_TIM_IC_Start_DMA+0x30a>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034e4:	60da      	str	r2, [r3, #12]
      break;
 80034e6:	e000      	b.n	80034ea <HAL_TIM_IC_Start_DMA+0x28a>
    }

    default:
      break;
 80034e8:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2201      	movs	r2, #1
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fe04 	bl	8004100 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a20      	ldr	r2, [pc, #128]	; (8003580 <HAL_TIM_IC_Start_DMA+0x320>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d018      	beq.n	8003534 <HAL_TIM_IC_Start_DMA+0x2d4>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350a:	d013      	beq.n	8003534 <HAL_TIM_IC_Start_DMA+0x2d4>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <HAL_TIM_IC_Start_DMA+0x324>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_TIM_IC_Start_DMA+0x2d4>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_TIM_IC_Start_DMA+0x328>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_TIM_IC_Start_DMA+0x2d4>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a19      	ldr	r2, [pc, #100]	; (800358c <HAL_TIM_IC_Start_DMA+0x32c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_IC_Start_DMA+0x2d4>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_TIM_IC_Start_DMA+0x330>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_TIM_IC_Start_DMA+0x2f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b06      	cmp	r3, #6
 8003544:	d010      	beq.n	8003568 <HAL_TIM_IC_Start_DMA+0x308>
    {
      __HAL_TIM_ENABLE(htim);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003556:	e007      	b.n	8003568 <HAL_TIM_IC_Start_DMA+0x308>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	08003b5f 	.word	0x08003b5f
 8003578:	08003c27 	.word	0x08003c27
 800357c:	08003acd 	.word	0x08003acd
 8003580:	40010000 	.word	0x40010000
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40014000 	.word	0x40014000

08003594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d122      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d11b      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0202 	mvn.w	r2, #2
 80035c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fef8 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fa42 	bl	8003a68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fa53 	bl	8003a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d122      	bne.n	8003644 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b04      	cmp	r3, #4
 800360a:	d11b      	bne.n	8003644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0204 	mvn.w	r2, #4
 8003614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fece 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fa18 	bl	8003a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fa29 	bl	8003a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b08      	cmp	r3, #8
 8003650:	d122      	bne.n	8003698 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b08      	cmp	r3, #8
 800365e:	d11b      	bne.n	8003698 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0208 	mvn.w	r2, #8
 8003668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2204      	movs	r2, #4
 800366e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd fea4 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f9ee 	bl	8003a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f9ff 	bl	8003a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d122      	bne.n	80036ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d11b      	bne.n	80036ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0210 	mvn.w	r2, #16
 80036bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2208      	movs	r2, #8
 80036c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd fe7a 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f9c4 	bl	8003a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f9d5 	bl	8003a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10e      	bne.n	8003718 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d107      	bne.n	8003718 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0201 	mvn.w	r2, #1
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f99e 	bl	8003a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b80      	cmp	r3, #128	; 0x80
 8003724:	d10e      	bne.n	8003744 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d107      	bne.n	8003744 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800373c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fd7c 	bl	800423c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d10e      	bne.n	8003770 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d107      	bne.n	8003770 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f99a 	bl	8003aa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d10e      	bne.n	800379c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b20      	cmp	r3, #32
 800378a:	d107      	bne.n	800379c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0220 	mvn.w	r2, #32
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fd46 	bl	8004228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_TIM_IC_ConfigChannel+0x1a>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e082      	b.n	80038c4 <HAL_TIM_IC_ConfigChannel+0x120>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d11b      	bne.n	8003804 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f000 fad8 	bl	8003d90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 020c 	bic.w	r2, r2, #12
 80037ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6999      	ldr	r1, [r3, #24]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	619a      	str	r2, [r3, #24]
 8003802:	e05a      	b.n	80038ba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b04      	cmp	r3, #4
 8003808:	d11c      	bne.n	8003844 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f000 fb50 	bl	8003ebe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800382c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6999      	ldr	r1, [r3, #24]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	021a      	lsls	r2, r3, #8
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	619a      	str	r2, [r3, #24]
 8003842:	e03a      	b.n	80038ba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b08      	cmp	r3, #8
 8003848:	d11b      	bne.n	8003882 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f000 fb9d 	bl	8003f98 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 020c 	bic.w	r2, r2, #12
 800386c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69d9      	ldr	r1, [r3, #28]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	61da      	str	r2, [r3, #28]
 8003880:	e01b      	b.n	80038ba <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f000 fbbd 	bl	8004010 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80038a4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69d9      	ldr	r1, [r3, #28]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	021a      	lsls	r2, r3, #8
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_TIM_ConfigClockSource+0x18>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e0b3      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x180>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003902:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800390a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391c:	d03e      	beq.n	800399c <HAL_TIM_ConfigClockSource+0xd0>
 800391e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003922:	f200 8087 	bhi.w	8003a34 <HAL_TIM_ConfigClockSource+0x168>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	f000 8085 	beq.w	8003a38 <HAL_TIM_ConfigClockSource+0x16c>
 800392e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003932:	d87f      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x168>
 8003934:	2b70      	cmp	r3, #112	; 0x70
 8003936:	d01a      	beq.n	800396e <HAL_TIM_ConfigClockSource+0xa2>
 8003938:	2b70      	cmp	r3, #112	; 0x70
 800393a:	d87b      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x168>
 800393c:	2b60      	cmp	r3, #96	; 0x60
 800393e:	d050      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x116>
 8003940:	2b60      	cmp	r3, #96	; 0x60
 8003942:	d877      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x168>
 8003944:	2b50      	cmp	r3, #80	; 0x50
 8003946:	d03c      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0xf6>
 8003948:	2b50      	cmp	r3, #80	; 0x50
 800394a:	d873      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x168>
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d058      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x136>
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d86f      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x168>
 8003954:	2b30      	cmp	r3, #48	; 0x30
 8003956:	d064      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x156>
 8003958:	2b30      	cmp	r3, #48	; 0x30
 800395a:	d86b      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x168>
 800395c:	2b20      	cmp	r3, #32
 800395e:	d060      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x156>
 8003960:	2b20      	cmp	r3, #32
 8003962:	d867      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x168>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d05c      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x156>
 8003968:	2b10      	cmp	r3, #16
 800396a:	d05a      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800396c:	e062      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6899      	ldr	r1, [r3, #8]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f000 fb9f 	bl	80040c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003990:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	609a      	str	r2, [r3, #8]
      break;
 800399a:	e04e      	b.n	8003a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	6899      	ldr	r1, [r3, #8]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f000 fb88 	bl	80040c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039be:	609a      	str	r2, [r3, #8]
      break;
 80039c0:	e03b      	b.n	8003a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f000 fa46 	bl	8003e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2150      	movs	r1, #80	; 0x50
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fb55 	bl	800408a <TIM_ITRx_SetConfig>
      break;
 80039e0:	e02b      	b.n	8003a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 faa2 	bl	8003f38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2160      	movs	r1, #96	; 0x60
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fb45 	bl	800408a <TIM_ITRx_SetConfig>
      break;
 8003a00:	e01b      	b.n	8003a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f000 fa26 	bl	8003e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2140      	movs	r1, #64	; 0x40
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fb35 	bl	800408a <TIM_ITRx_SetConfig>
      break;
 8003a20:	e00b      	b.n	8003a3a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f000 fb2c 	bl	800408a <TIM_ITRx_SetConfig>
        break;
 8003a32:	e002      	b.n	8003a3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a34:	bf00      	nop
 8003a36:	e000      	b.n	8003a3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d107      	bne.n	8003af4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af2:	e02a      	b.n	8003b4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d107      	bne.n	8003b0e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b0c:	e01d      	b.n	8003b4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d107      	bne.n	8003b28 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b26:	e010      	b.n	8003b4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d107      	bne.n	8003b42 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2208      	movs	r2, #8
 8003b36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b40:	e003      	b.n	8003b4a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff ffb4 	bl	8003ab8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	771a      	strb	r2, [r3, #28]
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d10f      	bne.n	8003b96 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d146      	bne.n	8003c12 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b94:	e03d      	b.n	8003c12 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d10f      	bne.n	8003bc0 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d131      	bne.n	8003c12 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bbe:	e028      	b.n	8003c12 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d10f      	bne.n	8003bea <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2204      	movs	r2, #4
 8003bce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11c      	bne.n	8003c12 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be8:	e013      	b.n	8003c12 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d10e      	bne.n	8003c12 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2208      	movs	r2, #8
 8003bf8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d107      	bne.n	8003c12 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7fd fbda 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	771a      	strb	r2, [r3, #28]
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d103      	bne.n	8003c46 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	771a      	strb	r2, [r3, #28]
 8003c44:	e019      	b.n	8003c7a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d103      	bne.n	8003c58 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2202      	movs	r2, #2
 8003c54:	771a      	strb	r2, [r3, #28]
 8003c56:	e010      	b.n	8003c7a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d103      	bne.n	8003c6a <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2204      	movs	r2, #4
 8003c66:	771a      	strb	r2, [r3, #28]
 8003c68:	e007      	b.n	8003c7a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d102      	bne.n	8003c7a <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2208      	movs	r2, #8
 8003c78:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7ff fefe 	bl	8003a7c <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	771a      	strb	r2, [r3, #28]
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a34      	ldr	r2, [pc, #208]	; (8003d74 <TIM_Base_SetConfig+0xe4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00f      	beq.n	8003cc8 <TIM_Base_SetConfig+0x38>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cae:	d00b      	beq.n	8003cc8 <TIM_Base_SetConfig+0x38>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a31      	ldr	r2, [pc, #196]	; (8003d78 <TIM_Base_SetConfig+0xe8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_Base_SetConfig+0x38>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a30      	ldr	r2, [pc, #192]	; (8003d7c <TIM_Base_SetConfig+0xec>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0x38>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a2f      	ldr	r2, [pc, #188]	; (8003d80 <TIM_Base_SetConfig+0xf0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a25      	ldr	r2, [pc, #148]	; (8003d74 <TIM_Base_SetConfig+0xe4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01b      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d017      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <TIM_Base_SetConfig+0xe8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <TIM_Base_SetConfig+0xec>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00f      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a20      	ldr	r2, [pc, #128]	; (8003d80 <TIM_Base_SetConfig+0xf0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00b      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <TIM_Base_SetConfig+0xf4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d007      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a1e      	ldr	r2, [pc, #120]	; (8003d88 <TIM_Base_SetConfig+0xf8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <TIM_Base_SetConfig+0xfc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d108      	bne.n	8003d2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <TIM_Base_SetConfig+0xe4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d103      	bne.n	8003d60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	615a      	str	r2, [r3, #20]
}
 8003d66:	bf00      	nop
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40014400 	.word	0x40014400
 8003d8c:	40014800 	.word	0x40014800

08003d90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f023 0201 	bic.w	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a24      	ldr	r2, [pc, #144]	; (8003e4c <TIM_TI1_SetConfig+0xbc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <TIM_TI1_SetConfig+0x56>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc4:	d00f      	beq.n	8003de6 <TIM_TI1_SetConfig+0x56>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a21      	ldr	r2, [pc, #132]	; (8003e50 <TIM_TI1_SetConfig+0xc0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00b      	beq.n	8003de6 <TIM_TI1_SetConfig+0x56>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a20      	ldr	r2, [pc, #128]	; (8003e54 <TIM_TI1_SetConfig+0xc4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <TIM_TI1_SetConfig+0x56>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <TIM_TI1_SetConfig+0xc8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d003      	beq.n	8003de6 <TIM_TI1_SetConfig+0x56>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a1e      	ldr	r2, [pc, #120]	; (8003e5c <TIM_TI1_SetConfig+0xcc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <TIM_TI1_SetConfig+0x5a>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <TIM_TI1_SetConfig+0x5c>
 8003dea:	2300      	movs	r3, #0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0303 	bic.w	r3, r3, #3
 8003df6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e003      	b.n	8003e0a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f023 030a 	bic.w	r3, r3, #10
 8003e24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f003 030a 	and.w	r3, r3, #10
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40000800 	.word	0x40000800
 8003e58:	40000c00 	.word	0x40000c00
 8003e5c:	40014000 	.word	0x40014000

08003e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f023 0201 	bic.w	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 030a 	bic.w	r3, r3, #10
 8003e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b087      	sub	sp, #28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f023 0210 	bic.w	r2, r3, #16
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003efc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	031b      	lsls	r3, r3, #12
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f023 0210 	bic.w	r2, r3, #16
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	031b      	lsls	r3, r3, #12
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f023 0303 	bic.w	r3, r3, #3
 8003fc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003fe8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	621a      	str	r2, [r3, #32]
}
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800404e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	031b      	lsls	r3, r3, #12
 8004054:	b29b      	uxth	r3, r3
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004062:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	031b      	lsls	r3, r3, #12
 8004068:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f043 0307 	orr.w	r3, r3, #7
 80040ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	609a      	str	r2, [r3, #8]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	021a      	lsls	r2, r3, #8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	609a      	str	r2, [r3, #8]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	2201      	movs	r2, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1a      	ldr	r2, [r3, #32]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	43db      	mvns	r3, r3
 8004122:	401a      	ands	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1a      	ldr	r2, [r3, #32]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	fa01 f303 	lsl.w	r3, r1, r3
 8004138:	431a      	orrs	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004160:	2302      	movs	r3, #2
 8004162:	e050      	b.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d018      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b0:	d013      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a18      	ldr	r2, [pc, #96]	; (8004218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00e      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a16      	ldr	r2, [pc, #88]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d009      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a15      	ldr	r2, [pc, #84]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a13      	ldr	r2, [pc, #76]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10c      	bne.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40010000 	.word	0x40010000
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40014000 	.word	0x40014000

08004228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e03f      	b.n	80042e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd f9de 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	; 0x24
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f905 	bl	80044a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b08a      	sub	sp, #40	; 0x28
 80042ee:	af02      	add	r7, sp, #8
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b20      	cmp	r3, #32
 8004308:	d17c      	bne.n	8004404 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <HAL_UART_Transmit+0x2c>
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e075      	b.n	8004406 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_UART_Transmit+0x3e>
 8004324:	2302      	movs	r3, #2
 8004326:	e06e      	b.n	8004406 <HAL_UART_Transmit+0x11c>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2221      	movs	r2, #33	; 0x21
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800433e:	f7fd fb73 	bl	8001a28 <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004358:	d108      	bne.n	800436c <HAL_UART_Transmit+0x82>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e003      	b.n	8004374 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800437c:	e02a      	b.n	80043d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	2180      	movs	r1, #128	; 0x80
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f840 	bl	800440e <UART_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e036      	b.n	8004406 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10b      	bne.n	80043b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	3302      	adds	r3, #2
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	e007      	b.n	80043c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	781a      	ldrb	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	3301      	adds	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1cf      	bne.n	800437e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2200      	movs	r2, #0
 80043e6:	2140      	movs	r1, #64	; 0x40
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f810 	bl	800440e <UART_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e006      	b.n	8004406 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e000      	b.n	8004406 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004404:	2302      	movs	r3, #2
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441e:	e02c      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d028      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0x30>
 800442e:	f7fd fafb 	bl	8001a28 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	429a      	cmp	r2, r3
 800443c:	d21d      	bcs.n	800447a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800444c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e00f      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d0c3      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a8:	b09f      	sub	sp, #124	; 0x7c
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ba:	68d9      	ldr	r1, [r3, #12]
 80044bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	ea40 0301 	orr.w	r3, r0, r1
 80044c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4313      	orrs	r3, r2
 80044dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044e8:	f021 010c 	bic.w	r1, r1, #12
 80044ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f2:	430b      	orrs	r3, r1
 80044f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004502:	6999      	ldr	r1, [r3, #24]
 8004504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	ea40 0301 	orr.w	r3, r0, r1
 800450c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800450e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4bc5      	ldr	r3, [pc, #788]	; (8004828 <UART_SetConfig+0x384>)
 8004514:	429a      	cmp	r2, r3
 8004516:	d004      	beq.n	8004522 <UART_SetConfig+0x7e>
 8004518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4bc3      	ldr	r3, [pc, #780]	; (800482c <UART_SetConfig+0x388>)
 800451e:	429a      	cmp	r2, r3
 8004520:	d103      	bne.n	800452a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004522:	f7fe fd85 	bl	8003030 <HAL_RCC_GetPCLK2Freq>
 8004526:	6778      	str	r0, [r7, #116]	; 0x74
 8004528:	e002      	b.n	8004530 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800452a:	f7fe fd6d 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 800452e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004538:	f040 80b6 	bne.w	80046a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800453c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800453e:	461c      	mov	r4, r3
 8004540:	f04f 0500 	mov.w	r5, #0
 8004544:	4622      	mov	r2, r4
 8004546:	462b      	mov	r3, r5
 8004548:	1891      	adds	r1, r2, r2
 800454a:	6439      	str	r1, [r7, #64]	; 0x40
 800454c:	415b      	adcs	r3, r3
 800454e:	647b      	str	r3, [r7, #68]	; 0x44
 8004550:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004554:	1912      	adds	r2, r2, r4
 8004556:	eb45 0303 	adc.w	r3, r5, r3
 800455a:	f04f 0000 	mov.w	r0, #0
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	00d9      	lsls	r1, r3, #3
 8004564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004568:	00d0      	lsls	r0, r2, #3
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	1911      	adds	r1, r2, r4
 8004570:	6639      	str	r1, [r7, #96]	; 0x60
 8004572:	416b      	adcs	r3, r5
 8004574:	667b      	str	r3, [r7, #100]	; 0x64
 8004576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	461a      	mov	r2, r3
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	1891      	adds	r1, r2, r2
 8004582:	63b9      	str	r1, [r7, #56]	; 0x38
 8004584:	415b      	adcs	r3, r3
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004588:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800458c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004590:	f7fc fb12 	bl	8000bb8 <__aeabi_uldivmod>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4ba5      	ldr	r3, [pc, #660]	; (8004830 <UART_SetConfig+0x38c>)
 800459a:	fba3 2302 	umull	r2, r3, r3, r2
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	011e      	lsls	r6, r3, #4
 80045a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a4:	461c      	mov	r4, r3
 80045a6:	f04f 0500 	mov.w	r5, #0
 80045aa:	4622      	mov	r2, r4
 80045ac:	462b      	mov	r3, r5
 80045ae:	1891      	adds	r1, r2, r2
 80045b0:	6339      	str	r1, [r7, #48]	; 0x30
 80045b2:	415b      	adcs	r3, r3
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
 80045b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045ba:	1912      	adds	r2, r2, r4
 80045bc:	eb45 0303 	adc.w	r3, r5, r3
 80045c0:	f04f 0000 	mov.w	r0, #0
 80045c4:	f04f 0100 	mov.w	r1, #0
 80045c8:	00d9      	lsls	r1, r3, #3
 80045ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045ce:	00d0      	lsls	r0, r2, #3
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	1911      	adds	r1, r2, r4
 80045d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80045d8:	416b      	adcs	r3, r5
 80045da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	461a      	mov	r2, r3
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	1891      	adds	r1, r2, r2
 80045e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80045ea:	415b      	adcs	r3, r3
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045f6:	f7fc fadf 	bl	8000bb8 <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4b8c      	ldr	r3, [pc, #560]	; (8004830 <UART_SetConfig+0x38c>)
 8004600:	fba3 1302 	umull	r1, r3, r3, r2
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	2164      	movs	r1, #100	; 0x64
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	3332      	adds	r3, #50	; 0x32
 8004612:	4a87      	ldr	r2, [pc, #540]	; (8004830 <UART_SetConfig+0x38c>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004620:	441e      	add	r6, r3
 8004622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004624:	4618      	mov	r0, r3
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	1894      	adds	r4, r2, r2
 8004630:	623c      	str	r4, [r7, #32]
 8004632:	415b      	adcs	r3, r3
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
 8004636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800463a:	1812      	adds	r2, r2, r0
 800463c:	eb41 0303 	adc.w	r3, r1, r3
 8004640:	f04f 0400 	mov.w	r4, #0
 8004644:	f04f 0500 	mov.w	r5, #0
 8004648:	00dd      	lsls	r5, r3, #3
 800464a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800464e:	00d4      	lsls	r4, r2, #3
 8004650:	4622      	mov	r2, r4
 8004652:	462b      	mov	r3, r5
 8004654:	1814      	adds	r4, r2, r0
 8004656:	653c      	str	r4, [r7, #80]	; 0x50
 8004658:	414b      	adcs	r3, r1
 800465a:	657b      	str	r3, [r7, #84]	; 0x54
 800465c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	461a      	mov	r2, r3
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	1891      	adds	r1, r2, r2
 8004668:	61b9      	str	r1, [r7, #24]
 800466a:	415b      	adcs	r3, r3
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004672:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004676:	f7fc fa9f 	bl	8000bb8 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4b6c      	ldr	r3, [pc, #432]	; (8004830 <UART_SetConfig+0x38c>)
 8004680:	fba3 1302 	umull	r1, r3, r3, r2
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	2164      	movs	r1, #100	; 0x64
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	3332      	adds	r3, #50	; 0x32
 8004692:	4a67      	ldr	r2, [pc, #412]	; (8004830 <UART_SetConfig+0x38c>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	f003 0207 	and.w	r2, r3, #7
 800469e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4432      	add	r2, r6
 80046a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046a6:	e0b9      	b.n	800481c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046aa:	461c      	mov	r4, r3
 80046ac:	f04f 0500 	mov.w	r5, #0
 80046b0:	4622      	mov	r2, r4
 80046b2:	462b      	mov	r3, r5
 80046b4:	1891      	adds	r1, r2, r2
 80046b6:	6139      	str	r1, [r7, #16]
 80046b8:	415b      	adcs	r3, r3
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046c0:	1912      	adds	r2, r2, r4
 80046c2:	eb45 0303 	adc.w	r3, r5, r3
 80046c6:	f04f 0000 	mov.w	r0, #0
 80046ca:	f04f 0100 	mov.w	r1, #0
 80046ce:	00d9      	lsls	r1, r3, #3
 80046d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046d4:	00d0      	lsls	r0, r2, #3
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	eb12 0804 	adds.w	r8, r2, r4
 80046de:	eb43 0905 	adc.w	r9, r3, r5
 80046e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f04f 0100 	mov.w	r1, #0
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	008b      	lsls	r3, r1, #2
 80046f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046fa:	0082      	lsls	r2, r0, #2
 80046fc:	4640      	mov	r0, r8
 80046fe:	4649      	mov	r1, r9
 8004700:	f7fc fa5a 	bl	8000bb8 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4b49      	ldr	r3, [pc, #292]	; (8004830 <UART_SetConfig+0x38c>)
 800470a:	fba3 2302 	umull	r2, r3, r3, r2
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	011e      	lsls	r6, r3, #4
 8004712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004714:	4618      	mov	r0, r3
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	1894      	adds	r4, r2, r2
 8004720:	60bc      	str	r4, [r7, #8]
 8004722:	415b      	adcs	r3, r3
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800472a:	1812      	adds	r2, r2, r0
 800472c:	eb41 0303 	adc.w	r3, r1, r3
 8004730:	f04f 0400 	mov.w	r4, #0
 8004734:	f04f 0500 	mov.w	r5, #0
 8004738:	00dd      	lsls	r5, r3, #3
 800473a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800473e:	00d4      	lsls	r4, r2, #3
 8004740:	4622      	mov	r2, r4
 8004742:	462b      	mov	r3, r5
 8004744:	1814      	adds	r4, r2, r0
 8004746:	64bc      	str	r4, [r7, #72]	; 0x48
 8004748:	414b      	adcs	r3, r1
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4618      	mov	r0, r3
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	008b      	lsls	r3, r1, #2
 8004760:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004764:	0082      	lsls	r2, r0, #2
 8004766:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800476a:	f7fc fa25 	bl	8000bb8 <__aeabi_uldivmod>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4b2f      	ldr	r3, [pc, #188]	; (8004830 <UART_SetConfig+0x38c>)
 8004774:	fba3 1302 	umull	r1, r3, r3, r2
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	2164      	movs	r1, #100	; 0x64
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	3332      	adds	r3, #50	; 0x32
 8004786:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <UART_SetConfig+0x38c>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004792:	441e      	add	r6, r3
 8004794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004796:	4618      	mov	r0, r3
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	1894      	adds	r4, r2, r2
 80047a2:	603c      	str	r4, [r7, #0]
 80047a4:	415b      	adcs	r3, r3
 80047a6:	607b      	str	r3, [r7, #4]
 80047a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ac:	1812      	adds	r2, r2, r0
 80047ae:	eb41 0303 	adc.w	r3, r1, r3
 80047b2:	f04f 0400 	mov.w	r4, #0
 80047b6:	f04f 0500 	mov.w	r5, #0
 80047ba:	00dd      	lsls	r5, r3, #3
 80047bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047c0:	00d4      	lsls	r4, r2, #3
 80047c2:	4622      	mov	r2, r4
 80047c4:	462b      	mov	r3, r5
 80047c6:	eb12 0a00 	adds.w	sl, r2, r0
 80047ca:	eb43 0b01 	adc.w	fp, r3, r1
 80047ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f04f 0100 	mov.w	r1, #0
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	008b      	lsls	r3, r1, #2
 80047e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047e6:	0082      	lsls	r2, r0, #2
 80047e8:	4650      	mov	r0, sl
 80047ea:	4659      	mov	r1, fp
 80047ec:	f7fc f9e4 	bl	8000bb8 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <UART_SetConfig+0x38c>)
 80047f6:	fba3 1302 	umull	r1, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2164      	movs	r1, #100	; 0x64
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	3332      	adds	r3, #50	; 0x32
 8004808:	4a09      	ldr	r2, [pc, #36]	; (8004830 <UART_SetConfig+0x38c>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	f003 020f 	and.w	r2, r3, #15
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4432      	add	r2, r6
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	377c      	adds	r7, #124	; 0x7c
 8004820:	46bd      	mov	sp, r7
 8004822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004826:	bf00      	nop
 8004828:	40011000 	.word	0x40011000
 800482c:	40011400 	.word	0x40011400
 8004830:	51eb851f 	.word	0x51eb851f

08004834 <__errno>:
 8004834:	4b01      	ldr	r3, [pc, #4]	; (800483c <__errno+0x8>)
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000010 	.word	0x20000010

08004840 <__libc_init_array>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	4d0d      	ldr	r5, [pc, #52]	; (8004878 <__libc_init_array+0x38>)
 8004844:	4c0d      	ldr	r4, [pc, #52]	; (800487c <__libc_init_array+0x3c>)
 8004846:	1b64      	subs	r4, r4, r5
 8004848:	10a4      	asrs	r4, r4, #2
 800484a:	2600      	movs	r6, #0
 800484c:	42a6      	cmp	r6, r4
 800484e:	d109      	bne.n	8004864 <__libc_init_array+0x24>
 8004850:	4d0b      	ldr	r5, [pc, #44]	; (8004880 <__libc_init_array+0x40>)
 8004852:	4c0c      	ldr	r4, [pc, #48]	; (8004884 <__libc_init_array+0x44>)
 8004854:	f002 feb6 	bl	80075c4 <_init>
 8004858:	1b64      	subs	r4, r4, r5
 800485a:	10a4      	asrs	r4, r4, #2
 800485c:	2600      	movs	r6, #0
 800485e:	42a6      	cmp	r6, r4
 8004860:	d105      	bne.n	800486e <__libc_init_array+0x2e>
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	f855 3b04 	ldr.w	r3, [r5], #4
 8004868:	4798      	blx	r3
 800486a:	3601      	adds	r6, #1
 800486c:	e7ee      	b.n	800484c <__libc_init_array+0xc>
 800486e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004872:	4798      	blx	r3
 8004874:	3601      	adds	r6, #1
 8004876:	e7f2      	b.n	800485e <__libc_init_array+0x1e>
 8004878:	08007a04 	.word	0x08007a04
 800487c:	08007a04 	.word	0x08007a04
 8004880:	08007a04 	.word	0x08007a04
 8004884:	08007a08 	.word	0x08007a08

08004888 <memset>:
 8004888:	4402      	add	r2, r0
 800488a:	4603      	mov	r3, r0
 800488c:	4293      	cmp	r3, r2
 800488e:	d100      	bne.n	8004892 <memset+0xa>
 8004890:	4770      	bx	lr
 8004892:	f803 1b01 	strb.w	r1, [r3], #1
 8004896:	e7f9      	b.n	800488c <memset+0x4>

08004898 <__cvt>:
 8004898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800489c:	ec55 4b10 	vmov	r4, r5, d0
 80048a0:	2d00      	cmp	r5, #0
 80048a2:	460e      	mov	r6, r1
 80048a4:	4619      	mov	r1, r3
 80048a6:	462b      	mov	r3, r5
 80048a8:	bfbb      	ittet	lt
 80048aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048ae:	461d      	movlt	r5, r3
 80048b0:	2300      	movge	r3, #0
 80048b2:	232d      	movlt	r3, #45	; 0x2d
 80048b4:	700b      	strb	r3, [r1, #0]
 80048b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048bc:	4691      	mov	r9, r2
 80048be:	f023 0820 	bic.w	r8, r3, #32
 80048c2:	bfbc      	itt	lt
 80048c4:	4622      	movlt	r2, r4
 80048c6:	4614      	movlt	r4, r2
 80048c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048cc:	d005      	beq.n	80048da <__cvt+0x42>
 80048ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048d2:	d100      	bne.n	80048d6 <__cvt+0x3e>
 80048d4:	3601      	adds	r6, #1
 80048d6:	2102      	movs	r1, #2
 80048d8:	e000      	b.n	80048dc <__cvt+0x44>
 80048da:	2103      	movs	r1, #3
 80048dc:	ab03      	add	r3, sp, #12
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	ab02      	add	r3, sp, #8
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	ec45 4b10 	vmov	d0, r4, r5
 80048e8:	4653      	mov	r3, sl
 80048ea:	4632      	mov	r2, r6
 80048ec:	f000 fcec 	bl	80052c8 <_dtoa_r>
 80048f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048f4:	4607      	mov	r7, r0
 80048f6:	d102      	bne.n	80048fe <__cvt+0x66>
 80048f8:	f019 0f01 	tst.w	r9, #1
 80048fc:	d022      	beq.n	8004944 <__cvt+0xac>
 80048fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004902:	eb07 0906 	add.w	r9, r7, r6
 8004906:	d110      	bne.n	800492a <__cvt+0x92>
 8004908:	783b      	ldrb	r3, [r7, #0]
 800490a:	2b30      	cmp	r3, #48	; 0x30
 800490c:	d10a      	bne.n	8004924 <__cvt+0x8c>
 800490e:	2200      	movs	r2, #0
 8004910:	2300      	movs	r3, #0
 8004912:	4620      	mov	r0, r4
 8004914:	4629      	mov	r1, r5
 8004916:	f7fc f8df 	bl	8000ad8 <__aeabi_dcmpeq>
 800491a:	b918      	cbnz	r0, 8004924 <__cvt+0x8c>
 800491c:	f1c6 0601 	rsb	r6, r6, #1
 8004920:	f8ca 6000 	str.w	r6, [sl]
 8004924:	f8da 3000 	ldr.w	r3, [sl]
 8004928:	4499      	add	r9, r3
 800492a:	2200      	movs	r2, #0
 800492c:	2300      	movs	r3, #0
 800492e:	4620      	mov	r0, r4
 8004930:	4629      	mov	r1, r5
 8004932:	f7fc f8d1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004936:	b108      	cbz	r0, 800493c <__cvt+0xa4>
 8004938:	f8cd 900c 	str.w	r9, [sp, #12]
 800493c:	2230      	movs	r2, #48	; 0x30
 800493e:	9b03      	ldr	r3, [sp, #12]
 8004940:	454b      	cmp	r3, r9
 8004942:	d307      	bcc.n	8004954 <__cvt+0xbc>
 8004944:	9b03      	ldr	r3, [sp, #12]
 8004946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004948:	1bdb      	subs	r3, r3, r7
 800494a:	4638      	mov	r0, r7
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	b004      	add	sp, #16
 8004950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004954:	1c59      	adds	r1, r3, #1
 8004956:	9103      	str	r1, [sp, #12]
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	e7f0      	b.n	800493e <__cvt+0xa6>

0800495c <__exponent>:
 800495c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800495e:	4603      	mov	r3, r0
 8004960:	2900      	cmp	r1, #0
 8004962:	bfb8      	it	lt
 8004964:	4249      	neglt	r1, r1
 8004966:	f803 2b02 	strb.w	r2, [r3], #2
 800496a:	bfb4      	ite	lt
 800496c:	222d      	movlt	r2, #45	; 0x2d
 800496e:	222b      	movge	r2, #43	; 0x2b
 8004970:	2909      	cmp	r1, #9
 8004972:	7042      	strb	r2, [r0, #1]
 8004974:	dd2a      	ble.n	80049cc <__exponent+0x70>
 8004976:	f10d 0407 	add.w	r4, sp, #7
 800497a:	46a4      	mov	ip, r4
 800497c:	270a      	movs	r7, #10
 800497e:	46a6      	mov	lr, r4
 8004980:	460a      	mov	r2, r1
 8004982:	fb91 f6f7 	sdiv	r6, r1, r7
 8004986:	fb07 1516 	mls	r5, r7, r6, r1
 800498a:	3530      	adds	r5, #48	; 0x30
 800498c:	2a63      	cmp	r2, #99	; 0x63
 800498e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004992:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004996:	4631      	mov	r1, r6
 8004998:	dcf1      	bgt.n	800497e <__exponent+0x22>
 800499a:	3130      	adds	r1, #48	; 0x30
 800499c:	f1ae 0502 	sub.w	r5, lr, #2
 80049a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049a4:	1c44      	adds	r4, r0, #1
 80049a6:	4629      	mov	r1, r5
 80049a8:	4561      	cmp	r1, ip
 80049aa:	d30a      	bcc.n	80049c2 <__exponent+0x66>
 80049ac:	f10d 0209 	add.w	r2, sp, #9
 80049b0:	eba2 020e 	sub.w	r2, r2, lr
 80049b4:	4565      	cmp	r5, ip
 80049b6:	bf88      	it	hi
 80049b8:	2200      	movhi	r2, #0
 80049ba:	4413      	add	r3, r2
 80049bc:	1a18      	subs	r0, r3, r0
 80049be:	b003      	add	sp, #12
 80049c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049ca:	e7ed      	b.n	80049a8 <__exponent+0x4c>
 80049cc:	2330      	movs	r3, #48	; 0x30
 80049ce:	3130      	adds	r1, #48	; 0x30
 80049d0:	7083      	strb	r3, [r0, #2]
 80049d2:	70c1      	strb	r1, [r0, #3]
 80049d4:	1d03      	adds	r3, r0, #4
 80049d6:	e7f1      	b.n	80049bc <__exponent+0x60>

080049d8 <_printf_float>:
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049dc:	ed2d 8b02 	vpush	{d8}
 80049e0:	b08d      	sub	sp, #52	; 0x34
 80049e2:	460c      	mov	r4, r1
 80049e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80049e8:	4616      	mov	r6, r2
 80049ea:	461f      	mov	r7, r3
 80049ec:	4605      	mov	r5, r0
 80049ee:	f001 fa57 	bl	8005ea0 <_localeconv_r>
 80049f2:	f8d0 a000 	ldr.w	sl, [r0]
 80049f6:	4650      	mov	r0, sl
 80049f8:	f7fb fbf2 	bl	80001e0 <strlen>
 80049fc:	2300      	movs	r3, #0
 80049fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	9305      	str	r3, [sp, #20]
 8004a04:	f8d8 3000 	ldr.w	r3, [r8]
 8004a08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a0c:	3307      	adds	r3, #7
 8004a0e:	f023 0307 	bic.w	r3, r3, #7
 8004a12:	f103 0208 	add.w	r2, r3, #8
 8004a16:	f8c8 2000 	str.w	r2, [r8]
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a2a:	9307      	str	r3, [sp, #28]
 8004a2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a30:	ee08 0a10 	vmov	s16, r0
 8004a34:	4b9f      	ldr	r3, [pc, #636]	; (8004cb4 <_printf_float+0x2dc>)
 8004a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3e:	f7fc f87d 	bl	8000b3c <__aeabi_dcmpun>
 8004a42:	bb88      	cbnz	r0, 8004aa8 <_printf_float+0xd0>
 8004a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a48:	4b9a      	ldr	r3, [pc, #616]	; (8004cb4 <_printf_float+0x2dc>)
 8004a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4e:	f7fc f857 	bl	8000b00 <__aeabi_dcmple>
 8004a52:	bb48      	cbnz	r0, 8004aa8 <_printf_float+0xd0>
 8004a54:	2200      	movs	r2, #0
 8004a56:	2300      	movs	r3, #0
 8004a58:	4640      	mov	r0, r8
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	f7fc f846 	bl	8000aec <__aeabi_dcmplt>
 8004a60:	b110      	cbz	r0, 8004a68 <_printf_float+0x90>
 8004a62:	232d      	movs	r3, #45	; 0x2d
 8004a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a68:	4b93      	ldr	r3, [pc, #588]	; (8004cb8 <_printf_float+0x2e0>)
 8004a6a:	4894      	ldr	r0, [pc, #592]	; (8004cbc <_printf_float+0x2e4>)
 8004a6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a70:	bf94      	ite	ls
 8004a72:	4698      	movls	r8, r3
 8004a74:	4680      	movhi	r8, r0
 8004a76:	2303      	movs	r3, #3
 8004a78:	6123      	str	r3, [r4, #16]
 8004a7a:	9b05      	ldr	r3, [sp, #20]
 8004a7c:	f023 0204 	bic.w	r2, r3, #4
 8004a80:	6022      	str	r2, [r4, #0]
 8004a82:	f04f 0900 	mov.w	r9, #0
 8004a86:	9700      	str	r7, [sp, #0]
 8004a88:	4633      	mov	r3, r6
 8004a8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f000 f9d8 	bl	8004e44 <_printf_common>
 8004a94:	3001      	adds	r0, #1
 8004a96:	f040 8090 	bne.w	8004bba <_printf_float+0x1e2>
 8004a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9e:	b00d      	add	sp, #52	; 0x34
 8004aa0:	ecbd 8b02 	vpop	{d8}
 8004aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	464b      	mov	r3, r9
 8004aac:	4640      	mov	r0, r8
 8004aae:	4649      	mov	r1, r9
 8004ab0:	f7fc f844 	bl	8000b3c <__aeabi_dcmpun>
 8004ab4:	b140      	cbz	r0, 8004ac8 <_printf_float+0xf0>
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bfbc      	itt	lt
 8004abc:	232d      	movlt	r3, #45	; 0x2d
 8004abe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ac2:	487f      	ldr	r0, [pc, #508]	; (8004cc0 <_printf_float+0x2e8>)
 8004ac4:	4b7f      	ldr	r3, [pc, #508]	; (8004cc4 <_printf_float+0x2ec>)
 8004ac6:	e7d1      	b.n	8004a6c <_printf_float+0x94>
 8004ac8:	6863      	ldr	r3, [r4, #4]
 8004aca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004ace:	9206      	str	r2, [sp, #24]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	d13f      	bne.n	8004b54 <_printf_float+0x17c>
 8004ad4:	2306      	movs	r3, #6
 8004ad6:	6063      	str	r3, [r4, #4]
 8004ad8:	9b05      	ldr	r3, [sp, #20]
 8004ada:	6861      	ldr	r1, [r4, #4]
 8004adc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9303      	str	r3, [sp, #12]
 8004ae4:	ab0a      	add	r3, sp, #40	; 0x28
 8004ae6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004aea:	ab09      	add	r3, sp, #36	; 0x24
 8004aec:	ec49 8b10 	vmov	d0, r8, r9
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6022      	str	r2, [r4, #0]
 8004af4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004af8:	4628      	mov	r0, r5
 8004afa:	f7ff fecd 	bl	8004898 <__cvt>
 8004afe:	9b06      	ldr	r3, [sp, #24]
 8004b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b02:	2b47      	cmp	r3, #71	; 0x47
 8004b04:	4680      	mov	r8, r0
 8004b06:	d108      	bne.n	8004b1a <_printf_float+0x142>
 8004b08:	1cc8      	adds	r0, r1, #3
 8004b0a:	db02      	blt.n	8004b12 <_printf_float+0x13a>
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	4299      	cmp	r1, r3
 8004b10:	dd41      	ble.n	8004b96 <_printf_float+0x1be>
 8004b12:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b16:	fa5f fb8b 	uxtb.w	fp, fp
 8004b1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b1e:	d820      	bhi.n	8004b62 <_printf_float+0x18a>
 8004b20:	3901      	subs	r1, #1
 8004b22:	465a      	mov	r2, fp
 8004b24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b28:	9109      	str	r1, [sp, #36]	; 0x24
 8004b2a:	f7ff ff17 	bl	800495c <__exponent>
 8004b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b30:	1813      	adds	r3, r2, r0
 8004b32:	2a01      	cmp	r2, #1
 8004b34:	4681      	mov	r9, r0
 8004b36:	6123      	str	r3, [r4, #16]
 8004b38:	dc02      	bgt.n	8004b40 <_printf_float+0x168>
 8004b3a:	6822      	ldr	r2, [r4, #0]
 8004b3c:	07d2      	lsls	r2, r2, #31
 8004b3e:	d501      	bpl.n	8004b44 <_printf_float+0x16c>
 8004b40:	3301      	adds	r3, #1
 8004b42:	6123      	str	r3, [r4, #16]
 8004b44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d09c      	beq.n	8004a86 <_printf_float+0xae>
 8004b4c:	232d      	movs	r3, #45	; 0x2d
 8004b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b52:	e798      	b.n	8004a86 <_printf_float+0xae>
 8004b54:	9a06      	ldr	r2, [sp, #24]
 8004b56:	2a47      	cmp	r2, #71	; 0x47
 8004b58:	d1be      	bne.n	8004ad8 <_printf_float+0x100>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1bc      	bne.n	8004ad8 <_printf_float+0x100>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e7b9      	b.n	8004ad6 <_printf_float+0xfe>
 8004b62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b66:	d118      	bne.n	8004b9a <_printf_float+0x1c2>
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	6863      	ldr	r3, [r4, #4]
 8004b6c:	dd0b      	ble.n	8004b86 <_printf_float+0x1ae>
 8004b6e:	6121      	str	r1, [r4, #16]
 8004b70:	b913      	cbnz	r3, 8004b78 <_printf_float+0x1a0>
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	07d0      	lsls	r0, r2, #31
 8004b76:	d502      	bpl.n	8004b7e <_printf_float+0x1a6>
 8004b78:	3301      	adds	r3, #1
 8004b7a:	440b      	add	r3, r1
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b80:	f04f 0900 	mov.w	r9, #0
 8004b84:	e7de      	b.n	8004b44 <_printf_float+0x16c>
 8004b86:	b913      	cbnz	r3, 8004b8e <_printf_float+0x1b6>
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	07d2      	lsls	r2, r2, #31
 8004b8c:	d501      	bpl.n	8004b92 <_printf_float+0x1ba>
 8004b8e:	3302      	adds	r3, #2
 8004b90:	e7f4      	b.n	8004b7c <_printf_float+0x1a4>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e7f2      	b.n	8004b7c <_printf_float+0x1a4>
 8004b96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	db05      	blt.n	8004bac <_printf_float+0x1d4>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	6121      	str	r1, [r4, #16]
 8004ba4:	07d8      	lsls	r0, r3, #31
 8004ba6:	d5ea      	bpl.n	8004b7e <_printf_float+0x1a6>
 8004ba8:	1c4b      	adds	r3, r1, #1
 8004baa:	e7e7      	b.n	8004b7c <_printf_float+0x1a4>
 8004bac:	2900      	cmp	r1, #0
 8004bae:	bfd4      	ite	le
 8004bb0:	f1c1 0202 	rsble	r2, r1, #2
 8004bb4:	2201      	movgt	r2, #1
 8004bb6:	4413      	add	r3, r2
 8004bb8:	e7e0      	b.n	8004b7c <_printf_float+0x1a4>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	055a      	lsls	r2, r3, #21
 8004bbe:	d407      	bmi.n	8004bd0 <_printf_float+0x1f8>
 8004bc0:	6923      	ldr	r3, [r4, #16]
 8004bc2:	4642      	mov	r2, r8
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	47b8      	blx	r7
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d12c      	bne.n	8004c28 <_printf_float+0x250>
 8004bce:	e764      	b.n	8004a9a <_printf_float+0xc2>
 8004bd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bd4:	f240 80e0 	bls.w	8004d98 <_printf_float+0x3c0>
 8004bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2300      	movs	r3, #0
 8004be0:	f7fb ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d034      	beq.n	8004c52 <_printf_float+0x27a>
 8004be8:	4a37      	ldr	r2, [pc, #220]	; (8004cc8 <_printf_float+0x2f0>)
 8004bea:	2301      	movs	r3, #1
 8004bec:	4631      	mov	r1, r6
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b8      	blx	r7
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f af51 	beq.w	8004a9a <_printf_float+0xc2>
 8004bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	db02      	blt.n	8004c06 <_printf_float+0x22e>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	07d8      	lsls	r0, r3, #31
 8004c04:	d510      	bpl.n	8004c28 <_printf_float+0x250>
 8004c06:	ee18 3a10 	vmov	r3, s16
 8004c0a:	4652      	mov	r2, sl
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b8      	blx	r7
 8004c12:	3001      	adds	r0, #1
 8004c14:	f43f af41 	beq.w	8004a9a <_printf_float+0xc2>
 8004c18:	f04f 0800 	mov.w	r8, #0
 8004c1c:	f104 091a 	add.w	r9, r4, #26
 8004c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c22:	3b01      	subs	r3, #1
 8004c24:	4543      	cmp	r3, r8
 8004c26:	dc09      	bgt.n	8004c3c <_printf_float+0x264>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	079b      	lsls	r3, r3, #30
 8004c2c:	f100 8105 	bmi.w	8004e3a <_printf_float+0x462>
 8004c30:	68e0      	ldr	r0, [r4, #12]
 8004c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c34:	4298      	cmp	r0, r3
 8004c36:	bfb8      	it	lt
 8004c38:	4618      	movlt	r0, r3
 8004c3a:	e730      	b.n	8004a9e <_printf_float+0xc6>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	464a      	mov	r2, r9
 8004c40:	4631      	mov	r1, r6
 8004c42:	4628      	mov	r0, r5
 8004c44:	47b8      	blx	r7
 8004c46:	3001      	adds	r0, #1
 8004c48:	f43f af27 	beq.w	8004a9a <_printf_float+0xc2>
 8004c4c:	f108 0801 	add.w	r8, r8, #1
 8004c50:	e7e6      	b.n	8004c20 <_printf_float+0x248>
 8004c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	dc39      	bgt.n	8004ccc <_printf_float+0x2f4>
 8004c58:	4a1b      	ldr	r2, [pc, #108]	; (8004cc8 <_printf_float+0x2f0>)
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4628      	mov	r0, r5
 8004c60:	47b8      	blx	r7
 8004c62:	3001      	adds	r0, #1
 8004c64:	f43f af19 	beq.w	8004a9a <_printf_float+0xc2>
 8004c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	d102      	bne.n	8004c76 <_printf_float+0x29e>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	07d9      	lsls	r1, r3, #31
 8004c74:	d5d8      	bpl.n	8004c28 <_printf_float+0x250>
 8004c76:	ee18 3a10 	vmov	r3, s16
 8004c7a:	4652      	mov	r2, sl
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b8      	blx	r7
 8004c82:	3001      	adds	r0, #1
 8004c84:	f43f af09 	beq.w	8004a9a <_printf_float+0xc2>
 8004c88:	f04f 0900 	mov.w	r9, #0
 8004c8c:	f104 0a1a 	add.w	sl, r4, #26
 8004c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c92:	425b      	negs	r3, r3
 8004c94:	454b      	cmp	r3, r9
 8004c96:	dc01      	bgt.n	8004c9c <_printf_float+0x2c4>
 8004c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c9a:	e792      	b.n	8004bc2 <_printf_float+0x1ea>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	4652      	mov	r2, sl
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f43f aef7 	beq.w	8004a9a <_printf_float+0xc2>
 8004cac:	f109 0901 	add.w	r9, r9, #1
 8004cb0:	e7ee      	b.n	8004c90 <_printf_float+0x2b8>
 8004cb2:	bf00      	nop
 8004cb4:	7fefffff 	.word	0x7fefffff
 8004cb8:	0800761c 	.word	0x0800761c
 8004cbc:	08007620 	.word	0x08007620
 8004cc0:	08007628 	.word	0x08007628
 8004cc4:	08007624 	.word	0x08007624
 8004cc8:	0800762c 	.word	0x0800762c
 8004ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	bfa8      	it	ge
 8004cd4:	461a      	movge	r2, r3
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	4691      	mov	r9, r2
 8004cda:	dc37      	bgt.n	8004d4c <_printf_float+0x374>
 8004cdc:	f04f 0b00 	mov.w	fp, #0
 8004ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ce4:	f104 021a 	add.w	r2, r4, #26
 8004ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cea:	9305      	str	r3, [sp, #20]
 8004cec:	eba3 0309 	sub.w	r3, r3, r9
 8004cf0:	455b      	cmp	r3, fp
 8004cf2:	dc33      	bgt.n	8004d5c <_printf_float+0x384>
 8004cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	db3b      	blt.n	8004d74 <_printf_float+0x39c>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	07da      	lsls	r2, r3, #31
 8004d00:	d438      	bmi.n	8004d74 <_printf_float+0x39c>
 8004d02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d04:	9b05      	ldr	r3, [sp, #20]
 8004d06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	eba2 0901 	sub.w	r9, r2, r1
 8004d0e:	4599      	cmp	r9, r3
 8004d10:	bfa8      	it	ge
 8004d12:	4699      	movge	r9, r3
 8004d14:	f1b9 0f00 	cmp.w	r9, #0
 8004d18:	dc35      	bgt.n	8004d86 <_printf_float+0x3ae>
 8004d1a:	f04f 0800 	mov.w	r8, #0
 8004d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d22:	f104 0a1a 	add.w	sl, r4, #26
 8004d26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	eba3 0309 	sub.w	r3, r3, r9
 8004d30:	4543      	cmp	r3, r8
 8004d32:	f77f af79 	ble.w	8004c28 <_printf_float+0x250>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4652      	mov	r2, sl
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b8      	blx	r7
 8004d40:	3001      	adds	r0, #1
 8004d42:	f43f aeaa 	beq.w	8004a9a <_printf_float+0xc2>
 8004d46:	f108 0801 	add.w	r8, r8, #1
 8004d4a:	e7ec      	b.n	8004d26 <_printf_float+0x34e>
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4642      	mov	r2, r8
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b8      	blx	r7
 8004d56:	3001      	adds	r0, #1
 8004d58:	d1c0      	bne.n	8004cdc <_printf_float+0x304>
 8004d5a:	e69e      	b.n	8004a9a <_printf_float+0xc2>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	4631      	mov	r1, r6
 8004d60:	4628      	mov	r0, r5
 8004d62:	9205      	str	r2, [sp, #20]
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	f43f ae97 	beq.w	8004a9a <_printf_float+0xc2>
 8004d6c:	9a05      	ldr	r2, [sp, #20]
 8004d6e:	f10b 0b01 	add.w	fp, fp, #1
 8004d72:	e7b9      	b.n	8004ce8 <_printf_float+0x310>
 8004d74:	ee18 3a10 	vmov	r3, s16
 8004d78:	4652      	mov	r2, sl
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	d1be      	bne.n	8004d02 <_printf_float+0x32a>
 8004d84:	e689      	b.n	8004a9a <_printf_float+0xc2>
 8004d86:	9a05      	ldr	r2, [sp, #20]
 8004d88:	464b      	mov	r3, r9
 8004d8a:	4442      	add	r2, r8
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	4628      	mov	r0, r5
 8004d90:	47b8      	blx	r7
 8004d92:	3001      	adds	r0, #1
 8004d94:	d1c1      	bne.n	8004d1a <_printf_float+0x342>
 8004d96:	e680      	b.n	8004a9a <_printf_float+0xc2>
 8004d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d9a:	2a01      	cmp	r2, #1
 8004d9c:	dc01      	bgt.n	8004da2 <_printf_float+0x3ca>
 8004d9e:	07db      	lsls	r3, r3, #31
 8004da0:	d538      	bpl.n	8004e14 <_printf_float+0x43c>
 8004da2:	2301      	movs	r3, #1
 8004da4:	4642      	mov	r2, r8
 8004da6:	4631      	mov	r1, r6
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b8      	blx	r7
 8004dac:	3001      	adds	r0, #1
 8004dae:	f43f ae74 	beq.w	8004a9a <_printf_float+0xc2>
 8004db2:	ee18 3a10 	vmov	r3, s16
 8004db6:	4652      	mov	r2, sl
 8004db8:	4631      	mov	r1, r6
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f43f ae6b 	beq.w	8004a9a <_printf_float+0xc2>
 8004dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f7fb fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dd0:	b9d8      	cbnz	r0, 8004e0a <_printf_float+0x432>
 8004dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd4:	f108 0201 	add.w	r2, r8, #1
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	d10e      	bne.n	8004e02 <_printf_float+0x42a>
 8004de4:	e659      	b.n	8004a9a <_printf_float+0xc2>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4652      	mov	r2, sl
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	f43f ae52 	beq.w	8004a9a <_printf_float+0xc2>
 8004df6:	f108 0801 	add.w	r8, r8, #1
 8004dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	4543      	cmp	r3, r8
 8004e00:	dcf1      	bgt.n	8004de6 <_printf_float+0x40e>
 8004e02:	464b      	mov	r3, r9
 8004e04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e08:	e6dc      	b.n	8004bc4 <_printf_float+0x1ec>
 8004e0a:	f04f 0800 	mov.w	r8, #0
 8004e0e:	f104 0a1a 	add.w	sl, r4, #26
 8004e12:	e7f2      	b.n	8004dfa <_printf_float+0x422>
 8004e14:	2301      	movs	r3, #1
 8004e16:	4642      	mov	r2, r8
 8004e18:	e7df      	b.n	8004dda <_printf_float+0x402>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	464a      	mov	r2, r9
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4628      	mov	r0, r5
 8004e22:	47b8      	blx	r7
 8004e24:	3001      	adds	r0, #1
 8004e26:	f43f ae38 	beq.w	8004a9a <_printf_float+0xc2>
 8004e2a:	f108 0801 	add.w	r8, r8, #1
 8004e2e:	68e3      	ldr	r3, [r4, #12]
 8004e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e32:	1a5b      	subs	r3, r3, r1
 8004e34:	4543      	cmp	r3, r8
 8004e36:	dcf0      	bgt.n	8004e1a <_printf_float+0x442>
 8004e38:	e6fa      	b.n	8004c30 <_printf_float+0x258>
 8004e3a:	f04f 0800 	mov.w	r8, #0
 8004e3e:	f104 0919 	add.w	r9, r4, #25
 8004e42:	e7f4      	b.n	8004e2e <_printf_float+0x456>

08004e44 <_printf_common>:
 8004e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	4616      	mov	r6, r2
 8004e4a:	4699      	mov	r9, r3
 8004e4c:	688a      	ldr	r2, [r1, #8]
 8004e4e:	690b      	ldr	r3, [r1, #16]
 8004e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e54:	4293      	cmp	r3, r2
 8004e56:	bfb8      	it	lt
 8004e58:	4613      	movlt	r3, r2
 8004e5a:	6033      	str	r3, [r6, #0]
 8004e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e60:	4607      	mov	r7, r0
 8004e62:	460c      	mov	r4, r1
 8004e64:	b10a      	cbz	r2, 8004e6a <_printf_common+0x26>
 8004e66:	3301      	adds	r3, #1
 8004e68:	6033      	str	r3, [r6, #0]
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	0699      	lsls	r1, r3, #26
 8004e6e:	bf42      	ittt	mi
 8004e70:	6833      	ldrmi	r3, [r6, #0]
 8004e72:	3302      	addmi	r3, #2
 8004e74:	6033      	strmi	r3, [r6, #0]
 8004e76:	6825      	ldr	r5, [r4, #0]
 8004e78:	f015 0506 	ands.w	r5, r5, #6
 8004e7c:	d106      	bne.n	8004e8c <_printf_common+0x48>
 8004e7e:	f104 0a19 	add.w	sl, r4, #25
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	6832      	ldr	r2, [r6, #0]
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dc26      	bgt.n	8004eda <_printf_common+0x96>
 8004e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e90:	1e13      	subs	r3, r2, #0
 8004e92:	6822      	ldr	r2, [r4, #0]
 8004e94:	bf18      	it	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	0692      	lsls	r2, r2, #26
 8004e9a:	d42b      	bmi.n	8004ef4 <_printf_common+0xb0>
 8004e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	47c0      	blx	r8
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d01e      	beq.n	8004ee8 <_printf_common+0xa4>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	68e5      	ldr	r5, [r4, #12]
 8004eae:	6832      	ldr	r2, [r6, #0]
 8004eb0:	f003 0306 	and.w	r3, r3, #6
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	bf08      	it	eq
 8004eb8:	1aad      	subeq	r5, r5, r2
 8004eba:	68a3      	ldr	r3, [r4, #8]
 8004ebc:	6922      	ldr	r2, [r4, #16]
 8004ebe:	bf0c      	ite	eq
 8004ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ec4:	2500      	movne	r5, #0
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	bfc4      	itt	gt
 8004eca:	1a9b      	subgt	r3, r3, r2
 8004ecc:	18ed      	addgt	r5, r5, r3
 8004ece:	2600      	movs	r6, #0
 8004ed0:	341a      	adds	r4, #26
 8004ed2:	42b5      	cmp	r5, r6
 8004ed4:	d11a      	bne.n	8004f0c <_printf_common+0xc8>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e008      	b.n	8004eec <_printf_common+0xa8>
 8004eda:	2301      	movs	r3, #1
 8004edc:	4652      	mov	r2, sl
 8004ede:	4649      	mov	r1, r9
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	47c0      	blx	r8
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d103      	bne.n	8004ef0 <_printf_common+0xac>
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef0:	3501      	adds	r5, #1
 8004ef2:	e7c6      	b.n	8004e82 <_printf_common+0x3e>
 8004ef4:	18e1      	adds	r1, r4, r3
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	2030      	movs	r0, #48	; 0x30
 8004efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004efe:	4422      	add	r2, r4
 8004f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f08:	3302      	adds	r3, #2
 8004f0a:	e7c7      	b.n	8004e9c <_printf_common+0x58>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4622      	mov	r2, r4
 8004f10:	4649      	mov	r1, r9
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c0      	blx	r8
 8004f16:	3001      	adds	r0, #1
 8004f18:	d0e6      	beq.n	8004ee8 <_printf_common+0xa4>
 8004f1a:	3601      	adds	r6, #1
 8004f1c:	e7d9      	b.n	8004ed2 <_printf_common+0x8e>
	...

08004f20 <_printf_i>:
 8004f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f24:	460c      	mov	r4, r1
 8004f26:	4691      	mov	r9, r2
 8004f28:	7e27      	ldrb	r7, [r4, #24]
 8004f2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f2c:	2f78      	cmp	r7, #120	; 0x78
 8004f2e:	4680      	mov	r8, r0
 8004f30:	469a      	mov	sl, r3
 8004f32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f36:	d807      	bhi.n	8004f48 <_printf_i+0x28>
 8004f38:	2f62      	cmp	r7, #98	; 0x62
 8004f3a:	d80a      	bhi.n	8004f52 <_printf_i+0x32>
 8004f3c:	2f00      	cmp	r7, #0
 8004f3e:	f000 80d8 	beq.w	80050f2 <_printf_i+0x1d2>
 8004f42:	2f58      	cmp	r7, #88	; 0x58
 8004f44:	f000 80a3 	beq.w	800508e <_printf_i+0x16e>
 8004f48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f50:	e03a      	b.n	8004fc8 <_printf_i+0xa8>
 8004f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f56:	2b15      	cmp	r3, #21
 8004f58:	d8f6      	bhi.n	8004f48 <_printf_i+0x28>
 8004f5a:	a001      	add	r0, pc, #4	; (adr r0, 8004f60 <_printf_i+0x40>)
 8004f5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f60:	08004fb9 	.word	0x08004fb9
 8004f64:	08004fcd 	.word	0x08004fcd
 8004f68:	08004f49 	.word	0x08004f49
 8004f6c:	08004f49 	.word	0x08004f49
 8004f70:	08004f49 	.word	0x08004f49
 8004f74:	08004f49 	.word	0x08004f49
 8004f78:	08004fcd 	.word	0x08004fcd
 8004f7c:	08004f49 	.word	0x08004f49
 8004f80:	08004f49 	.word	0x08004f49
 8004f84:	08004f49 	.word	0x08004f49
 8004f88:	08004f49 	.word	0x08004f49
 8004f8c:	080050d9 	.word	0x080050d9
 8004f90:	08004ffd 	.word	0x08004ffd
 8004f94:	080050bb 	.word	0x080050bb
 8004f98:	08004f49 	.word	0x08004f49
 8004f9c:	08004f49 	.word	0x08004f49
 8004fa0:	080050fb 	.word	0x080050fb
 8004fa4:	08004f49 	.word	0x08004f49
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08004f49 	.word	0x08004f49
 8004fb0:	08004f49 	.word	0x08004f49
 8004fb4:	080050c3 	.word	0x080050c3
 8004fb8:	680b      	ldr	r3, [r1, #0]
 8004fba:	1d1a      	adds	r2, r3, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	600a      	str	r2, [r1, #0]
 8004fc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0a3      	b.n	8005114 <_printf_i+0x1f4>
 8004fcc:	6825      	ldr	r5, [r4, #0]
 8004fce:	6808      	ldr	r0, [r1, #0]
 8004fd0:	062e      	lsls	r6, r5, #24
 8004fd2:	f100 0304 	add.w	r3, r0, #4
 8004fd6:	d50a      	bpl.n	8004fee <_printf_i+0xce>
 8004fd8:	6805      	ldr	r5, [r0, #0]
 8004fda:	600b      	str	r3, [r1, #0]
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	da03      	bge.n	8004fe8 <_printf_i+0xc8>
 8004fe0:	232d      	movs	r3, #45	; 0x2d
 8004fe2:	426d      	negs	r5, r5
 8004fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe8:	485e      	ldr	r0, [pc, #376]	; (8005164 <_printf_i+0x244>)
 8004fea:	230a      	movs	r3, #10
 8004fec:	e019      	b.n	8005022 <_printf_i+0x102>
 8004fee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ff2:	6805      	ldr	r5, [r0, #0]
 8004ff4:	600b      	str	r3, [r1, #0]
 8004ff6:	bf18      	it	ne
 8004ff8:	b22d      	sxthne	r5, r5
 8004ffa:	e7ef      	b.n	8004fdc <_printf_i+0xbc>
 8004ffc:	680b      	ldr	r3, [r1, #0]
 8004ffe:	6825      	ldr	r5, [r4, #0]
 8005000:	1d18      	adds	r0, r3, #4
 8005002:	6008      	str	r0, [r1, #0]
 8005004:	0628      	lsls	r0, r5, #24
 8005006:	d501      	bpl.n	800500c <_printf_i+0xec>
 8005008:	681d      	ldr	r5, [r3, #0]
 800500a:	e002      	b.n	8005012 <_printf_i+0xf2>
 800500c:	0669      	lsls	r1, r5, #25
 800500e:	d5fb      	bpl.n	8005008 <_printf_i+0xe8>
 8005010:	881d      	ldrh	r5, [r3, #0]
 8005012:	4854      	ldr	r0, [pc, #336]	; (8005164 <_printf_i+0x244>)
 8005014:	2f6f      	cmp	r7, #111	; 0x6f
 8005016:	bf0c      	ite	eq
 8005018:	2308      	moveq	r3, #8
 800501a:	230a      	movne	r3, #10
 800501c:	2100      	movs	r1, #0
 800501e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005022:	6866      	ldr	r6, [r4, #4]
 8005024:	60a6      	str	r6, [r4, #8]
 8005026:	2e00      	cmp	r6, #0
 8005028:	bfa2      	ittt	ge
 800502a:	6821      	ldrge	r1, [r4, #0]
 800502c:	f021 0104 	bicge.w	r1, r1, #4
 8005030:	6021      	strge	r1, [r4, #0]
 8005032:	b90d      	cbnz	r5, 8005038 <_printf_i+0x118>
 8005034:	2e00      	cmp	r6, #0
 8005036:	d04d      	beq.n	80050d4 <_printf_i+0x1b4>
 8005038:	4616      	mov	r6, r2
 800503a:	fbb5 f1f3 	udiv	r1, r5, r3
 800503e:	fb03 5711 	mls	r7, r3, r1, r5
 8005042:	5dc7      	ldrb	r7, [r0, r7]
 8005044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005048:	462f      	mov	r7, r5
 800504a:	42bb      	cmp	r3, r7
 800504c:	460d      	mov	r5, r1
 800504e:	d9f4      	bls.n	800503a <_printf_i+0x11a>
 8005050:	2b08      	cmp	r3, #8
 8005052:	d10b      	bne.n	800506c <_printf_i+0x14c>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	07df      	lsls	r7, r3, #31
 8005058:	d508      	bpl.n	800506c <_printf_i+0x14c>
 800505a:	6923      	ldr	r3, [r4, #16]
 800505c:	6861      	ldr	r1, [r4, #4]
 800505e:	4299      	cmp	r1, r3
 8005060:	bfde      	ittt	le
 8005062:	2330      	movle	r3, #48	; 0x30
 8005064:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800506c:	1b92      	subs	r2, r2, r6
 800506e:	6122      	str	r2, [r4, #16]
 8005070:	f8cd a000 	str.w	sl, [sp]
 8005074:	464b      	mov	r3, r9
 8005076:	aa03      	add	r2, sp, #12
 8005078:	4621      	mov	r1, r4
 800507a:	4640      	mov	r0, r8
 800507c:	f7ff fee2 	bl	8004e44 <_printf_common>
 8005080:	3001      	adds	r0, #1
 8005082:	d14c      	bne.n	800511e <_printf_i+0x1fe>
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	b004      	add	sp, #16
 800508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508e:	4835      	ldr	r0, [pc, #212]	; (8005164 <_printf_i+0x244>)
 8005090:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	680e      	ldr	r6, [r1, #0]
 8005098:	061f      	lsls	r7, r3, #24
 800509a:	f856 5b04 	ldr.w	r5, [r6], #4
 800509e:	600e      	str	r6, [r1, #0]
 80050a0:	d514      	bpl.n	80050cc <_printf_i+0x1ac>
 80050a2:	07d9      	lsls	r1, r3, #31
 80050a4:	bf44      	itt	mi
 80050a6:	f043 0320 	orrmi.w	r3, r3, #32
 80050aa:	6023      	strmi	r3, [r4, #0]
 80050ac:	b91d      	cbnz	r5, 80050b6 <_printf_i+0x196>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	f023 0320 	bic.w	r3, r3, #32
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	2310      	movs	r3, #16
 80050b8:	e7b0      	b.n	800501c <_printf_i+0xfc>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	f043 0320 	orr.w	r3, r3, #32
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	2378      	movs	r3, #120	; 0x78
 80050c4:	4828      	ldr	r0, [pc, #160]	; (8005168 <_printf_i+0x248>)
 80050c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050ca:	e7e3      	b.n	8005094 <_printf_i+0x174>
 80050cc:	065e      	lsls	r6, r3, #25
 80050ce:	bf48      	it	mi
 80050d0:	b2ad      	uxthmi	r5, r5
 80050d2:	e7e6      	b.n	80050a2 <_printf_i+0x182>
 80050d4:	4616      	mov	r6, r2
 80050d6:	e7bb      	b.n	8005050 <_printf_i+0x130>
 80050d8:	680b      	ldr	r3, [r1, #0]
 80050da:	6826      	ldr	r6, [r4, #0]
 80050dc:	6960      	ldr	r0, [r4, #20]
 80050de:	1d1d      	adds	r5, r3, #4
 80050e0:	600d      	str	r5, [r1, #0]
 80050e2:	0635      	lsls	r5, r6, #24
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	d501      	bpl.n	80050ec <_printf_i+0x1cc>
 80050e8:	6018      	str	r0, [r3, #0]
 80050ea:	e002      	b.n	80050f2 <_printf_i+0x1d2>
 80050ec:	0671      	lsls	r1, r6, #25
 80050ee:	d5fb      	bpl.n	80050e8 <_printf_i+0x1c8>
 80050f0:	8018      	strh	r0, [r3, #0]
 80050f2:	2300      	movs	r3, #0
 80050f4:	6123      	str	r3, [r4, #16]
 80050f6:	4616      	mov	r6, r2
 80050f8:	e7ba      	b.n	8005070 <_printf_i+0x150>
 80050fa:	680b      	ldr	r3, [r1, #0]
 80050fc:	1d1a      	adds	r2, r3, #4
 80050fe:	600a      	str	r2, [r1, #0]
 8005100:	681e      	ldr	r6, [r3, #0]
 8005102:	6862      	ldr	r2, [r4, #4]
 8005104:	2100      	movs	r1, #0
 8005106:	4630      	mov	r0, r6
 8005108:	f7fb f872 	bl	80001f0 <memchr>
 800510c:	b108      	cbz	r0, 8005112 <_printf_i+0x1f2>
 800510e:	1b80      	subs	r0, r0, r6
 8005110:	6060      	str	r0, [r4, #4]
 8005112:	6863      	ldr	r3, [r4, #4]
 8005114:	6123      	str	r3, [r4, #16]
 8005116:	2300      	movs	r3, #0
 8005118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800511c:	e7a8      	b.n	8005070 <_printf_i+0x150>
 800511e:	6923      	ldr	r3, [r4, #16]
 8005120:	4632      	mov	r2, r6
 8005122:	4649      	mov	r1, r9
 8005124:	4640      	mov	r0, r8
 8005126:	47d0      	blx	sl
 8005128:	3001      	adds	r0, #1
 800512a:	d0ab      	beq.n	8005084 <_printf_i+0x164>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	079b      	lsls	r3, r3, #30
 8005130:	d413      	bmi.n	800515a <_printf_i+0x23a>
 8005132:	68e0      	ldr	r0, [r4, #12]
 8005134:	9b03      	ldr	r3, [sp, #12]
 8005136:	4298      	cmp	r0, r3
 8005138:	bfb8      	it	lt
 800513a:	4618      	movlt	r0, r3
 800513c:	e7a4      	b.n	8005088 <_printf_i+0x168>
 800513e:	2301      	movs	r3, #1
 8005140:	4632      	mov	r2, r6
 8005142:	4649      	mov	r1, r9
 8005144:	4640      	mov	r0, r8
 8005146:	47d0      	blx	sl
 8005148:	3001      	adds	r0, #1
 800514a:	d09b      	beq.n	8005084 <_printf_i+0x164>
 800514c:	3501      	adds	r5, #1
 800514e:	68e3      	ldr	r3, [r4, #12]
 8005150:	9903      	ldr	r1, [sp, #12]
 8005152:	1a5b      	subs	r3, r3, r1
 8005154:	42ab      	cmp	r3, r5
 8005156:	dcf2      	bgt.n	800513e <_printf_i+0x21e>
 8005158:	e7eb      	b.n	8005132 <_printf_i+0x212>
 800515a:	2500      	movs	r5, #0
 800515c:	f104 0619 	add.w	r6, r4, #25
 8005160:	e7f5      	b.n	800514e <_printf_i+0x22e>
 8005162:	bf00      	nop
 8005164:	0800762e 	.word	0x0800762e
 8005168:	0800763f 	.word	0x0800763f

0800516c <siprintf>:
 800516c:	b40e      	push	{r1, r2, r3}
 800516e:	b500      	push	{lr}
 8005170:	b09c      	sub	sp, #112	; 0x70
 8005172:	ab1d      	add	r3, sp, #116	; 0x74
 8005174:	9002      	str	r0, [sp, #8]
 8005176:	9006      	str	r0, [sp, #24]
 8005178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800517c:	4809      	ldr	r0, [pc, #36]	; (80051a4 <siprintf+0x38>)
 800517e:	9107      	str	r1, [sp, #28]
 8005180:	9104      	str	r1, [sp, #16]
 8005182:	4909      	ldr	r1, [pc, #36]	; (80051a8 <siprintf+0x3c>)
 8005184:	f853 2b04 	ldr.w	r2, [r3], #4
 8005188:	9105      	str	r1, [sp, #20]
 800518a:	6800      	ldr	r0, [r0, #0]
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	a902      	add	r1, sp, #8
 8005190:	f001 fb34 	bl	80067fc <_svfiprintf_r>
 8005194:	9b02      	ldr	r3, [sp, #8]
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	b01c      	add	sp, #112	; 0x70
 800519c:	f85d eb04 	ldr.w	lr, [sp], #4
 80051a0:	b003      	add	sp, #12
 80051a2:	4770      	bx	lr
 80051a4:	20000010 	.word	0x20000010
 80051a8:	ffff0208 	.word	0xffff0208

080051ac <quorem>:
 80051ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	6903      	ldr	r3, [r0, #16]
 80051b2:	690c      	ldr	r4, [r1, #16]
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	4607      	mov	r7, r0
 80051b8:	f2c0 8081 	blt.w	80052be <quorem+0x112>
 80051bc:	3c01      	subs	r4, #1
 80051be:	f101 0814 	add.w	r8, r1, #20
 80051c2:	f100 0514 	add.w	r5, r0, #20
 80051c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051d4:	3301      	adds	r3, #1
 80051d6:	429a      	cmp	r2, r3
 80051d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80051e4:	d331      	bcc.n	800524a <quorem+0x9e>
 80051e6:	f04f 0e00 	mov.w	lr, #0
 80051ea:	4640      	mov	r0, r8
 80051ec:	46ac      	mov	ip, r5
 80051ee:	46f2      	mov	sl, lr
 80051f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80051f4:	b293      	uxth	r3, r2
 80051f6:	fb06 e303 	mla	r3, r6, r3, lr
 80051fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051fe:	b29b      	uxth	r3, r3
 8005200:	ebaa 0303 	sub.w	r3, sl, r3
 8005204:	0c12      	lsrs	r2, r2, #16
 8005206:	f8dc a000 	ldr.w	sl, [ip]
 800520a:	fb06 e202 	mla	r2, r6, r2, lr
 800520e:	fa13 f38a 	uxtah	r3, r3, sl
 8005212:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005216:	fa1f fa82 	uxth.w	sl, r2
 800521a:	f8dc 2000 	ldr.w	r2, [ip]
 800521e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005222:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005226:	b29b      	uxth	r3, r3
 8005228:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800522c:	4581      	cmp	r9, r0
 800522e:	f84c 3b04 	str.w	r3, [ip], #4
 8005232:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005236:	d2db      	bcs.n	80051f0 <quorem+0x44>
 8005238:	f855 300b 	ldr.w	r3, [r5, fp]
 800523c:	b92b      	cbnz	r3, 800524a <quorem+0x9e>
 800523e:	9b01      	ldr	r3, [sp, #4]
 8005240:	3b04      	subs	r3, #4
 8005242:	429d      	cmp	r5, r3
 8005244:	461a      	mov	r2, r3
 8005246:	d32e      	bcc.n	80052a6 <quorem+0xfa>
 8005248:	613c      	str	r4, [r7, #16]
 800524a:	4638      	mov	r0, r7
 800524c:	f001 f8c0 	bl	80063d0 <__mcmp>
 8005250:	2800      	cmp	r0, #0
 8005252:	db24      	blt.n	800529e <quorem+0xf2>
 8005254:	3601      	adds	r6, #1
 8005256:	4628      	mov	r0, r5
 8005258:	f04f 0c00 	mov.w	ip, #0
 800525c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005260:	f8d0 e000 	ldr.w	lr, [r0]
 8005264:	b293      	uxth	r3, r2
 8005266:	ebac 0303 	sub.w	r3, ip, r3
 800526a:	0c12      	lsrs	r2, r2, #16
 800526c:	fa13 f38e 	uxtah	r3, r3, lr
 8005270:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005278:	b29b      	uxth	r3, r3
 800527a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800527e:	45c1      	cmp	r9, r8
 8005280:	f840 3b04 	str.w	r3, [r0], #4
 8005284:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005288:	d2e8      	bcs.n	800525c <quorem+0xb0>
 800528a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800528e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005292:	b922      	cbnz	r2, 800529e <quorem+0xf2>
 8005294:	3b04      	subs	r3, #4
 8005296:	429d      	cmp	r5, r3
 8005298:	461a      	mov	r2, r3
 800529a:	d30a      	bcc.n	80052b2 <quorem+0x106>
 800529c:	613c      	str	r4, [r7, #16]
 800529e:	4630      	mov	r0, r6
 80052a0:	b003      	add	sp, #12
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	6812      	ldr	r2, [r2, #0]
 80052a8:	3b04      	subs	r3, #4
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	d1cc      	bne.n	8005248 <quorem+0x9c>
 80052ae:	3c01      	subs	r4, #1
 80052b0:	e7c7      	b.n	8005242 <quorem+0x96>
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	3b04      	subs	r3, #4
 80052b6:	2a00      	cmp	r2, #0
 80052b8:	d1f0      	bne.n	800529c <quorem+0xf0>
 80052ba:	3c01      	subs	r4, #1
 80052bc:	e7eb      	b.n	8005296 <quorem+0xea>
 80052be:	2000      	movs	r0, #0
 80052c0:	e7ee      	b.n	80052a0 <quorem+0xf4>
 80052c2:	0000      	movs	r0, r0
 80052c4:	0000      	movs	r0, r0
	...

080052c8 <_dtoa_r>:
 80052c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052cc:	ed2d 8b02 	vpush	{d8}
 80052d0:	ec57 6b10 	vmov	r6, r7, d0
 80052d4:	b095      	sub	sp, #84	; 0x54
 80052d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80052d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052dc:	9105      	str	r1, [sp, #20]
 80052de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80052e2:	4604      	mov	r4, r0
 80052e4:	9209      	str	r2, [sp, #36]	; 0x24
 80052e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80052e8:	b975      	cbnz	r5, 8005308 <_dtoa_r+0x40>
 80052ea:	2010      	movs	r0, #16
 80052ec:	f000 fddc 	bl	8005ea8 <malloc>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6260      	str	r0, [r4, #36]	; 0x24
 80052f4:	b920      	cbnz	r0, 8005300 <_dtoa_r+0x38>
 80052f6:	4bb2      	ldr	r3, [pc, #712]	; (80055c0 <_dtoa_r+0x2f8>)
 80052f8:	21ea      	movs	r1, #234	; 0xea
 80052fa:	48b2      	ldr	r0, [pc, #712]	; (80055c4 <_dtoa_r+0x2fc>)
 80052fc:	f001 fb8e 	bl	8006a1c <__assert_func>
 8005300:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005304:	6005      	str	r5, [r0, #0]
 8005306:	60c5      	str	r5, [r0, #12]
 8005308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800530a:	6819      	ldr	r1, [r3, #0]
 800530c:	b151      	cbz	r1, 8005324 <_dtoa_r+0x5c>
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	604a      	str	r2, [r1, #4]
 8005312:	2301      	movs	r3, #1
 8005314:	4093      	lsls	r3, r2
 8005316:	608b      	str	r3, [r1, #8]
 8005318:	4620      	mov	r0, r4
 800531a:	f000 fe1b 	bl	8005f54 <_Bfree>
 800531e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	1e3b      	subs	r3, r7, #0
 8005326:	bfb9      	ittee	lt
 8005328:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800532c:	9303      	strlt	r3, [sp, #12]
 800532e:	2300      	movge	r3, #0
 8005330:	f8c8 3000 	strge.w	r3, [r8]
 8005334:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005338:	4ba3      	ldr	r3, [pc, #652]	; (80055c8 <_dtoa_r+0x300>)
 800533a:	bfbc      	itt	lt
 800533c:	2201      	movlt	r2, #1
 800533e:	f8c8 2000 	strlt.w	r2, [r8]
 8005342:	ea33 0309 	bics.w	r3, r3, r9
 8005346:	d11b      	bne.n	8005380 <_dtoa_r+0xb8>
 8005348:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800534a:	f242 730f 	movw	r3, #9999	; 0x270f
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005354:	4333      	orrs	r3, r6
 8005356:	f000 857a 	beq.w	8005e4e <_dtoa_r+0xb86>
 800535a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800535c:	b963      	cbnz	r3, 8005378 <_dtoa_r+0xb0>
 800535e:	4b9b      	ldr	r3, [pc, #620]	; (80055cc <_dtoa_r+0x304>)
 8005360:	e024      	b.n	80053ac <_dtoa_r+0xe4>
 8005362:	4b9b      	ldr	r3, [pc, #620]	; (80055d0 <_dtoa_r+0x308>)
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	9800      	ldr	r0, [sp, #0]
 800536e:	b015      	add	sp, #84	; 0x54
 8005370:	ecbd 8b02 	vpop	{d8}
 8005374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005378:	4b94      	ldr	r3, [pc, #592]	; (80055cc <_dtoa_r+0x304>)
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	3303      	adds	r3, #3
 800537e:	e7f3      	b.n	8005368 <_dtoa_r+0xa0>
 8005380:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005384:	2200      	movs	r2, #0
 8005386:	ec51 0b17 	vmov	r0, r1, d7
 800538a:	2300      	movs	r3, #0
 800538c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005390:	f7fb fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005394:	4680      	mov	r8, r0
 8005396:	b158      	cbz	r0, 80053b0 <_dtoa_r+0xe8>
 8005398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800539a:	2301      	movs	r3, #1
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8551 	beq.w	8005e48 <_dtoa_r+0xb80>
 80053a6:	488b      	ldr	r0, [pc, #556]	; (80055d4 <_dtoa_r+0x30c>)
 80053a8:	6018      	str	r0, [r3, #0]
 80053aa:	1e43      	subs	r3, r0, #1
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	e7dd      	b.n	800536c <_dtoa_r+0xa4>
 80053b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80053b4:	aa12      	add	r2, sp, #72	; 0x48
 80053b6:	a913      	add	r1, sp, #76	; 0x4c
 80053b8:	4620      	mov	r0, r4
 80053ba:	f001 f8ad 	bl	8006518 <__d2b>
 80053be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80053c2:	4683      	mov	fp, r0
 80053c4:	2d00      	cmp	r5, #0
 80053c6:	d07c      	beq.n	80054c2 <_dtoa_r+0x1fa>
 80053c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80053ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80053d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80053da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80053de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053e2:	4b7d      	ldr	r3, [pc, #500]	; (80055d8 <_dtoa_r+0x310>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	4630      	mov	r0, r6
 80053e8:	4639      	mov	r1, r7
 80053ea:	f7fa ff55 	bl	8000298 <__aeabi_dsub>
 80053ee:	a36e      	add	r3, pc, #440	; (adr r3, 80055a8 <_dtoa_r+0x2e0>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f7fb f908 	bl	8000608 <__aeabi_dmul>
 80053f8:	a36d      	add	r3, pc, #436	; (adr r3, 80055b0 <_dtoa_r+0x2e8>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	f7fa ff4d 	bl	800029c <__adddf3>
 8005402:	4606      	mov	r6, r0
 8005404:	4628      	mov	r0, r5
 8005406:	460f      	mov	r7, r1
 8005408:	f7fb f894 	bl	8000534 <__aeabi_i2d>
 800540c:	a36a      	add	r3, pc, #424	; (adr r3, 80055b8 <_dtoa_r+0x2f0>)
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f7fb f8f9 	bl	8000608 <__aeabi_dmul>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4630      	mov	r0, r6
 800541c:	4639      	mov	r1, r7
 800541e:	f7fa ff3d 	bl	800029c <__adddf3>
 8005422:	4606      	mov	r6, r0
 8005424:	460f      	mov	r7, r1
 8005426:	f7fb fb9f 	bl	8000b68 <__aeabi_d2iz>
 800542a:	2200      	movs	r2, #0
 800542c:	4682      	mov	sl, r0
 800542e:	2300      	movs	r3, #0
 8005430:	4630      	mov	r0, r6
 8005432:	4639      	mov	r1, r7
 8005434:	f7fb fb5a 	bl	8000aec <__aeabi_dcmplt>
 8005438:	b148      	cbz	r0, 800544e <_dtoa_r+0x186>
 800543a:	4650      	mov	r0, sl
 800543c:	f7fb f87a 	bl	8000534 <__aeabi_i2d>
 8005440:	4632      	mov	r2, r6
 8005442:	463b      	mov	r3, r7
 8005444:	f7fb fb48 	bl	8000ad8 <__aeabi_dcmpeq>
 8005448:	b908      	cbnz	r0, 800544e <_dtoa_r+0x186>
 800544a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800544e:	f1ba 0f16 	cmp.w	sl, #22
 8005452:	d854      	bhi.n	80054fe <_dtoa_r+0x236>
 8005454:	4b61      	ldr	r3, [pc, #388]	; (80055dc <_dtoa_r+0x314>)
 8005456:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005462:	f7fb fb43 	bl	8000aec <__aeabi_dcmplt>
 8005466:	2800      	cmp	r0, #0
 8005468:	d04b      	beq.n	8005502 <_dtoa_r+0x23a>
 800546a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800546e:	2300      	movs	r3, #0
 8005470:	930e      	str	r3, [sp, #56]	; 0x38
 8005472:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005474:	1b5d      	subs	r5, r3, r5
 8005476:	1e6b      	subs	r3, r5, #1
 8005478:	9304      	str	r3, [sp, #16]
 800547a:	bf43      	ittte	mi
 800547c:	2300      	movmi	r3, #0
 800547e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005482:	9304      	strmi	r3, [sp, #16]
 8005484:	f04f 0800 	movpl.w	r8, #0
 8005488:	f1ba 0f00 	cmp.w	sl, #0
 800548c:	db3b      	blt.n	8005506 <_dtoa_r+0x23e>
 800548e:	9b04      	ldr	r3, [sp, #16]
 8005490:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005494:	4453      	add	r3, sl
 8005496:	9304      	str	r3, [sp, #16]
 8005498:	2300      	movs	r3, #0
 800549a:	9306      	str	r3, [sp, #24]
 800549c:	9b05      	ldr	r3, [sp, #20]
 800549e:	2b09      	cmp	r3, #9
 80054a0:	d869      	bhi.n	8005576 <_dtoa_r+0x2ae>
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	bfc4      	itt	gt
 80054a6:	3b04      	subgt	r3, #4
 80054a8:	9305      	strgt	r3, [sp, #20]
 80054aa:	9b05      	ldr	r3, [sp, #20]
 80054ac:	f1a3 0302 	sub.w	r3, r3, #2
 80054b0:	bfcc      	ite	gt
 80054b2:	2500      	movgt	r5, #0
 80054b4:	2501      	movle	r5, #1
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d869      	bhi.n	800558e <_dtoa_r+0x2c6>
 80054ba:	e8df f003 	tbb	[pc, r3]
 80054be:	4e2c      	.short	0x4e2c
 80054c0:	5a4c      	.short	0x5a4c
 80054c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80054c6:	441d      	add	r5, r3
 80054c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	bfc1      	itttt	gt
 80054d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80054d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80054dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054e0:	bfda      	itte	le
 80054e2:	f1c3 0320 	rsble	r3, r3, #32
 80054e6:	fa06 f003 	lslle.w	r0, r6, r3
 80054ea:	4318      	orrgt	r0, r3
 80054ec:	f7fb f812 	bl	8000514 <__aeabi_ui2d>
 80054f0:	2301      	movs	r3, #1
 80054f2:	4606      	mov	r6, r0
 80054f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80054f8:	3d01      	subs	r5, #1
 80054fa:	9310      	str	r3, [sp, #64]	; 0x40
 80054fc:	e771      	b.n	80053e2 <_dtoa_r+0x11a>
 80054fe:	2301      	movs	r3, #1
 8005500:	e7b6      	b.n	8005470 <_dtoa_r+0x1a8>
 8005502:	900e      	str	r0, [sp, #56]	; 0x38
 8005504:	e7b5      	b.n	8005472 <_dtoa_r+0x1aa>
 8005506:	f1ca 0300 	rsb	r3, sl, #0
 800550a:	9306      	str	r3, [sp, #24]
 800550c:	2300      	movs	r3, #0
 800550e:	eba8 080a 	sub.w	r8, r8, sl
 8005512:	930d      	str	r3, [sp, #52]	; 0x34
 8005514:	e7c2      	b.n	800549c <_dtoa_r+0x1d4>
 8005516:	2300      	movs	r3, #0
 8005518:	9308      	str	r3, [sp, #32]
 800551a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	dc39      	bgt.n	8005594 <_dtoa_r+0x2cc>
 8005520:	f04f 0901 	mov.w	r9, #1
 8005524:	f8cd 9004 	str.w	r9, [sp, #4]
 8005528:	464b      	mov	r3, r9
 800552a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800552e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005530:	2200      	movs	r2, #0
 8005532:	6042      	str	r2, [r0, #4]
 8005534:	2204      	movs	r2, #4
 8005536:	f102 0614 	add.w	r6, r2, #20
 800553a:	429e      	cmp	r6, r3
 800553c:	6841      	ldr	r1, [r0, #4]
 800553e:	d92f      	bls.n	80055a0 <_dtoa_r+0x2d8>
 8005540:	4620      	mov	r0, r4
 8005542:	f000 fcc7 	bl	8005ed4 <_Balloc>
 8005546:	9000      	str	r0, [sp, #0]
 8005548:	2800      	cmp	r0, #0
 800554a:	d14b      	bne.n	80055e4 <_dtoa_r+0x31c>
 800554c:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <_dtoa_r+0x318>)
 800554e:	4602      	mov	r2, r0
 8005550:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005554:	e6d1      	b.n	80052fa <_dtoa_r+0x32>
 8005556:	2301      	movs	r3, #1
 8005558:	e7de      	b.n	8005518 <_dtoa_r+0x250>
 800555a:	2300      	movs	r3, #0
 800555c:	9308      	str	r3, [sp, #32]
 800555e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005560:	eb0a 0903 	add.w	r9, sl, r3
 8005564:	f109 0301 	add.w	r3, r9, #1
 8005568:	2b01      	cmp	r3, #1
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	bfb8      	it	lt
 800556e:	2301      	movlt	r3, #1
 8005570:	e7dd      	b.n	800552e <_dtoa_r+0x266>
 8005572:	2301      	movs	r3, #1
 8005574:	e7f2      	b.n	800555c <_dtoa_r+0x294>
 8005576:	2501      	movs	r5, #1
 8005578:	2300      	movs	r3, #0
 800557a:	9305      	str	r3, [sp, #20]
 800557c:	9508      	str	r5, [sp, #32]
 800557e:	f04f 39ff 	mov.w	r9, #4294967295
 8005582:	2200      	movs	r2, #0
 8005584:	f8cd 9004 	str.w	r9, [sp, #4]
 8005588:	2312      	movs	r3, #18
 800558a:	9209      	str	r2, [sp, #36]	; 0x24
 800558c:	e7cf      	b.n	800552e <_dtoa_r+0x266>
 800558e:	2301      	movs	r3, #1
 8005590:	9308      	str	r3, [sp, #32]
 8005592:	e7f4      	b.n	800557e <_dtoa_r+0x2b6>
 8005594:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005598:	f8cd 9004 	str.w	r9, [sp, #4]
 800559c:	464b      	mov	r3, r9
 800559e:	e7c6      	b.n	800552e <_dtoa_r+0x266>
 80055a0:	3101      	adds	r1, #1
 80055a2:	6041      	str	r1, [r0, #4]
 80055a4:	0052      	lsls	r2, r2, #1
 80055a6:	e7c6      	b.n	8005536 <_dtoa_r+0x26e>
 80055a8:	636f4361 	.word	0x636f4361
 80055ac:	3fd287a7 	.word	0x3fd287a7
 80055b0:	8b60c8b3 	.word	0x8b60c8b3
 80055b4:	3fc68a28 	.word	0x3fc68a28
 80055b8:	509f79fb 	.word	0x509f79fb
 80055bc:	3fd34413 	.word	0x3fd34413
 80055c0:	0800765d 	.word	0x0800765d
 80055c4:	08007674 	.word	0x08007674
 80055c8:	7ff00000 	.word	0x7ff00000
 80055cc:	08007659 	.word	0x08007659
 80055d0:	08007650 	.word	0x08007650
 80055d4:	0800762d 	.word	0x0800762d
 80055d8:	3ff80000 	.word	0x3ff80000
 80055dc:	08007770 	.word	0x08007770
 80055e0:	080076d3 	.word	0x080076d3
 80055e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055e6:	9a00      	ldr	r2, [sp, #0]
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	9b01      	ldr	r3, [sp, #4]
 80055ec:	2b0e      	cmp	r3, #14
 80055ee:	f200 80ad 	bhi.w	800574c <_dtoa_r+0x484>
 80055f2:	2d00      	cmp	r5, #0
 80055f4:	f000 80aa 	beq.w	800574c <_dtoa_r+0x484>
 80055f8:	f1ba 0f00 	cmp.w	sl, #0
 80055fc:	dd36      	ble.n	800566c <_dtoa_r+0x3a4>
 80055fe:	4ac3      	ldr	r2, [pc, #780]	; (800590c <_dtoa_r+0x644>)
 8005600:	f00a 030f 	and.w	r3, sl, #15
 8005604:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005608:	ed93 7b00 	vldr	d7, [r3]
 800560c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005610:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005614:	eeb0 8a47 	vmov.f32	s16, s14
 8005618:	eef0 8a67 	vmov.f32	s17, s15
 800561c:	d016      	beq.n	800564c <_dtoa_r+0x384>
 800561e:	4bbc      	ldr	r3, [pc, #752]	; (8005910 <_dtoa_r+0x648>)
 8005620:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005628:	f7fb f918 	bl	800085c <__aeabi_ddiv>
 800562c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005630:	f007 070f 	and.w	r7, r7, #15
 8005634:	2503      	movs	r5, #3
 8005636:	4eb6      	ldr	r6, [pc, #728]	; (8005910 <_dtoa_r+0x648>)
 8005638:	b957      	cbnz	r7, 8005650 <_dtoa_r+0x388>
 800563a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800563e:	ec53 2b18 	vmov	r2, r3, d8
 8005642:	f7fb f90b 	bl	800085c <__aeabi_ddiv>
 8005646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800564a:	e029      	b.n	80056a0 <_dtoa_r+0x3d8>
 800564c:	2502      	movs	r5, #2
 800564e:	e7f2      	b.n	8005636 <_dtoa_r+0x36e>
 8005650:	07f9      	lsls	r1, r7, #31
 8005652:	d508      	bpl.n	8005666 <_dtoa_r+0x39e>
 8005654:	ec51 0b18 	vmov	r0, r1, d8
 8005658:	e9d6 2300 	ldrd	r2, r3, [r6]
 800565c:	f7fa ffd4 	bl	8000608 <__aeabi_dmul>
 8005660:	ec41 0b18 	vmov	d8, r0, r1
 8005664:	3501      	adds	r5, #1
 8005666:	107f      	asrs	r7, r7, #1
 8005668:	3608      	adds	r6, #8
 800566a:	e7e5      	b.n	8005638 <_dtoa_r+0x370>
 800566c:	f000 80a6 	beq.w	80057bc <_dtoa_r+0x4f4>
 8005670:	f1ca 0600 	rsb	r6, sl, #0
 8005674:	4ba5      	ldr	r3, [pc, #660]	; (800590c <_dtoa_r+0x644>)
 8005676:	4fa6      	ldr	r7, [pc, #664]	; (8005910 <_dtoa_r+0x648>)
 8005678:	f006 020f 	and.w	r2, r6, #15
 800567c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005688:	f7fa ffbe 	bl	8000608 <__aeabi_dmul>
 800568c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005690:	1136      	asrs	r6, r6, #4
 8005692:	2300      	movs	r3, #0
 8005694:	2502      	movs	r5, #2
 8005696:	2e00      	cmp	r6, #0
 8005698:	f040 8085 	bne.w	80057a6 <_dtoa_r+0x4de>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1d2      	bne.n	8005646 <_dtoa_r+0x37e>
 80056a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 808c 	beq.w	80057c0 <_dtoa_r+0x4f8>
 80056a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056ac:	4b99      	ldr	r3, [pc, #612]	; (8005914 <_dtoa_r+0x64c>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	4630      	mov	r0, r6
 80056b2:	4639      	mov	r1, r7
 80056b4:	f7fb fa1a 	bl	8000aec <__aeabi_dcmplt>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	f000 8081 	beq.w	80057c0 <_dtoa_r+0x4f8>
 80056be:	9b01      	ldr	r3, [sp, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d07d      	beq.n	80057c0 <_dtoa_r+0x4f8>
 80056c4:	f1b9 0f00 	cmp.w	r9, #0
 80056c8:	dd3c      	ble.n	8005744 <_dtoa_r+0x47c>
 80056ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80056ce:	9307      	str	r3, [sp, #28]
 80056d0:	2200      	movs	r2, #0
 80056d2:	4b91      	ldr	r3, [pc, #580]	; (8005918 <_dtoa_r+0x650>)
 80056d4:	4630      	mov	r0, r6
 80056d6:	4639      	mov	r1, r7
 80056d8:	f7fa ff96 	bl	8000608 <__aeabi_dmul>
 80056dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056e0:	3501      	adds	r5, #1
 80056e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80056e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056ea:	4628      	mov	r0, r5
 80056ec:	f7fa ff22 	bl	8000534 <__aeabi_i2d>
 80056f0:	4632      	mov	r2, r6
 80056f2:	463b      	mov	r3, r7
 80056f4:	f7fa ff88 	bl	8000608 <__aeabi_dmul>
 80056f8:	4b88      	ldr	r3, [pc, #544]	; (800591c <_dtoa_r+0x654>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	f7fa fdce 	bl	800029c <__adddf3>
 8005700:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005708:	9303      	str	r3, [sp, #12]
 800570a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800570c:	2b00      	cmp	r3, #0
 800570e:	d15c      	bne.n	80057ca <_dtoa_r+0x502>
 8005710:	4b83      	ldr	r3, [pc, #524]	; (8005920 <_dtoa_r+0x658>)
 8005712:	2200      	movs	r2, #0
 8005714:	4630      	mov	r0, r6
 8005716:	4639      	mov	r1, r7
 8005718:	f7fa fdbe 	bl	8000298 <__aeabi_dsub>
 800571c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005720:	4606      	mov	r6, r0
 8005722:	460f      	mov	r7, r1
 8005724:	f7fb fa00 	bl	8000b28 <__aeabi_dcmpgt>
 8005728:	2800      	cmp	r0, #0
 800572a:	f040 8296 	bne.w	8005c5a <_dtoa_r+0x992>
 800572e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005732:	4630      	mov	r0, r6
 8005734:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005738:	4639      	mov	r1, r7
 800573a:	f7fb f9d7 	bl	8000aec <__aeabi_dcmplt>
 800573e:	2800      	cmp	r0, #0
 8005740:	f040 8288 	bne.w	8005c54 <_dtoa_r+0x98c>
 8005744:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005748:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800574c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800574e:	2b00      	cmp	r3, #0
 8005750:	f2c0 8158 	blt.w	8005a04 <_dtoa_r+0x73c>
 8005754:	f1ba 0f0e 	cmp.w	sl, #14
 8005758:	f300 8154 	bgt.w	8005a04 <_dtoa_r+0x73c>
 800575c:	4b6b      	ldr	r3, [pc, #428]	; (800590c <_dtoa_r+0x644>)
 800575e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005762:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	f280 80e3 	bge.w	8005934 <_dtoa_r+0x66c>
 800576e:	9b01      	ldr	r3, [sp, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f300 80df 	bgt.w	8005934 <_dtoa_r+0x66c>
 8005776:	f040 826d 	bne.w	8005c54 <_dtoa_r+0x98c>
 800577a:	4b69      	ldr	r3, [pc, #420]	; (8005920 <_dtoa_r+0x658>)
 800577c:	2200      	movs	r2, #0
 800577e:	4640      	mov	r0, r8
 8005780:	4649      	mov	r1, r9
 8005782:	f7fa ff41 	bl	8000608 <__aeabi_dmul>
 8005786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800578a:	f7fb f9c3 	bl	8000b14 <__aeabi_dcmpge>
 800578e:	9e01      	ldr	r6, [sp, #4]
 8005790:	4637      	mov	r7, r6
 8005792:	2800      	cmp	r0, #0
 8005794:	f040 8243 	bne.w	8005c1e <_dtoa_r+0x956>
 8005798:	9d00      	ldr	r5, [sp, #0]
 800579a:	2331      	movs	r3, #49	; 0x31
 800579c:	f805 3b01 	strb.w	r3, [r5], #1
 80057a0:	f10a 0a01 	add.w	sl, sl, #1
 80057a4:	e23f      	b.n	8005c26 <_dtoa_r+0x95e>
 80057a6:	07f2      	lsls	r2, r6, #31
 80057a8:	d505      	bpl.n	80057b6 <_dtoa_r+0x4ee>
 80057aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ae:	f7fa ff2b 	bl	8000608 <__aeabi_dmul>
 80057b2:	3501      	adds	r5, #1
 80057b4:	2301      	movs	r3, #1
 80057b6:	1076      	asrs	r6, r6, #1
 80057b8:	3708      	adds	r7, #8
 80057ba:	e76c      	b.n	8005696 <_dtoa_r+0x3ce>
 80057bc:	2502      	movs	r5, #2
 80057be:	e76f      	b.n	80056a0 <_dtoa_r+0x3d8>
 80057c0:	9b01      	ldr	r3, [sp, #4]
 80057c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80057c6:	930c      	str	r3, [sp, #48]	; 0x30
 80057c8:	e78d      	b.n	80056e6 <_dtoa_r+0x41e>
 80057ca:	9900      	ldr	r1, [sp, #0]
 80057cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80057ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057d0:	4b4e      	ldr	r3, [pc, #312]	; (800590c <_dtoa_r+0x644>)
 80057d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057d6:	4401      	add	r1, r0
 80057d8:	9102      	str	r1, [sp, #8]
 80057da:	9908      	ldr	r1, [sp, #32]
 80057dc:	eeb0 8a47 	vmov.f32	s16, s14
 80057e0:	eef0 8a67 	vmov.f32	s17, s15
 80057e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057ec:	2900      	cmp	r1, #0
 80057ee:	d045      	beq.n	800587c <_dtoa_r+0x5b4>
 80057f0:	494c      	ldr	r1, [pc, #304]	; (8005924 <_dtoa_r+0x65c>)
 80057f2:	2000      	movs	r0, #0
 80057f4:	f7fb f832 	bl	800085c <__aeabi_ddiv>
 80057f8:	ec53 2b18 	vmov	r2, r3, d8
 80057fc:	f7fa fd4c 	bl	8000298 <__aeabi_dsub>
 8005800:	9d00      	ldr	r5, [sp, #0]
 8005802:	ec41 0b18 	vmov	d8, r0, r1
 8005806:	4639      	mov	r1, r7
 8005808:	4630      	mov	r0, r6
 800580a:	f7fb f9ad 	bl	8000b68 <__aeabi_d2iz>
 800580e:	900c      	str	r0, [sp, #48]	; 0x30
 8005810:	f7fa fe90 	bl	8000534 <__aeabi_i2d>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f7fa fd3c 	bl	8000298 <__aeabi_dsub>
 8005820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005822:	3330      	adds	r3, #48	; 0x30
 8005824:	f805 3b01 	strb.w	r3, [r5], #1
 8005828:	ec53 2b18 	vmov	r2, r3, d8
 800582c:	4606      	mov	r6, r0
 800582e:	460f      	mov	r7, r1
 8005830:	f7fb f95c 	bl	8000aec <__aeabi_dcmplt>
 8005834:	2800      	cmp	r0, #0
 8005836:	d165      	bne.n	8005904 <_dtoa_r+0x63c>
 8005838:	4632      	mov	r2, r6
 800583a:	463b      	mov	r3, r7
 800583c:	4935      	ldr	r1, [pc, #212]	; (8005914 <_dtoa_r+0x64c>)
 800583e:	2000      	movs	r0, #0
 8005840:	f7fa fd2a 	bl	8000298 <__aeabi_dsub>
 8005844:	ec53 2b18 	vmov	r2, r3, d8
 8005848:	f7fb f950 	bl	8000aec <__aeabi_dcmplt>
 800584c:	2800      	cmp	r0, #0
 800584e:	f040 80b9 	bne.w	80059c4 <_dtoa_r+0x6fc>
 8005852:	9b02      	ldr	r3, [sp, #8]
 8005854:	429d      	cmp	r5, r3
 8005856:	f43f af75 	beq.w	8005744 <_dtoa_r+0x47c>
 800585a:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <_dtoa_r+0x650>)
 800585c:	ec51 0b18 	vmov	r0, r1, d8
 8005860:	2200      	movs	r2, #0
 8005862:	f7fa fed1 	bl	8000608 <__aeabi_dmul>
 8005866:	4b2c      	ldr	r3, [pc, #176]	; (8005918 <_dtoa_r+0x650>)
 8005868:	ec41 0b18 	vmov	d8, r0, r1
 800586c:	2200      	movs	r2, #0
 800586e:	4630      	mov	r0, r6
 8005870:	4639      	mov	r1, r7
 8005872:	f7fa fec9 	bl	8000608 <__aeabi_dmul>
 8005876:	4606      	mov	r6, r0
 8005878:	460f      	mov	r7, r1
 800587a:	e7c4      	b.n	8005806 <_dtoa_r+0x53e>
 800587c:	ec51 0b17 	vmov	r0, r1, d7
 8005880:	f7fa fec2 	bl	8000608 <__aeabi_dmul>
 8005884:	9b02      	ldr	r3, [sp, #8]
 8005886:	9d00      	ldr	r5, [sp, #0]
 8005888:	930c      	str	r3, [sp, #48]	; 0x30
 800588a:	ec41 0b18 	vmov	d8, r0, r1
 800588e:	4639      	mov	r1, r7
 8005890:	4630      	mov	r0, r6
 8005892:	f7fb f969 	bl	8000b68 <__aeabi_d2iz>
 8005896:	9011      	str	r0, [sp, #68]	; 0x44
 8005898:	f7fa fe4c 	bl	8000534 <__aeabi_i2d>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4630      	mov	r0, r6
 80058a2:	4639      	mov	r1, r7
 80058a4:	f7fa fcf8 	bl	8000298 <__aeabi_dsub>
 80058a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058aa:	3330      	adds	r3, #48	; 0x30
 80058ac:	f805 3b01 	strb.w	r3, [r5], #1
 80058b0:	9b02      	ldr	r3, [sp, #8]
 80058b2:	429d      	cmp	r5, r3
 80058b4:	4606      	mov	r6, r0
 80058b6:	460f      	mov	r7, r1
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	d134      	bne.n	8005928 <_dtoa_r+0x660>
 80058be:	4b19      	ldr	r3, [pc, #100]	; (8005924 <_dtoa_r+0x65c>)
 80058c0:	ec51 0b18 	vmov	r0, r1, d8
 80058c4:	f7fa fcea 	bl	800029c <__adddf3>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4630      	mov	r0, r6
 80058ce:	4639      	mov	r1, r7
 80058d0:	f7fb f92a 	bl	8000b28 <__aeabi_dcmpgt>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d175      	bne.n	80059c4 <_dtoa_r+0x6fc>
 80058d8:	ec53 2b18 	vmov	r2, r3, d8
 80058dc:	4911      	ldr	r1, [pc, #68]	; (8005924 <_dtoa_r+0x65c>)
 80058de:	2000      	movs	r0, #0
 80058e0:	f7fa fcda 	bl	8000298 <__aeabi_dsub>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4630      	mov	r0, r6
 80058ea:	4639      	mov	r1, r7
 80058ec:	f7fb f8fe 	bl	8000aec <__aeabi_dcmplt>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f43f af27 	beq.w	8005744 <_dtoa_r+0x47c>
 80058f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058f8:	1e6b      	subs	r3, r5, #1
 80058fa:	930c      	str	r3, [sp, #48]	; 0x30
 80058fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005900:	2b30      	cmp	r3, #48	; 0x30
 8005902:	d0f8      	beq.n	80058f6 <_dtoa_r+0x62e>
 8005904:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005908:	e04a      	b.n	80059a0 <_dtoa_r+0x6d8>
 800590a:	bf00      	nop
 800590c:	08007770 	.word	0x08007770
 8005910:	08007748 	.word	0x08007748
 8005914:	3ff00000 	.word	0x3ff00000
 8005918:	40240000 	.word	0x40240000
 800591c:	401c0000 	.word	0x401c0000
 8005920:	40140000 	.word	0x40140000
 8005924:	3fe00000 	.word	0x3fe00000
 8005928:	4baf      	ldr	r3, [pc, #700]	; (8005be8 <_dtoa_r+0x920>)
 800592a:	f7fa fe6d 	bl	8000608 <__aeabi_dmul>
 800592e:	4606      	mov	r6, r0
 8005930:	460f      	mov	r7, r1
 8005932:	e7ac      	b.n	800588e <_dtoa_r+0x5c6>
 8005934:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005938:	9d00      	ldr	r5, [sp, #0]
 800593a:	4642      	mov	r2, r8
 800593c:	464b      	mov	r3, r9
 800593e:	4630      	mov	r0, r6
 8005940:	4639      	mov	r1, r7
 8005942:	f7fa ff8b 	bl	800085c <__aeabi_ddiv>
 8005946:	f7fb f90f 	bl	8000b68 <__aeabi_d2iz>
 800594a:	9002      	str	r0, [sp, #8]
 800594c:	f7fa fdf2 	bl	8000534 <__aeabi_i2d>
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	f7fa fe58 	bl	8000608 <__aeabi_dmul>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4630      	mov	r0, r6
 800595e:	4639      	mov	r1, r7
 8005960:	f7fa fc9a 	bl	8000298 <__aeabi_dsub>
 8005964:	9e02      	ldr	r6, [sp, #8]
 8005966:	9f01      	ldr	r7, [sp, #4]
 8005968:	3630      	adds	r6, #48	; 0x30
 800596a:	f805 6b01 	strb.w	r6, [r5], #1
 800596e:	9e00      	ldr	r6, [sp, #0]
 8005970:	1bae      	subs	r6, r5, r6
 8005972:	42b7      	cmp	r7, r6
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	d137      	bne.n	80059ea <_dtoa_r+0x722>
 800597a:	f7fa fc8f 	bl	800029c <__adddf3>
 800597e:	4642      	mov	r2, r8
 8005980:	464b      	mov	r3, r9
 8005982:	4606      	mov	r6, r0
 8005984:	460f      	mov	r7, r1
 8005986:	f7fb f8cf 	bl	8000b28 <__aeabi_dcmpgt>
 800598a:	b9c8      	cbnz	r0, 80059c0 <_dtoa_r+0x6f8>
 800598c:	4642      	mov	r2, r8
 800598e:	464b      	mov	r3, r9
 8005990:	4630      	mov	r0, r6
 8005992:	4639      	mov	r1, r7
 8005994:	f7fb f8a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005998:	b110      	cbz	r0, 80059a0 <_dtoa_r+0x6d8>
 800599a:	9b02      	ldr	r3, [sp, #8]
 800599c:	07d9      	lsls	r1, r3, #31
 800599e:	d40f      	bmi.n	80059c0 <_dtoa_r+0x6f8>
 80059a0:	4620      	mov	r0, r4
 80059a2:	4659      	mov	r1, fp
 80059a4:	f000 fad6 	bl	8005f54 <_Bfree>
 80059a8:	2300      	movs	r3, #0
 80059aa:	702b      	strb	r3, [r5, #0]
 80059ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059ae:	f10a 0001 	add.w	r0, sl, #1
 80059b2:	6018      	str	r0, [r3, #0]
 80059b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f43f acd8 	beq.w	800536c <_dtoa_r+0xa4>
 80059bc:	601d      	str	r5, [r3, #0]
 80059be:	e4d5      	b.n	800536c <_dtoa_r+0xa4>
 80059c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80059c4:	462b      	mov	r3, r5
 80059c6:	461d      	mov	r5, r3
 80059c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059cc:	2a39      	cmp	r2, #57	; 0x39
 80059ce:	d108      	bne.n	80059e2 <_dtoa_r+0x71a>
 80059d0:	9a00      	ldr	r2, [sp, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d1f7      	bne.n	80059c6 <_dtoa_r+0x6fe>
 80059d6:	9a07      	ldr	r2, [sp, #28]
 80059d8:	9900      	ldr	r1, [sp, #0]
 80059da:	3201      	adds	r2, #1
 80059dc:	9207      	str	r2, [sp, #28]
 80059de:	2230      	movs	r2, #48	; 0x30
 80059e0:	700a      	strb	r2, [r1, #0]
 80059e2:	781a      	ldrb	r2, [r3, #0]
 80059e4:	3201      	adds	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e78c      	b.n	8005904 <_dtoa_r+0x63c>
 80059ea:	4b7f      	ldr	r3, [pc, #508]	; (8005be8 <_dtoa_r+0x920>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	f7fa fe0b 	bl	8000608 <__aeabi_dmul>
 80059f2:	2200      	movs	r2, #0
 80059f4:	2300      	movs	r3, #0
 80059f6:	4606      	mov	r6, r0
 80059f8:	460f      	mov	r7, r1
 80059fa:	f7fb f86d 	bl	8000ad8 <__aeabi_dcmpeq>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d09b      	beq.n	800593a <_dtoa_r+0x672>
 8005a02:	e7cd      	b.n	80059a0 <_dtoa_r+0x6d8>
 8005a04:	9a08      	ldr	r2, [sp, #32]
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	f000 80c4 	beq.w	8005b94 <_dtoa_r+0x8cc>
 8005a0c:	9a05      	ldr	r2, [sp, #20]
 8005a0e:	2a01      	cmp	r2, #1
 8005a10:	f300 80a8 	bgt.w	8005b64 <_dtoa_r+0x89c>
 8005a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a16:	2a00      	cmp	r2, #0
 8005a18:	f000 80a0 	beq.w	8005b5c <_dtoa_r+0x894>
 8005a1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a20:	9e06      	ldr	r6, [sp, #24]
 8005a22:	4645      	mov	r5, r8
 8005a24:	9a04      	ldr	r2, [sp, #16]
 8005a26:	2101      	movs	r1, #1
 8005a28:	441a      	add	r2, r3
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	4498      	add	r8, r3
 8005a2e:	9204      	str	r2, [sp, #16]
 8005a30:	f000 fb4c 	bl	80060cc <__i2b>
 8005a34:	4607      	mov	r7, r0
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	dd0b      	ble.n	8005a52 <_dtoa_r+0x78a>
 8005a3a:	9b04      	ldr	r3, [sp, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	dd08      	ble.n	8005a52 <_dtoa_r+0x78a>
 8005a40:	42ab      	cmp	r3, r5
 8005a42:	9a04      	ldr	r2, [sp, #16]
 8005a44:	bfa8      	it	ge
 8005a46:	462b      	movge	r3, r5
 8005a48:	eba8 0803 	sub.w	r8, r8, r3
 8005a4c:	1aed      	subs	r5, r5, r3
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	9304      	str	r3, [sp, #16]
 8005a52:	9b06      	ldr	r3, [sp, #24]
 8005a54:	b1fb      	cbz	r3, 8005a96 <_dtoa_r+0x7ce>
 8005a56:	9b08      	ldr	r3, [sp, #32]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 809f 	beq.w	8005b9c <_dtoa_r+0x8d4>
 8005a5e:	2e00      	cmp	r6, #0
 8005a60:	dd11      	ble.n	8005a86 <_dtoa_r+0x7be>
 8005a62:	4639      	mov	r1, r7
 8005a64:	4632      	mov	r2, r6
 8005a66:	4620      	mov	r0, r4
 8005a68:	f000 fbec 	bl	8006244 <__pow5mult>
 8005a6c:	465a      	mov	r2, fp
 8005a6e:	4601      	mov	r1, r0
 8005a70:	4607      	mov	r7, r0
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 fb40 	bl	80060f8 <__multiply>
 8005a78:	4659      	mov	r1, fp
 8005a7a:	9007      	str	r0, [sp, #28]
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 fa69 	bl	8005f54 <_Bfree>
 8005a82:	9b07      	ldr	r3, [sp, #28]
 8005a84:	469b      	mov	fp, r3
 8005a86:	9b06      	ldr	r3, [sp, #24]
 8005a88:	1b9a      	subs	r2, r3, r6
 8005a8a:	d004      	beq.n	8005a96 <_dtoa_r+0x7ce>
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 fbd8 	bl	8006244 <__pow5mult>
 8005a94:	4683      	mov	fp, r0
 8005a96:	2101      	movs	r1, #1
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 fb17 	bl	80060cc <__i2b>
 8005a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	dd7c      	ble.n	8005ba0 <_dtoa_r+0x8d8>
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	4601      	mov	r1, r0
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f000 fbca 	bl	8006244 <__pow5mult>
 8005ab0:	9b05      	ldr	r3, [sp, #20]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	dd76      	ble.n	8005ba6 <_dtoa_r+0x8de>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9306      	str	r3, [sp, #24]
 8005abc:	6933      	ldr	r3, [r6, #16]
 8005abe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ac2:	6918      	ldr	r0, [r3, #16]
 8005ac4:	f000 fab2 	bl	800602c <__hi0bits>
 8005ac8:	f1c0 0020 	rsb	r0, r0, #32
 8005acc:	9b04      	ldr	r3, [sp, #16]
 8005ace:	4418      	add	r0, r3
 8005ad0:	f010 001f 	ands.w	r0, r0, #31
 8005ad4:	f000 8086 	beq.w	8005be4 <_dtoa_r+0x91c>
 8005ad8:	f1c0 0320 	rsb	r3, r0, #32
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	dd7f      	ble.n	8005be0 <_dtoa_r+0x918>
 8005ae0:	f1c0 001c 	rsb	r0, r0, #28
 8005ae4:	9b04      	ldr	r3, [sp, #16]
 8005ae6:	4403      	add	r3, r0
 8005ae8:	4480      	add	r8, r0
 8005aea:	4405      	add	r5, r0
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	f1b8 0f00 	cmp.w	r8, #0
 8005af2:	dd05      	ble.n	8005b00 <_dtoa_r+0x838>
 8005af4:	4659      	mov	r1, fp
 8005af6:	4642      	mov	r2, r8
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 fbfd 	bl	80062f8 <__lshift>
 8005afe:	4683      	mov	fp, r0
 8005b00:	9b04      	ldr	r3, [sp, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	dd05      	ble.n	8005b12 <_dtoa_r+0x84a>
 8005b06:	4631      	mov	r1, r6
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f000 fbf4 	bl	80062f8 <__lshift>
 8005b10:	4606      	mov	r6, r0
 8005b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d069      	beq.n	8005bec <_dtoa_r+0x924>
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4658      	mov	r0, fp
 8005b1c:	f000 fc58 	bl	80063d0 <__mcmp>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	da63      	bge.n	8005bec <_dtoa_r+0x924>
 8005b24:	2300      	movs	r3, #0
 8005b26:	4659      	mov	r1, fp
 8005b28:	220a      	movs	r2, #10
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 fa34 	bl	8005f98 <__multadd>
 8005b30:	9b08      	ldr	r3, [sp, #32]
 8005b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b36:	4683      	mov	fp, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 818f 	beq.w	8005e5c <_dtoa_r+0xb94>
 8005b3e:	4639      	mov	r1, r7
 8005b40:	2300      	movs	r3, #0
 8005b42:	220a      	movs	r2, #10
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 fa27 	bl	8005f98 <__multadd>
 8005b4a:	f1b9 0f00 	cmp.w	r9, #0
 8005b4e:	4607      	mov	r7, r0
 8005b50:	f300 808e 	bgt.w	8005c70 <_dtoa_r+0x9a8>
 8005b54:	9b05      	ldr	r3, [sp, #20]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	dc50      	bgt.n	8005bfc <_dtoa_r+0x934>
 8005b5a:	e089      	b.n	8005c70 <_dtoa_r+0x9a8>
 8005b5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b62:	e75d      	b.n	8005a20 <_dtoa_r+0x758>
 8005b64:	9b01      	ldr	r3, [sp, #4]
 8005b66:	1e5e      	subs	r6, r3, #1
 8005b68:	9b06      	ldr	r3, [sp, #24]
 8005b6a:	42b3      	cmp	r3, r6
 8005b6c:	bfbf      	itttt	lt
 8005b6e:	9b06      	ldrlt	r3, [sp, #24]
 8005b70:	9606      	strlt	r6, [sp, #24]
 8005b72:	1af2      	sublt	r2, r6, r3
 8005b74:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005b76:	bfb6      	itet	lt
 8005b78:	189b      	addlt	r3, r3, r2
 8005b7a:	1b9e      	subge	r6, r3, r6
 8005b7c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005b7e:	9b01      	ldr	r3, [sp, #4]
 8005b80:	bfb8      	it	lt
 8005b82:	2600      	movlt	r6, #0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	bfb5      	itete	lt
 8005b88:	eba8 0503 	sublt.w	r5, r8, r3
 8005b8c:	9b01      	ldrge	r3, [sp, #4]
 8005b8e:	2300      	movlt	r3, #0
 8005b90:	4645      	movge	r5, r8
 8005b92:	e747      	b.n	8005a24 <_dtoa_r+0x75c>
 8005b94:	9e06      	ldr	r6, [sp, #24]
 8005b96:	9f08      	ldr	r7, [sp, #32]
 8005b98:	4645      	mov	r5, r8
 8005b9a:	e74c      	b.n	8005a36 <_dtoa_r+0x76e>
 8005b9c:	9a06      	ldr	r2, [sp, #24]
 8005b9e:	e775      	b.n	8005a8c <_dtoa_r+0x7c4>
 8005ba0:	9b05      	ldr	r3, [sp, #20]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	dc18      	bgt.n	8005bd8 <_dtoa_r+0x910>
 8005ba6:	9b02      	ldr	r3, [sp, #8]
 8005ba8:	b9b3      	cbnz	r3, 8005bd8 <_dtoa_r+0x910>
 8005baa:	9b03      	ldr	r3, [sp, #12]
 8005bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bb0:	b9a3      	cbnz	r3, 8005bdc <_dtoa_r+0x914>
 8005bb2:	9b03      	ldr	r3, [sp, #12]
 8005bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb8:	0d1b      	lsrs	r3, r3, #20
 8005bba:	051b      	lsls	r3, r3, #20
 8005bbc:	b12b      	cbz	r3, 8005bca <_dtoa_r+0x902>
 8005bbe:	9b04      	ldr	r3, [sp, #16]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	9304      	str	r3, [sp, #16]
 8005bc4:	f108 0801 	add.w	r8, r8, #1
 8005bc8:	2301      	movs	r3, #1
 8005bca:	9306      	str	r3, [sp, #24]
 8005bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f47f af74 	bne.w	8005abc <_dtoa_r+0x7f4>
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	e779      	b.n	8005acc <_dtoa_r+0x804>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e7f6      	b.n	8005bca <_dtoa_r+0x902>
 8005bdc:	9b02      	ldr	r3, [sp, #8]
 8005bde:	e7f4      	b.n	8005bca <_dtoa_r+0x902>
 8005be0:	d085      	beq.n	8005aee <_dtoa_r+0x826>
 8005be2:	4618      	mov	r0, r3
 8005be4:	301c      	adds	r0, #28
 8005be6:	e77d      	b.n	8005ae4 <_dtoa_r+0x81c>
 8005be8:	40240000 	.word	0x40240000
 8005bec:	9b01      	ldr	r3, [sp, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	dc38      	bgt.n	8005c64 <_dtoa_r+0x99c>
 8005bf2:	9b05      	ldr	r3, [sp, #20]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	dd35      	ble.n	8005c64 <_dtoa_r+0x99c>
 8005bf8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005bfc:	f1b9 0f00 	cmp.w	r9, #0
 8005c00:	d10d      	bne.n	8005c1e <_dtoa_r+0x956>
 8005c02:	4631      	mov	r1, r6
 8005c04:	464b      	mov	r3, r9
 8005c06:	2205      	movs	r2, #5
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 f9c5 	bl	8005f98 <__multadd>
 8005c0e:	4601      	mov	r1, r0
 8005c10:	4606      	mov	r6, r0
 8005c12:	4658      	mov	r0, fp
 8005c14:	f000 fbdc 	bl	80063d0 <__mcmp>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	f73f adbd 	bgt.w	8005798 <_dtoa_r+0x4d0>
 8005c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c20:	9d00      	ldr	r5, [sp, #0]
 8005c22:	ea6f 0a03 	mvn.w	sl, r3
 8005c26:	f04f 0800 	mov.w	r8, #0
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f000 f991 	bl	8005f54 <_Bfree>
 8005c32:	2f00      	cmp	r7, #0
 8005c34:	f43f aeb4 	beq.w	80059a0 <_dtoa_r+0x6d8>
 8005c38:	f1b8 0f00 	cmp.w	r8, #0
 8005c3c:	d005      	beq.n	8005c4a <_dtoa_r+0x982>
 8005c3e:	45b8      	cmp	r8, r7
 8005c40:	d003      	beq.n	8005c4a <_dtoa_r+0x982>
 8005c42:	4641      	mov	r1, r8
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 f985 	bl	8005f54 <_Bfree>
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f000 f981 	bl	8005f54 <_Bfree>
 8005c52:	e6a5      	b.n	80059a0 <_dtoa_r+0x6d8>
 8005c54:	2600      	movs	r6, #0
 8005c56:	4637      	mov	r7, r6
 8005c58:	e7e1      	b.n	8005c1e <_dtoa_r+0x956>
 8005c5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005c5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005c60:	4637      	mov	r7, r6
 8005c62:	e599      	b.n	8005798 <_dtoa_r+0x4d0>
 8005c64:	9b08      	ldr	r3, [sp, #32]
 8005c66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 80fd 	beq.w	8005e6a <_dtoa_r+0xba2>
 8005c70:	2d00      	cmp	r5, #0
 8005c72:	dd05      	ble.n	8005c80 <_dtoa_r+0x9b8>
 8005c74:	4639      	mov	r1, r7
 8005c76:	462a      	mov	r2, r5
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 fb3d 	bl	80062f8 <__lshift>
 8005c7e:	4607      	mov	r7, r0
 8005c80:	9b06      	ldr	r3, [sp, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d05c      	beq.n	8005d40 <_dtoa_r+0xa78>
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 f923 	bl	8005ed4 <_Balloc>
 8005c8e:	4605      	mov	r5, r0
 8005c90:	b928      	cbnz	r0, 8005c9e <_dtoa_r+0x9d6>
 8005c92:	4b80      	ldr	r3, [pc, #512]	; (8005e94 <_dtoa_r+0xbcc>)
 8005c94:	4602      	mov	r2, r0
 8005c96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c9a:	f7ff bb2e 	b.w	80052fa <_dtoa_r+0x32>
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	3202      	adds	r2, #2
 8005ca2:	0092      	lsls	r2, r2, #2
 8005ca4:	f107 010c 	add.w	r1, r7, #12
 8005ca8:	300c      	adds	r0, #12
 8005caa:	f000 f905 	bl	8005eb8 <memcpy>
 8005cae:	2201      	movs	r2, #1
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 fb20 	bl	80062f8 <__lshift>
 8005cb8:	9b00      	ldr	r3, [sp, #0]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	9b00      	ldr	r3, [sp, #0]
 8005cc0:	444b      	add	r3, r9
 8005cc2:	9307      	str	r3, [sp, #28]
 8005cc4:	9b02      	ldr	r3, [sp, #8]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	46b8      	mov	r8, r7
 8005ccc:	9306      	str	r3, [sp, #24]
 8005cce:	4607      	mov	r7, r0
 8005cd0:	9b01      	ldr	r3, [sp, #4]
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	4658      	mov	r0, fp
 8005cd8:	9302      	str	r3, [sp, #8]
 8005cda:	f7ff fa67 	bl	80051ac <quorem>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	3330      	adds	r3, #48	; 0x30
 8005ce2:	9004      	str	r0, [sp, #16]
 8005ce4:	4641      	mov	r1, r8
 8005ce6:	4658      	mov	r0, fp
 8005ce8:	9308      	str	r3, [sp, #32]
 8005cea:	f000 fb71 	bl	80063d0 <__mcmp>
 8005cee:	463a      	mov	r2, r7
 8005cf0:	4681      	mov	r9, r0
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f000 fb87 	bl	8006408 <__mdiff>
 8005cfa:	68c2      	ldr	r2, [r0, #12]
 8005cfc:	9b08      	ldr	r3, [sp, #32]
 8005cfe:	4605      	mov	r5, r0
 8005d00:	bb02      	cbnz	r2, 8005d44 <_dtoa_r+0xa7c>
 8005d02:	4601      	mov	r1, r0
 8005d04:	4658      	mov	r0, fp
 8005d06:	f000 fb63 	bl	80063d0 <__mcmp>
 8005d0a:	9b08      	ldr	r3, [sp, #32]
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4629      	mov	r1, r5
 8005d10:	4620      	mov	r0, r4
 8005d12:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005d16:	f000 f91d 	bl	8005f54 <_Bfree>
 8005d1a:	9b05      	ldr	r3, [sp, #20]
 8005d1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d1e:	9d01      	ldr	r5, [sp, #4]
 8005d20:	ea43 0102 	orr.w	r1, r3, r2
 8005d24:	9b06      	ldr	r3, [sp, #24]
 8005d26:	430b      	orrs	r3, r1
 8005d28:	9b08      	ldr	r3, [sp, #32]
 8005d2a:	d10d      	bne.n	8005d48 <_dtoa_r+0xa80>
 8005d2c:	2b39      	cmp	r3, #57	; 0x39
 8005d2e:	d029      	beq.n	8005d84 <_dtoa_r+0xabc>
 8005d30:	f1b9 0f00 	cmp.w	r9, #0
 8005d34:	dd01      	ble.n	8005d3a <_dtoa_r+0xa72>
 8005d36:	9b04      	ldr	r3, [sp, #16]
 8005d38:	3331      	adds	r3, #49	; 0x31
 8005d3a:	9a02      	ldr	r2, [sp, #8]
 8005d3c:	7013      	strb	r3, [r2, #0]
 8005d3e:	e774      	b.n	8005c2a <_dtoa_r+0x962>
 8005d40:	4638      	mov	r0, r7
 8005d42:	e7b9      	b.n	8005cb8 <_dtoa_r+0x9f0>
 8005d44:	2201      	movs	r2, #1
 8005d46:	e7e2      	b.n	8005d0e <_dtoa_r+0xa46>
 8005d48:	f1b9 0f00 	cmp.w	r9, #0
 8005d4c:	db06      	blt.n	8005d5c <_dtoa_r+0xa94>
 8005d4e:	9905      	ldr	r1, [sp, #20]
 8005d50:	ea41 0909 	orr.w	r9, r1, r9
 8005d54:	9906      	ldr	r1, [sp, #24]
 8005d56:	ea59 0101 	orrs.w	r1, r9, r1
 8005d5a:	d120      	bne.n	8005d9e <_dtoa_r+0xad6>
 8005d5c:	2a00      	cmp	r2, #0
 8005d5e:	ddec      	ble.n	8005d3a <_dtoa_r+0xa72>
 8005d60:	4659      	mov	r1, fp
 8005d62:	2201      	movs	r2, #1
 8005d64:	4620      	mov	r0, r4
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	f000 fac6 	bl	80062f8 <__lshift>
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	4683      	mov	fp, r0
 8005d70:	f000 fb2e 	bl	80063d0 <__mcmp>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	9b01      	ldr	r3, [sp, #4]
 8005d78:	dc02      	bgt.n	8005d80 <_dtoa_r+0xab8>
 8005d7a:	d1de      	bne.n	8005d3a <_dtoa_r+0xa72>
 8005d7c:	07da      	lsls	r2, r3, #31
 8005d7e:	d5dc      	bpl.n	8005d3a <_dtoa_r+0xa72>
 8005d80:	2b39      	cmp	r3, #57	; 0x39
 8005d82:	d1d8      	bne.n	8005d36 <_dtoa_r+0xa6e>
 8005d84:	9a02      	ldr	r2, [sp, #8]
 8005d86:	2339      	movs	r3, #57	; 0x39
 8005d88:	7013      	strb	r3, [r2, #0]
 8005d8a:	462b      	mov	r3, r5
 8005d8c:	461d      	mov	r5, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d94:	2a39      	cmp	r2, #57	; 0x39
 8005d96:	d050      	beq.n	8005e3a <_dtoa_r+0xb72>
 8005d98:	3201      	adds	r2, #1
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	e745      	b.n	8005c2a <_dtoa_r+0x962>
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	dd03      	ble.n	8005daa <_dtoa_r+0xae2>
 8005da2:	2b39      	cmp	r3, #57	; 0x39
 8005da4:	d0ee      	beq.n	8005d84 <_dtoa_r+0xabc>
 8005da6:	3301      	adds	r3, #1
 8005da8:	e7c7      	b.n	8005d3a <_dtoa_r+0xa72>
 8005daa:	9a01      	ldr	r2, [sp, #4]
 8005dac:	9907      	ldr	r1, [sp, #28]
 8005dae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005db2:	428a      	cmp	r2, r1
 8005db4:	d02a      	beq.n	8005e0c <_dtoa_r+0xb44>
 8005db6:	4659      	mov	r1, fp
 8005db8:	2300      	movs	r3, #0
 8005dba:	220a      	movs	r2, #10
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 f8eb 	bl	8005f98 <__multadd>
 8005dc2:	45b8      	cmp	r8, r7
 8005dc4:	4683      	mov	fp, r0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	f04f 020a 	mov.w	r2, #10
 8005dce:	4641      	mov	r1, r8
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	d107      	bne.n	8005de4 <_dtoa_r+0xb1c>
 8005dd4:	f000 f8e0 	bl	8005f98 <__multadd>
 8005dd8:	4680      	mov	r8, r0
 8005dda:	4607      	mov	r7, r0
 8005ddc:	9b01      	ldr	r3, [sp, #4]
 8005dde:	3301      	adds	r3, #1
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	e775      	b.n	8005cd0 <_dtoa_r+0xa08>
 8005de4:	f000 f8d8 	bl	8005f98 <__multadd>
 8005de8:	4639      	mov	r1, r7
 8005dea:	4680      	mov	r8, r0
 8005dec:	2300      	movs	r3, #0
 8005dee:	220a      	movs	r2, #10
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 f8d1 	bl	8005f98 <__multadd>
 8005df6:	4607      	mov	r7, r0
 8005df8:	e7f0      	b.n	8005ddc <_dtoa_r+0xb14>
 8005dfa:	f1b9 0f00 	cmp.w	r9, #0
 8005dfe:	9a00      	ldr	r2, [sp, #0]
 8005e00:	bfcc      	ite	gt
 8005e02:	464d      	movgt	r5, r9
 8005e04:	2501      	movle	r5, #1
 8005e06:	4415      	add	r5, r2
 8005e08:	f04f 0800 	mov.w	r8, #0
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	2201      	movs	r2, #1
 8005e10:	4620      	mov	r0, r4
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	f000 fa70 	bl	80062f8 <__lshift>
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4683      	mov	fp, r0
 8005e1c:	f000 fad8 	bl	80063d0 <__mcmp>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	dcb2      	bgt.n	8005d8a <_dtoa_r+0xac2>
 8005e24:	d102      	bne.n	8005e2c <_dtoa_r+0xb64>
 8005e26:	9b01      	ldr	r3, [sp, #4]
 8005e28:	07db      	lsls	r3, r3, #31
 8005e2a:	d4ae      	bmi.n	8005d8a <_dtoa_r+0xac2>
 8005e2c:	462b      	mov	r3, r5
 8005e2e:	461d      	mov	r5, r3
 8005e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e34:	2a30      	cmp	r2, #48	; 0x30
 8005e36:	d0fa      	beq.n	8005e2e <_dtoa_r+0xb66>
 8005e38:	e6f7      	b.n	8005c2a <_dtoa_r+0x962>
 8005e3a:	9a00      	ldr	r2, [sp, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d1a5      	bne.n	8005d8c <_dtoa_r+0xac4>
 8005e40:	f10a 0a01 	add.w	sl, sl, #1
 8005e44:	2331      	movs	r3, #49	; 0x31
 8005e46:	e779      	b.n	8005d3c <_dtoa_r+0xa74>
 8005e48:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <_dtoa_r+0xbd0>)
 8005e4a:	f7ff baaf 	b.w	80053ac <_dtoa_r+0xe4>
 8005e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f47f aa86 	bne.w	8005362 <_dtoa_r+0x9a>
 8005e56:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <_dtoa_r+0xbd4>)
 8005e58:	f7ff baa8 	b.w	80053ac <_dtoa_r+0xe4>
 8005e5c:	f1b9 0f00 	cmp.w	r9, #0
 8005e60:	dc03      	bgt.n	8005e6a <_dtoa_r+0xba2>
 8005e62:	9b05      	ldr	r3, [sp, #20]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	f73f aec9 	bgt.w	8005bfc <_dtoa_r+0x934>
 8005e6a:	9d00      	ldr	r5, [sp, #0]
 8005e6c:	4631      	mov	r1, r6
 8005e6e:	4658      	mov	r0, fp
 8005e70:	f7ff f99c 	bl	80051ac <quorem>
 8005e74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e78:	f805 3b01 	strb.w	r3, [r5], #1
 8005e7c:	9a00      	ldr	r2, [sp, #0]
 8005e7e:	1aaa      	subs	r2, r5, r2
 8005e80:	4591      	cmp	r9, r2
 8005e82:	ddba      	ble.n	8005dfa <_dtoa_r+0xb32>
 8005e84:	4659      	mov	r1, fp
 8005e86:	2300      	movs	r3, #0
 8005e88:	220a      	movs	r2, #10
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 f884 	bl	8005f98 <__multadd>
 8005e90:	4683      	mov	fp, r0
 8005e92:	e7eb      	b.n	8005e6c <_dtoa_r+0xba4>
 8005e94:	080076d3 	.word	0x080076d3
 8005e98:	0800762c 	.word	0x0800762c
 8005e9c:	08007650 	.word	0x08007650

08005ea0 <_localeconv_r>:
 8005ea0:	4800      	ldr	r0, [pc, #0]	; (8005ea4 <_localeconv_r+0x4>)
 8005ea2:	4770      	bx	lr
 8005ea4:	20000164 	.word	0x20000164

08005ea8 <malloc>:
 8005ea8:	4b02      	ldr	r3, [pc, #8]	; (8005eb4 <malloc+0xc>)
 8005eaa:	4601      	mov	r1, r0
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	f000 bbef 	b.w	8006690 <_malloc_r>
 8005eb2:	bf00      	nop
 8005eb4:	20000010 	.word	0x20000010

08005eb8 <memcpy>:
 8005eb8:	440a      	add	r2, r1
 8005eba:	4291      	cmp	r1, r2
 8005ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ec0:	d100      	bne.n	8005ec4 <memcpy+0xc>
 8005ec2:	4770      	bx	lr
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ece:	4291      	cmp	r1, r2
 8005ed0:	d1f9      	bne.n	8005ec6 <memcpy+0xe>
 8005ed2:	bd10      	pop	{r4, pc}

08005ed4 <_Balloc>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ed8:	4604      	mov	r4, r0
 8005eda:	460d      	mov	r5, r1
 8005edc:	b976      	cbnz	r6, 8005efc <_Balloc+0x28>
 8005ede:	2010      	movs	r0, #16
 8005ee0:	f7ff ffe2 	bl	8005ea8 <malloc>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6260      	str	r0, [r4, #36]	; 0x24
 8005ee8:	b920      	cbnz	r0, 8005ef4 <_Balloc+0x20>
 8005eea:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <_Balloc+0x78>)
 8005eec:	4818      	ldr	r0, [pc, #96]	; (8005f50 <_Balloc+0x7c>)
 8005eee:	2166      	movs	r1, #102	; 0x66
 8005ef0:	f000 fd94 	bl	8006a1c <__assert_func>
 8005ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ef8:	6006      	str	r6, [r0, #0]
 8005efa:	60c6      	str	r6, [r0, #12]
 8005efc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005efe:	68f3      	ldr	r3, [r6, #12]
 8005f00:	b183      	cbz	r3, 8005f24 <_Balloc+0x50>
 8005f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f0a:	b9b8      	cbnz	r0, 8005f3c <_Balloc+0x68>
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f12:	1d72      	adds	r2, r6, #5
 8005f14:	0092      	lsls	r2, r2, #2
 8005f16:	4620      	mov	r0, r4
 8005f18:	f000 fb5a 	bl	80065d0 <_calloc_r>
 8005f1c:	b160      	cbz	r0, 8005f38 <_Balloc+0x64>
 8005f1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f22:	e00e      	b.n	8005f42 <_Balloc+0x6e>
 8005f24:	2221      	movs	r2, #33	; 0x21
 8005f26:	2104      	movs	r1, #4
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 fb51 	bl	80065d0 <_calloc_r>
 8005f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f30:	60f0      	str	r0, [r6, #12]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e4      	bne.n	8005f02 <_Balloc+0x2e>
 8005f38:	2000      	movs	r0, #0
 8005f3a:	bd70      	pop	{r4, r5, r6, pc}
 8005f3c:	6802      	ldr	r2, [r0, #0]
 8005f3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f42:	2300      	movs	r3, #0
 8005f44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f48:	e7f7      	b.n	8005f3a <_Balloc+0x66>
 8005f4a:	bf00      	nop
 8005f4c:	0800765d 	.word	0x0800765d
 8005f50:	080076e4 	.word	0x080076e4

08005f54 <_Bfree>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f58:	4605      	mov	r5, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	b976      	cbnz	r6, 8005f7c <_Bfree+0x28>
 8005f5e:	2010      	movs	r0, #16
 8005f60:	f7ff ffa2 	bl	8005ea8 <malloc>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6268      	str	r0, [r5, #36]	; 0x24
 8005f68:	b920      	cbnz	r0, 8005f74 <_Bfree+0x20>
 8005f6a:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <_Bfree+0x3c>)
 8005f6c:	4809      	ldr	r0, [pc, #36]	; (8005f94 <_Bfree+0x40>)
 8005f6e:	218a      	movs	r1, #138	; 0x8a
 8005f70:	f000 fd54 	bl	8006a1c <__assert_func>
 8005f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f78:	6006      	str	r6, [r0, #0]
 8005f7a:	60c6      	str	r6, [r0, #12]
 8005f7c:	b13c      	cbz	r4, 8005f8e <_Bfree+0x3a>
 8005f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f80:	6862      	ldr	r2, [r4, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f88:	6021      	str	r1, [r4, #0]
 8005f8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	0800765d 	.word	0x0800765d
 8005f94:	080076e4 	.word	0x080076e4

08005f98 <__multadd>:
 8005f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9c:	690e      	ldr	r6, [r1, #16]
 8005f9e:	4607      	mov	r7, r0
 8005fa0:	4698      	mov	r8, r3
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	f101 0014 	add.w	r0, r1, #20
 8005fa8:	2300      	movs	r3, #0
 8005faa:	6805      	ldr	r5, [r0, #0]
 8005fac:	b2a9      	uxth	r1, r5
 8005fae:	fb02 8101 	mla	r1, r2, r1, r8
 8005fb2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005fb6:	0c2d      	lsrs	r5, r5, #16
 8005fb8:	fb02 c505 	mla	r5, r2, r5, ip
 8005fbc:	b289      	uxth	r1, r1
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005fc4:	429e      	cmp	r6, r3
 8005fc6:	f840 1b04 	str.w	r1, [r0], #4
 8005fca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005fce:	dcec      	bgt.n	8005faa <__multadd+0x12>
 8005fd0:	f1b8 0f00 	cmp.w	r8, #0
 8005fd4:	d022      	beq.n	800601c <__multadd+0x84>
 8005fd6:	68a3      	ldr	r3, [r4, #8]
 8005fd8:	42b3      	cmp	r3, r6
 8005fda:	dc19      	bgt.n	8006010 <__multadd+0x78>
 8005fdc:	6861      	ldr	r1, [r4, #4]
 8005fde:	4638      	mov	r0, r7
 8005fe0:	3101      	adds	r1, #1
 8005fe2:	f7ff ff77 	bl	8005ed4 <_Balloc>
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	b928      	cbnz	r0, 8005ff6 <__multadd+0x5e>
 8005fea:	4602      	mov	r2, r0
 8005fec:	4b0d      	ldr	r3, [pc, #52]	; (8006024 <__multadd+0x8c>)
 8005fee:	480e      	ldr	r0, [pc, #56]	; (8006028 <__multadd+0x90>)
 8005ff0:	21b5      	movs	r1, #181	; 0xb5
 8005ff2:	f000 fd13 	bl	8006a1c <__assert_func>
 8005ff6:	6922      	ldr	r2, [r4, #16]
 8005ff8:	3202      	adds	r2, #2
 8005ffa:	f104 010c 	add.w	r1, r4, #12
 8005ffe:	0092      	lsls	r2, r2, #2
 8006000:	300c      	adds	r0, #12
 8006002:	f7ff ff59 	bl	8005eb8 <memcpy>
 8006006:	4621      	mov	r1, r4
 8006008:	4638      	mov	r0, r7
 800600a:	f7ff ffa3 	bl	8005f54 <_Bfree>
 800600e:	462c      	mov	r4, r5
 8006010:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006014:	3601      	adds	r6, #1
 8006016:	f8c3 8014 	str.w	r8, [r3, #20]
 800601a:	6126      	str	r6, [r4, #16]
 800601c:	4620      	mov	r0, r4
 800601e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006022:	bf00      	nop
 8006024:	080076d3 	.word	0x080076d3
 8006028:	080076e4 	.word	0x080076e4

0800602c <__hi0bits>:
 800602c:	0c03      	lsrs	r3, r0, #16
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	b9d3      	cbnz	r3, 8006068 <__hi0bits+0x3c>
 8006032:	0400      	lsls	r0, r0, #16
 8006034:	2310      	movs	r3, #16
 8006036:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800603a:	bf04      	itt	eq
 800603c:	0200      	lsleq	r0, r0, #8
 800603e:	3308      	addeq	r3, #8
 8006040:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006044:	bf04      	itt	eq
 8006046:	0100      	lsleq	r0, r0, #4
 8006048:	3304      	addeq	r3, #4
 800604a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800604e:	bf04      	itt	eq
 8006050:	0080      	lsleq	r0, r0, #2
 8006052:	3302      	addeq	r3, #2
 8006054:	2800      	cmp	r0, #0
 8006056:	db05      	blt.n	8006064 <__hi0bits+0x38>
 8006058:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800605c:	f103 0301 	add.w	r3, r3, #1
 8006060:	bf08      	it	eq
 8006062:	2320      	moveq	r3, #32
 8006064:	4618      	mov	r0, r3
 8006066:	4770      	bx	lr
 8006068:	2300      	movs	r3, #0
 800606a:	e7e4      	b.n	8006036 <__hi0bits+0xa>

0800606c <__lo0bits>:
 800606c:	6803      	ldr	r3, [r0, #0]
 800606e:	f013 0207 	ands.w	r2, r3, #7
 8006072:	4601      	mov	r1, r0
 8006074:	d00b      	beq.n	800608e <__lo0bits+0x22>
 8006076:	07da      	lsls	r2, r3, #31
 8006078:	d424      	bmi.n	80060c4 <__lo0bits+0x58>
 800607a:	0798      	lsls	r0, r3, #30
 800607c:	bf49      	itett	mi
 800607e:	085b      	lsrmi	r3, r3, #1
 8006080:	089b      	lsrpl	r3, r3, #2
 8006082:	2001      	movmi	r0, #1
 8006084:	600b      	strmi	r3, [r1, #0]
 8006086:	bf5c      	itt	pl
 8006088:	600b      	strpl	r3, [r1, #0]
 800608a:	2002      	movpl	r0, #2
 800608c:	4770      	bx	lr
 800608e:	b298      	uxth	r0, r3
 8006090:	b9b0      	cbnz	r0, 80060c0 <__lo0bits+0x54>
 8006092:	0c1b      	lsrs	r3, r3, #16
 8006094:	2010      	movs	r0, #16
 8006096:	f013 0fff 	tst.w	r3, #255	; 0xff
 800609a:	bf04      	itt	eq
 800609c:	0a1b      	lsreq	r3, r3, #8
 800609e:	3008      	addeq	r0, #8
 80060a0:	071a      	lsls	r2, r3, #28
 80060a2:	bf04      	itt	eq
 80060a4:	091b      	lsreq	r3, r3, #4
 80060a6:	3004      	addeq	r0, #4
 80060a8:	079a      	lsls	r2, r3, #30
 80060aa:	bf04      	itt	eq
 80060ac:	089b      	lsreq	r3, r3, #2
 80060ae:	3002      	addeq	r0, #2
 80060b0:	07da      	lsls	r2, r3, #31
 80060b2:	d403      	bmi.n	80060bc <__lo0bits+0x50>
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	f100 0001 	add.w	r0, r0, #1
 80060ba:	d005      	beq.n	80060c8 <__lo0bits+0x5c>
 80060bc:	600b      	str	r3, [r1, #0]
 80060be:	4770      	bx	lr
 80060c0:	4610      	mov	r0, r2
 80060c2:	e7e8      	b.n	8006096 <__lo0bits+0x2a>
 80060c4:	2000      	movs	r0, #0
 80060c6:	4770      	bx	lr
 80060c8:	2020      	movs	r0, #32
 80060ca:	4770      	bx	lr

080060cc <__i2b>:
 80060cc:	b510      	push	{r4, lr}
 80060ce:	460c      	mov	r4, r1
 80060d0:	2101      	movs	r1, #1
 80060d2:	f7ff feff 	bl	8005ed4 <_Balloc>
 80060d6:	4602      	mov	r2, r0
 80060d8:	b928      	cbnz	r0, 80060e6 <__i2b+0x1a>
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <__i2b+0x24>)
 80060dc:	4805      	ldr	r0, [pc, #20]	; (80060f4 <__i2b+0x28>)
 80060de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060e2:	f000 fc9b 	bl	8006a1c <__assert_func>
 80060e6:	2301      	movs	r3, #1
 80060e8:	6144      	str	r4, [r0, #20]
 80060ea:	6103      	str	r3, [r0, #16]
 80060ec:	bd10      	pop	{r4, pc}
 80060ee:	bf00      	nop
 80060f0:	080076d3 	.word	0x080076d3
 80060f4:	080076e4 	.word	0x080076e4

080060f8 <__multiply>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	4614      	mov	r4, r2
 80060fe:	690a      	ldr	r2, [r1, #16]
 8006100:	6923      	ldr	r3, [r4, #16]
 8006102:	429a      	cmp	r2, r3
 8006104:	bfb8      	it	lt
 8006106:	460b      	movlt	r3, r1
 8006108:	460d      	mov	r5, r1
 800610a:	bfbc      	itt	lt
 800610c:	4625      	movlt	r5, r4
 800610e:	461c      	movlt	r4, r3
 8006110:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006114:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006118:	68ab      	ldr	r3, [r5, #8]
 800611a:	6869      	ldr	r1, [r5, #4]
 800611c:	eb0a 0709 	add.w	r7, sl, r9
 8006120:	42bb      	cmp	r3, r7
 8006122:	b085      	sub	sp, #20
 8006124:	bfb8      	it	lt
 8006126:	3101      	addlt	r1, #1
 8006128:	f7ff fed4 	bl	8005ed4 <_Balloc>
 800612c:	b930      	cbnz	r0, 800613c <__multiply+0x44>
 800612e:	4602      	mov	r2, r0
 8006130:	4b42      	ldr	r3, [pc, #264]	; (800623c <__multiply+0x144>)
 8006132:	4843      	ldr	r0, [pc, #268]	; (8006240 <__multiply+0x148>)
 8006134:	f240 115d 	movw	r1, #349	; 0x15d
 8006138:	f000 fc70 	bl	8006a1c <__assert_func>
 800613c:	f100 0614 	add.w	r6, r0, #20
 8006140:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006144:	4633      	mov	r3, r6
 8006146:	2200      	movs	r2, #0
 8006148:	4543      	cmp	r3, r8
 800614a:	d31e      	bcc.n	800618a <__multiply+0x92>
 800614c:	f105 0c14 	add.w	ip, r5, #20
 8006150:	f104 0314 	add.w	r3, r4, #20
 8006154:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006158:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800615c:	9202      	str	r2, [sp, #8]
 800615e:	ebac 0205 	sub.w	r2, ip, r5
 8006162:	3a15      	subs	r2, #21
 8006164:	f022 0203 	bic.w	r2, r2, #3
 8006168:	3204      	adds	r2, #4
 800616a:	f105 0115 	add.w	r1, r5, #21
 800616e:	458c      	cmp	ip, r1
 8006170:	bf38      	it	cc
 8006172:	2204      	movcc	r2, #4
 8006174:	9201      	str	r2, [sp, #4]
 8006176:	9a02      	ldr	r2, [sp, #8]
 8006178:	9303      	str	r3, [sp, #12]
 800617a:	429a      	cmp	r2, r3
 800617c:	d808      	bhi.n	8006190 <__multiply+0x98>
 800617e:	2f00      	cmp	r7, #0
 8006180:	dc55      	bgt.n	800622e <__multiply+0x136>
 8006182:	6107      	str	r7, [r0, #16]
 8006184:	b005      	add	sp, #20
 8006186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618a:	f843 2b04 	str.w	r2, [r3], #4
 800618e:	e7db      	b.n	8006148 <__multiply+0x50>
 8006190:	f8b3 a000 	ldrh.w	sl, [r3]
 8006194:	f1ba 0f00 	cmp.w	sl, #0
 8006198:	d020      	beq.n	80061dc <__multiply+0xe4>
 800619a:	f105 0e14 	add.w	lr, r5, #20
 800619e:	46b1      	mov	r9, r6
 80061a0:	2200      	movs	r2, #0
 80061a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80061a6:	f8d9 b000 	ldr.w	fp, [r9]
 80061aa:	b2a1      	uxth	r1, r4
 80061ac:	fa1f fb8b 	uxth.w	fp, fp
 80061b0:	fb0a b101 	mla	r1, sl, r1, fp
 80061b4:	4411      	add	r1, r2
 80061b6:	f8d9 2000 	ldr.w	r2, [r9]
 80061ba:	0c24      	lsrs	r4, r4, #16
 80061bc:	0c12      	lsrs	r2, r2, #16
 80061be:	fb0a 2404 	mla	r4, sl, r4, r2
 80061c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80061c6:	b289      	uxth	r1, r1
 80061c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80061cc:	45f4      	cmp	ip, lr
 80061ce:	f849 1b04 	str.w	r1, [r9], #4
 80061d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80061d6:	d8e4      	bhi.n	80061a2 <__multiply+0xaa>
 80061d8:	9901      	ldr	r1, [sp, #4]
 80061da:	5072      	str	r2, [r6, r1]
 80061dc:	9a03      	ldr	r2, [sp, #12]
 80061de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061e2:	3304      	adds	r3, #4
 80061e4:	f1b9 0f00 	cmp.w	r9, #0
 80061e8:	d01f      	beq.n	800622a <__multiply+0x132>
 80061ea:	6834      	ldr	r4, [r6, #0]
 80061ec:	f105 0114 	add.w	r1, r5, #20
 80061f0:	46b6      	mov	lr, r6
 80061f2:	f04f 0a00 	mov.w	sl, #0
 80061f6:	880a      	ldrh	r2, [r1, #0]
 80061f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80061fc:	fb09 b202 	mla	r2, r9, r2, fp
 8006200:	4492      	add	sl, r2
 8006202:	b2a4      	uxth	r4, r4
 8006204:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006208:	f84e 4b04 	str.w	r4, [lr], #4
 800620c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006210:	f8be 2000 	ldrh.w	r2, [lr]
 8006214:	0c24      	lsrs	r4, r4, #16
 8006216:	fb09 2404 	mla	r4, r9, r4, r2
 800621a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800621e:	458c      	cmp	ip, r1
 8006220:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006224:	d8e7      	bhi.n	80061f6 <__multiply+0xfe>
 8006226:	9a01      	ldr	r2, [sp, #4]
 8006228:	50b4      	str	r4, [r6, r2]
 800622a:	3604      	adds	r6, #4
 800622c:	e7a3      	b.n	8006176 <__multiply+0x7e>
 800622e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1a5      	bne.n	8006182 <__multiply+0x8a>
 8006236:	3f01      	subs	r7, #1
 8006238:	e7a1      	b.n	800617e <__multiply+0x86>
 800623a:	bf00      	nop
 800623c:	080076d3 	.word	0x080076d3
 8006240:	080076e4 	.word	0x080076e4

08006244 <__pow5mult>:
 8006244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006248:	4615      	mov	r5, r2
 800624a:	f012 0203 	ands.w	r2, r2, #3
 800624e:	4606      	mov	r6, r0
 8006250:	460f      	mov	r7, r1
 8006252:	d007      	beq.n	8006264 <__pow5mult+0x20>
 8006254:	4c25      	ldr	r4, [pc, #148]	; (80062ec <__pow5mult+0xa8>)
 8006256:	3a01      	subs	r2, #1
 8006258:	2300      	movs	r3, #0
 800625a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800625e:	f7ff fe9b 	bl	8005f98 <__multadd>
 8006262:	4607      	mov	r7, r0
 8006264:	10ad      	asrs	r5, r5, #2
 8006266:	d03d      	beq.n	80062e4 <__pow5mult+0xa0>
 8006268:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800626a:	b97c      	cbnz	r4, 800628c <__pow5mult+0x48>
 800626c:	2010      	movs	r0, #16
 800626e:	f7ff fe1b 	bl	8005ea8 <malloc>
 8006272:	4602      	mov	r2, r0
 8006274:	6270      	str	r0, [r6, #36]	; 0x24
 8006276:	b928      	cbnz	r0, 8006284 <__pow5mult+0x40>
 8006278:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <__pow5mult+0xac>)
 800627a:	481e      	ldr	r0, [pc, #120]	; (80062f4 <__pow5mult+0xb0>)
 800627c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006280:	f000 fbcc 	bl	8006a1c <__assert_func>
 8006284:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006288:	6004      	str	r4, [r0, #0]
 800628a:	60c4      	str	r4, [r0, #12]
 800628c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006290:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006294:	b94c      	cbnz	r4, 80062aa <__pow5mult+0x66>
 8006296:	f240 2171 	movw	r1, #625	; 0x271
 800629a:	4630      	mov	r0, r6
 800629c:	f7ff ff16 	bl	80060cc <__i2b>
 80062a0:	2300      	movs	r3, #0
 80062a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80062a6:	4604      	mov	r4, r0
 80062a8:	6003      	str	r3, [r0, #0]
 80062aa:	f04f 0900 	mov.w	r9, #0
 80062ae:	07eb      	lsls	r3, r5, #31
 80062b0:	d50a      	bpl.n	80062c8 <__pow5mult+0x84>
 80062b2:	4639      	mov	r1, r7
 80062b4:	4622      	mov	r2, r4
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7ff ff1e 	bl	80060f8 <__multiply>
 80062bc:	4639      	mov	r1, r7
 80062be:	4680      	mov	r8, r0
 80062c0:	4630      	mov	r0, r6
 80062c2:	f7ff fe47 	bl	8005f54 <_Bfree>
 80062c6:	4647      	mov	r7, r8
 80062c8:	106d      	asrs	r5, r5, #1
 80062ca:	d00b      	beq.n	80062e4 <__pow5mult+0xa0>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	b938      	cbnz	r0, 80062e0 <__pow5mult+0x9c>
 80062d0:	4622      	mov	r2, r4
 80062d2:	4621      	mov	r1, r4
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7ff ff0f 	bl	80060f8 <__multiply>
 80062da:	6020      	str	r0, [r4, #0]
 80062dc:	f8c0 9000 	str.w	r9, [r0]
 80062e0:	4604      	mov	r4, r0
 80062e2:	e7e4      	b.n	80062ae <__pow5mult+0x6a>
 80062e4:	4638      	mov	r0, r7
 80062e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ea:	bf00      	nop
 80062ec:	08007838 	.word	0x08007838
 80062f0:	0800765d 	.word	0x0800765d
 80062f4:	080076e4 	.word	0x080076e4

080062f8 <__lshift>:
 80062f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062fc:	460c      	mov	r4, r1
 80062fe:	6849      	ldr	r1, [r1, #4]
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	4607      	mov	r7, r0
 800630a:	4691      	mov	r9, r2
 800630c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006310:	f108 0601 	add.w	r6, r8, #1
 8006314:	42b3      	cmp	r3, r6
 8006316:	db0b      	blt.n	8006330 <__lshift+0x38>
 8006318:	4638      	mov	r0, r7
 800631a:	f7ff fddb 	bl	8005ed4 <_Balloc>
 800631e:	4605      	mov	r5, r0
 8006320:	b948      	cbnz	r0, 8006336 <__lshift+0x3e>
 8006322:	4602      	mov	r2, r0
 8006324:	4b28      	ldr	r3, [pc, #160]	; (80063c8 <__lshift+0xd0>)
 8006326:	4829      	ldr	r0, [pc, #164]	; (80063cc <__lshift+0xd4>)
 8006328:	f240 11d9 	movw	r1, #473	; 0x1d9
 800632c:	f000 fb76 	bl	8006a1c <__assert_func>
 8006330:	3101      	adds	r1, #1
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	e7ee      	b.n	8006314 <__lshift+0x1c>
 8006336:	2300      	movs	r3, #0
 8006338:	f100 0114 	add.w	r1, r0, #20
 800633c:	f100 0210 	add.w	r2, r0, #16
 8006340:	4618      	mov	r0, r3
 8006342:	4553      	cmp	r3, sl
 8006344:	db33      	blt.n	80063ae <__lshift+0xb6>
 8006346:	6920      	ldr	r0, [r4, #16]
 8006348:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800634c:	f104 0314 	add.w	r3, r4, #20
 8006350:	f019 091f 	ands.w	r9, r9, #31
 8006354:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006358:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800635c:	d02b      	beq.n	80063b6 <__lshift+0xbe>
 800635e:	f1c9 0e20 	rsb	lr, r9, #32
 8006362:	468a      	mov	sl, r1
 8006364:	2200      	movs	r2, #0
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	fa00 f009 	lsl.w	r0, r0, r9
 800636c:	4302      	orrs	r2, r0
 800636e:	f84a 2b04 	str.w	r2, [sl], #4
 8006372:	f853 2b04 	ldr.w	r2, [r3], #4
 8006376:	459c      	cmp	ip, r3
 8006378:	fa22 f20e 	lsr.w	r2, r2, lr
 800637c:	d8f3      	bhi.n	8006366 <__lshift+0x6e>
 800637e:	ebac 0304 	sub.w	r3, ip, r4
 8006382:	3b15      	subs	r3, #21
 8006384:	f023 0303 	bic.w	r3, r3, #3
 8006388:	3304      	adds	r3, #4
 800638a:	f104 0015 	add.w	r0, r4, #21
 800638e:	4584      	cmp	ip, r0
 8006390:	bf38      	it	cc
 8006392:	2304      	movcc	r3, #4
 8006394:	50ca      	str	r2, [r1, r3]
 8006396:	b10a      	cbz	r2, 800639c <__lshift+0xa4>
 8006398:	f108 0602 	add.w	r6, r8, #2
 800639c:	3e01      	subs	r6, #1
 800639e:	4638      	mov	r0, r7
 80063a0:	612e      	str	r6, [r5, #16]
 80063a2:	4621      	mov	r1, r4
 80063a4:	f7ff fdd6 	bl	8005f54 <_Bfree>
 80063a8:	4628      	mov	r0, r5
 80063aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80063b2:	3301      	adds	r3, #1
 80063b4:	e7c5      	b.n	8006342 <__lshift+0x4a>
 80063b6:	3904      	subs	r1, #4
 80063b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80063c0:	459c      	cmp	ip, r3
 80063c2:	d8f9      	bhi.n	80063b8 <__lshift+0xc0>
 80063c4:	e7ea      	b.n	800639c <__lshift+0xa4>
 80063c6:	bf00      	nop
 80063c8:	080076d3 	.word	0x080076d3
 80063cc:	080076e4 	.word	0x080076e4

080063d0 <__mcmp>:
 80063d0:	b530      	push	{r4, r5, lr}
 80063d2:	6902      	ldr	r2, [r0, #16]
 80063d4:	690c      	ldr	r4, [r1, #16]
 80063d6:	1b12      	subs	r2, r2, r4
 80063d8:	d10e      	bne.n	80063f8 <__mcmp+0x28>
 80063da:	f100 0314 	add.w	r3, r0, #20
 80063de:	3114      	adds	r1, #20
 80063e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80063e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80063e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80063ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80063f0:	42a5      	cmp	r5, r4
 80063f2:	d003      	beq.n	80063fc <__mcmp+0x2c>
 80063f4:	d305      	bcc.n	8006402 <__mcmp+0x32>
 80063f6:	2201      	movs	r2, #1
 80063f8:	4610      	mov	r0, r2
 80063fa:	bd30      	pop	{r4, r5, pc}
 80063fc:	4283      	cmp	r3, r0
 80063fe:	d3f3      	bcc.n	80063e8 <__mcmp+0x18>
 8006400:	e7fa      	b.n	80063f8 <__mcmp+0x28>
 8006402:	f04f 32ff 	mov.w	r2, #4294967295
 8006406:	e7f7      	b.n	80063f8 <__mcmp+0x28>

08006408 <__mdiff>:
 8006408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	460c      	mov	r4, r1
 800640e:	4606      	mov	r6, r0
 8006410:	4611      	mov	r1, r2
 8006412:	4620      	mov	r0, r4
 8006414:	4617      	mov	r7, r2
 8006416:	f7ff ffdb 	bl	80063d0 <__mcmp>
 800641a:	1e05      	subs	r5, r0, #0
 800641c:	d110      	bne.n	8006440 <__mdiff+0x38>
 800641e:	4629      	mov	r1, r5
 8006420:	4630      	mov	r0, r6
 8006422:	f7ff fd57 	bl	8005ed4 <_Balloc>
 8006426:	b930      	cbnz	r0, 8006436 <__mdiff+0x2e>
 8006428:	4b39      	ldr	r3, [pc, #228]	; (8006510 <__mdiff+0x108>)
 800642a:	4602      	mov	r2, r0
 800642c:	f240 2132 	movw	r1, #562	; 0x232
 8006430:	4838      	ldr	r0, [pc, #224]	; (8006514 <__mdiff+0x10c>)
 8006432:	f000 faf3 	bl	8006a1c <__assert_func>
 8006436:	2301      	movs	r3, #1
 8006438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800643c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006440:	bfa4      	itt	ge
 8006442:	463b      	movge	r3, r7
 8006444:	4627      	movge	r7, r4
 8006446:	4630      	mov	r0, r6
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	bfa6      	itte	ge
 800644c:	461c      	movge	r4, r3
 800644e:	2500      	movge	r5, #0
 8006450:	2501      	movlt	r5, #1
 8006452:	f7ff fd3f 	bl	8005ed4 <_Balloc>
 8006456:	b920      	cbnz	r0, 8006462 <__mdiff+0x5a>
 8006458:	4b2d      	ldr	r3, [pc, #180]	; (8006510 <__mdiff+0x108>)
 800645a:	4602      	mov	r2, r0
 800645c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006460:	e7e6      	b.n	8006430 <__mdiff+0x28>
 8006462:	693e      	ldr	r6, [r7, #16]
 8006464:	60c5      	str	r5, [r0, #12]
 8006466:	6925      	ldr	r5, [r4, #16]
 8006468:	f107 0114 	add.w	r1, r7, #20
 800646c:	f104 0914 	add.w	r9, r4, #20
 8006470:	f100 0e14 	add.w	lr, r0, #20
 8006474:	f107 0210 	add.w	r2, r7, #16
 8006478:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800647c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006480:	46f2      	mov	sl, lr
 8006482:	2700      	movs	r7, #0
 8006484:	f859 3b04 	ldr.w	r3, [r9], #4
 8006488:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800648c:	fa1f f883 	uxth.w	r8, r3
 8006490:	fa17 f78b 	uxtah	r7, r7, fp
 8006494:	0c1b      	lsrs	r3, r3, #16
 8006496:	eba7 0808 	sub.w	r8, r7, r8
 800649a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800649e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80064a2:	fa1f f888 	uxth.w	r8, r8
 80064a6:	141f      	asrs	r7, r3, #16
 80064a8:	454d      	cmp	r5, r9
 80064aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80064ae:	f84a 3b04 	str.w	r3, [sl], #4
 80064b2:	d8e7      	bhi.n	8006484 <__mdiff+0x7c>
 80064b4:	1b2b      	subs	r3, r5, r4
 80064b6:	3b15      	subs	r3, #21
 80064b8:	f023 0303 	bic.w	r3, r3, #3
 80064bc:	3304      	adds	r3, #4
 80064be:	3415      	adds	r4, #21
 80064c0:	42a5      	cmp	r5, r4
 80064c2:	bf38      	it	cc
 80064c4:	2304      	movcc	r3, #4
 80064c6:	4419      	add	r1, r3
 80064c8:	4473      	add	r3, lr
 80064ca:	469e      	mov	lr, r3
 80064cc:	460d      	mov	r5, r1
 80064ce:	4565      	cmp	r5, ip
 80064d0:	d30e      	bcc.n	80064f0 <__mdiff+0xe8>
 80064d2:	f10c 0203 	add.w	r2, ip, #3
 80064d6:	1a52      	subs	r2, r2, r1
 80064d8:	f022 0203 	bic.w	r2, r2, #3
 80064dc:	3903      	subs	r1, #3
 80064de:	458c      	cmp	ip, r1
 80064e0:	bf38      	it	cc
 80064e2:	2200      	movcc	r2, #0
 80064e4:	441a      	add	r2, r3
 80064e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80064ea:	b17b      	cbz	r3, 800650c <__mdiff+0x104>
 80064ec:	6106      	str	r6, [r0, #16]
 80064ee:	e7a5      	b.n	800643c <__mdiff+0x34>
 80064f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80064f4:	fa17 f488 	uxtah	r4, r7, r8
 80064f8:	1422      	asrs	r2, r4, #16
 80064fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80064fe:	b2a4      	uxth	r4, r4
 8006500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006504:	f84e 4b04 	str.w	r4, [lr], #4
 8006508:	1417      	asrs	r7, r2, #16
 800650a:	e7e0      	b.n	80064ce <__mdiff+0xc6>
 800650c:	3e01      	subs	r6, #1
 800650e:	e7ea      	b.n	80064e6 <__mdiff+0xde>
 8006510:	080076d3 	.word	0x080076d3
 8006514:	080076e4 	.word	0x080076e4

08006518 <__d2b>:
 8006518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800651c:	4689      	mov	r9, r1
 800651e:	2101      	movs	r1, #1
 8006520:	ec57 6b10 	vmov	r6, r7, d0
 8006524:	4690      	mov	r8, r2
 8006526:	f7ff fcd5 	bl	8005ed4 <_Balloc>
 800652a:	4604      	mov	r4, r0
 800652c:	b930      	cbnz	r0, 800653c <__d2b+0x24>
 800652e:	4602      	mov	r2, r0
 8006530:	4b25      	ldr	r3, [pc, #148]	; (80065c8 <__d2b+0xb0>)
 8006532:	4826      	ldr	r0, [pc, #152]	; (80065cc <__d2b+0xb4>)
 8006534:	f240 310a 	movw	r1, #778	; 0x30a
 8006538:	f000 fa70 	bl	8006a1c <__assert_func>
 800653c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006544:	bb35      	cbnz	r5, 8006594 <__d2b+0x7c>
 8006546:	2e00      	cmp	r6, #0
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	d028      	beq.n	800659e <__d2b+0x86>
 800654c:	4668      	mov	r0, sp
 800654e:	9600      	str	r6, [sp, #0]
 8006550:	f7ff fd8c 	bl	800606c <__lo0bits>
 8006554:	9900      	ldr	r1, [sp, #0]
 8006556:	b300      	cbz	r0, 800659a <__d2b+0x82>
 8006558:	9a01      	ldr	r2, [sp, #4]
 800655a:	f1c0 0320 	rsb	r3, r0, #32
 800655e:	fa02 f303 	lsl.w	r3, r2, r3
 8006562:	430b      	orrs	r3, r1
 8006564:	40c2      	lsrs	r2, r0
 8006566:	6163      	str	r3, [r4, #20]
 8006568:	9201      	str	r2, [sp, #4]
 800656a:	9b01      	ldr	r3, [sp, #4]
 800656c:	61a3      	str	r3, [r4, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	bf14      	ite	ne
 8006572:	2202      	movne	r2, #2
 8006574:	2201      	moveq	r2, #1
 8006576:	6122      	str	r2, [r4, #16]
 8006578:	b1d5      	cbz	r5, 80065b0 <__d2b+0x98>
 800657a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800657e:	4405      	add	r5, r0
 8006580:	f8c9 5000 	str.w	r5, [r9]
 8006584:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006588:	f8c8 0000 	str.w	r0, [r8]
 800658c:	4620      	mov	r0, r4
 800658e:	b003      	add	sp, #12
 8006590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006598:	e7d5      	b.n	8006546 <__d2b+0x2e>
 800659a:	6161      	str	r1, [r4, #20]
 800659c:	e7e5      	b.n	800656a <__d2b+0x52>
 800659e:	a801      	add	r0, sp, #4
 80065a0:	f7ff fd64 	bl	800606c <__lo0bits>
 80065a4:	9b01      	ldr	r3, [sp, #4]
 80065a6:	6163      	str	r3, [r4, #20]
 80065a8:	2201      	movs	r2, #1
 80065aa:	6122      	str	r2, [r4, #16]
 80065ac:	3020      	adds	r0, #32
 80065ae:	e7e3      	b.n	8006578 <__d2b+0x60>
 80065b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065b8:	f8c9 0000 	str.w	r0, [r9]
 80065bc:	6918      	ldr	r0, [r3, #16]
 80065be:	f7ff fd35 	bl	800602c <__hi0bits>
 80065c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065c6:	e7df      	b.n	8006588 <__d2b+0x70>
 80065c8:	080076d3 	.word	0x080076d3
 80065cc:	080076e4 	.word	0x080076e4

080065d0 <_calloc_r>:
 80065d0:	b513      	push	{r0, r1, r4, lr}
 80065d2:	434a      	muls	r2, r1
 80065d4:	4611      	mov	r1, r2
 80065d6:	9201      	str	r2, [sp, #4]
 80065d8:	f000 f85a 	bl	8006690 <_malloc_r>
 80065dc:	4604      	mov	r4, r0
 80065de:	b118      	cbz	r0, 80065e8 <_calloc_r+0x18>
 80065e0:	9a01      	ldr	r2, [sp, #4]
 80065e2:	2100      	movs	r1, #0
 80065e4:	f7fe f950 	bl	8004888 <memset>
 80065e8:	4620      	mov	r0, r4
 80065ea:	b002      	add	sp, #8
 80065ec:	bd10      	pop	{r4, pc}
	...

080065f0 <_free_r>:
 80065f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065f2:	2900      	cmp	r1, #0
 80065f4:	d048      	beq.n	8006688 <_free_r+0x98>
 80065f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065fa:	9001      	str	r0, [sp, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006602:	bfb8      	it	lt
 8006604:	18e4      	addlt	r4, r4, r3
 8006606:	f000 fa65 	bl	8006ad4 <__malloc_lock>
 800660a:	4a20      	ldr	r2, [pc, #128]	; (800668c <_free_r+0x9c>)
 800660c:	9801      	ldr	r0, [sp, #4]
 800660e:	6813      	ldr	r3, [r2, #0]
 8006610:	4615      	mov	r5, r2
 8006612:	b933      	cbnz	r3, 8006622 <_free_r+0x32>
 8006614:	6063      	str	r3, [r4, #4]
 8006616:	6014      	str	r4, [r2, #0]
 8006618:	b003      	add	sp, #12
 800661a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800661e:	f000 ba5f 	b.w	8006ae0 <__malloc_unlock>
 8006622:	42a3      	cmp	r3, r4
 8006624:	d90b      	bls.n	800663e <_free_r+0x4e>
 8006626:	6821      	ldr	r1, [r4, #0]
 8006628:	1862      	adds	r2, r4, r1
 800662a:	4293      	cmp	r3, r2
 800662c:	bf04      	itt	eq
 800662e:	681a      	ldreq	r2, [r3, #0]
 8006630:	685b      	ldreq	r3, [r3, #4]
 8006632:	6063      	str	r3, [r4, #4]
 8006634:	bf04      	itt	eq
 8006636:	1852      	addeq	r2, r2, r1
 8006638:	6022      	streq	r2, [r4, #0]
 800663a:	602c      	str	r4, [r5, #0]
 800663c:	e7ec      	b.n	8006618 <_free_r+0x28>
 800663e:	461a      	mov	r2, r3
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	b10b      	cbz	r3, 8006648 <_free_r+0x58>
 8006644:	42a3      	cmp	r3, r4
 8006646:	d9fa      	bls.n	800663e <_free_r+0x4e>
 8006648:	6811      	ldr	r1, [r2, #0]
 800664a:	1855      	adds	r5, r2, r1
 800664c:	42a5      	cmp	r5, r4
 800664e:	d10b      	bne.n	8006668 <_free_r+0x78>
 8006650:	6824      	ldr	r4, [r4, #0]
 8006652:	4421      	add	r1, r4
 8006654:	1854      	adds	r4, r2, r1
 8006656:	42a3      	cmp	r3, r4
 8006658:	6011      	str	r1, [r2, #0]
 800665a:	d1dd      	bne.n	8006618 <_free_r+0x28>
 800665c:	681c      	ldr	r4, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	6053      	str	r3, [r2, #4]
 8006662:	4421      	add	r1, r4
 8006664:	6011      	str	r1, [r2, #0]
 8006666:	e7d7      	b.n	8006618 <_free_r+0x28>
 8006668:	d902      	bls.n	8006670 <_free_r+0x80>
 800666a:	230c      	movs	r3, #12
 800666c:	6003      	str	r3, [r0, #0]
 800666e:	e7d3      	b.n	8006618 <_free_r+0x28>
 8006670:	6825      	ldr	r5, [r4, #0]
 8006672:	1961      	adds	r1, r4, r5
 8006674:	428b      	cmp	r3, r1
 8006676:	bf04      	itt	eq
 8006678:	6819      	ldreq	r1, [r3, #0]
 800667a:	685b      	ldreq	r3, [r3, #4]
 800667c:	6063      	str	r3, [r4, #4]
 800667e:	bf04      	itt	eq
 8006680:	1949      	addeq	r1, r1, r5
 8006682:	6021      	streq	r1, [r4, #0]
 8006684:	6054      	str	r4, [r2, #4]
 8006686:	e7c7      	b.n	8006618 <_free_r+0x28>
 8006688:	b003      	add	sp, #12
 800668a:	bd30      	pop	{r4, r5, pc}
 800668c:	20000208 	.word	0x20000208

08006690 <_malloc_r>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	1ccd      	adds	r5, r1, #3
 8006694:	f025 0503 	bic.w	r5, r5, #3
 8006698:	3508      	adds	r5, #8
 800669a:	2d0c      	cmp	r5, #12
 800669c:	bf38      	it	cc
 800669e:	250c      	movcc	r5, #12
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	4606      	mov	r6, r0
 80066a4:	db01      	blt.n	80066aa <_malloc_r+0x1a>
 80066a6:	42a9      	cmp	r1, r5
 80066a8:	d903      	bls.n	80066b2 <_malloc_r+0x22>
 80066aa:	230c      	movs	r3, #12
 80066ac:	6033      	str	r3, [r6, #0]
 80066ae:	2000      	movs	r0, #0
 80066b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b2:	f000 fa0f 	bl	8006ad4 <__malloc_lock>
 80066b6:	4921      	ldr	r1, [pc, #132]	; (800673c <_malloc_r+0xac>)
 80066b8:	680a      	ldr	r2, [r1, #0]
 80066ba:	4614      	mov	r4, r2
 80066bc:	b99c      	cbnz	r4, 80066e6 <_malloc_r+0x56>
 80066be:	4f20      	ldr	r7, [pc, #128]	; (8006740 <_malloc_r+0xb0>)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	b923      	cbnz	r3, 80066ce <_malloc_r+0x3e>
 80066c4:	4621      	mov	r1, r4
 80066c6:	4630      	mov	r0, r6
 80066c8:	f000 f998 	bl	80069fc <_sbrk_r>
 80066cc:	6038      	str	r0, [r7, #0]
 80066ce:	4629      	mov	r1, r5
 80066d0:	4630      	mov	r0, r6
 80066d2:	f000 f993 	bl	80069fc <_sbrk_r>
 80066d6:	1c43      	adds	r3, r0, #1
 80066d8:	d123      	bne.n	8006722 <_malloc_r+0x92>
 80066da:	230c      	movs	r3, #12
 80066dc:	6033      	str	r3, [r6, #0]
 80066de:	4630      	mov	r0, r6
 80066e0:	f000 f9fe 	bl	8006ae0 <__malloc_unlock>
 80066e4:	e7e3      	b.n	80066ae <_malloc_r+0x1e>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	1b5b      	subs	r3, r3, r5
 80066ea:	d417      	bmi.n	800671c <_malloc_r+0x8c>
 80066ec:	2b0b      	cmp	r3, #11
 80066ee:	d903      	bls.n	80066f8 <_malloc_r+0x68>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	441c      	add	r4, r3
 80066f4:	6025      	str	r5, [r4, #0]
 80066f6:	e004      	b.n	8006702 <_malloc_r+0x72>
 80066f8:	6863      	ldr	r3, [r4, #4]
 80066fa:	42a2      	cmp	r2, r4
 80066fc:	bf0c      	ite	eq
 80066fe:	600b      	streq	r3, [r1, #0]
 8006700:	6053      	strne	r3, [r2, #4]
 8006702:	4630      	mov	r0, r6
 8006704:	f000 f9ec 	bl	8006ae0 <__malloc_unlock>
 8006708:	f104 000b 	add.w	r0, r4, #11
 800670c:	1d23      	adds	r3, r4, #4
 800670e:	f020 0007 	bic.w	r0, r0, #7
 8006712:	1ac2      	subs	r2, r0, r3
 8006714:	d0cc      	beq.n	80066b0 <_malloc_r+0x20>
 8006716:	1a1b      	subs	r3, r3, r0
 8006718:	50a3      	str	r3, [r4, r2]
 800671a:	e7c9      	b.n	80066b0 <_malloc_r+0x20>
 800671c:	4622      	mov	r2, r4
 800671e:	6864      	ldr	r4, [r4, #4]
 8006720:	e7cc      	b.n	80066bc <_malloc_r+0x2c>
 8006722:	1cc4      	adds	r4, r0, #3
 8006724:	f024 0403 	bic.w	r4, r4, #3
 8006728:	42a0      	cmp	r0, r4
 800672a:	d0e3      	beq.n	80066f4 <_malloc_r+0x64>
 800672c:	1a21      	subs	r1, r4, r0
 800672e:	4630      	mov	r0, r6
 8006730:	f000 f964 	bl	80069fc <_sbrk_r>
 8006734:	3001      	adds	r0, #1
 8006736:	d1dd      	bne.n	80066f4 <_malloc_r+0x64>
 8006738:	e7cf      	b.n	80066da <_malloc_r+0x4a>
 800673a:	bf00      	nop
 800673c:	20000208 	.word	0x20000208
 8006740:	2000020c 	.word	0x2000020c

08006744 <__ssputs_r>:
 8006744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006748:	688e      	ldr	r6, [r1, #8]
 800674a:	429e      	cmp	r6, r3
 800674c:	4682      	mov	sl, r0
 800674e:	460c      	mov	r4, r1
 8006750:	4690      	mov	r8, r2
 8006752:	461f      	mov	r7, r3
 8006754:	d838      	bhi.n	80067c8 <__ssputs_r+0x84>
 8006756:	898a      	ldrh	r2, [r1, #12]
 8006758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800675c:	d032      	beq.n	80067c4 <__ssputs_r+0x80>
 800675e:	6825      	ldr	r5, [r4, #0]
 8006760:	6909      	ldr	r1, [r1, #16]
 8006762:	eba5 0901 	sub.w	r9, r5, r1
 8006766:	6965      	ldr	r5, [r4, #20]
 8006768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800676c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006770:	3301      	adds	r3, #1
 8006772:	444b      	add	r3, r9
 8006774:	106d      	asrs	r5, r5, #1
 8006776:	429d      	cmp	r5, r3
 8006778:	bf38      	it	cc
 800677a:	461d      	movcc	r5, r3
 800677c:	0553      	lsls	r3, r2, #21
 800677e:	d531      	bpl.n	80067e4 <__ssputs_r+0xa0>
 8006780:	4629      	mov	r1, r5
 8006782:	f7ff ff85 	bl	8006690 <_malloc_r>
 8006786:	4606      	mov	r6, r0
 8006788:	b950      	cbnz	r0, 80067a0 <__ssputs_r+0x5c>
 800678a:	230c      	movs	r3, #12
 800678c:	f8ca 3000 	str.w	r3, [sl]
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006796:	81a3      	strh	r3, [r4, #12]
 8006798:	f04f 30ff 	mov.w	r0, #4294967295
 800679c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a0:	6921      	ldr	r1, [r4, #16]
 80067a2:	464a      	mov	r2, r9
 80067a4:	f7ff fb88 	bl	8005eb8 <memcpy>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b2:	81a3      	strh	r3, [r4, #12]
 80067b4:	6126      	str	r6, [r4, #16]
 80067b6:	6165      	str	r5, [r4, #20]
 80067b8:	444e      	add	r6, r9
 80067ba:	eba5 0509 	sub.w	r5, r5, r9
 80067be:	6026      	str	r6, [r4, #0]
 80067c0:	60a5      	str	r5, [r4, #8]
 80067c2:	463e      	mov	r6, r7
 80067c4:	42be      	cmp	r6, r7
 80067c6:	d900      	bls.n	80067ca <__ssputs_r+0x86>
 80067c8:	463e      	mov	r6, r7
 80067ca:	4632      	mov	r2, r6
 80067cc:	6820      	ldr	r0, [r4, #0]
 80067ce:	4641      	mov	r1, r8
 80067d0:	f000 f966 	bl	8006aa0 <memmove>
 80067d4:	68a3      	ldr	r3, [r4, #8]
 80067d6:	6822      	ldr	r2, [r4, #0]
 80067d8:	1b9b      	subs	r3, r3, r6
 80067da:	4432      	add	r2, r6
 80067dc:	60a3      	str	r3, [r4, #8]
 80067de:	6022      	str	r2, [r4, #0]
 80067e0:	2000      	movs	r0, #0
 80067e2:	e7db      	b.n	800679c <__ssputs_r+0x58>
 80067e4:	462a      	mov	r2, r5
 80067e6:	f000 f981 	bl	8006aec <_realloc_r>
 80067ea:	4606      	mov	r6, r0
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d1e1      	bne.n	80067b4 <__ssputs_r+0x70>
 80067f0:	6921      	ldr	r1, [r4, #16]
 80067f2:	4650      	mov	r0, sl
 80067f4:	f7ff fefc 	bl	80065f0 <_free_r>
 80067f8:	e7c7      	b.n	800678a <__ssputs_r+0x46>
	...

080067fc <_svfiprintf_r>:
 80067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	4698      	mov	r8, r3
 8006802:	898b      	ldrh	r3, [r1, #12]
 8006804:	061b      	lsls	r3, r3, #24
 8006806:	b09d      	sub	sp, #116	; 0x74
 8006808:	4607      	mov	r7, r0
 800680a:	460d      	mov	r5, r1
 800680c:	4614      	mov	r4, r2
 800680e:	d50e      	bpl.n	800682e <_svfiprintf_r+0x32>
 8006810:	690b      	ldr	r3, [r1, #16]
 8006812:	b963      	cbnz	r3, 800682e <_svfiprintf_r+0x32>
 8006814:	2140      	movs	r1, #64	; 0x40
 8006816:	f7ff ff3b 	bl	8006690 <_malloc_r>
 800681a:	6028      	str	r0, [r5, #0]
 800681c:	6128      	str	r0, [r5, #16]
 800681e:	b920      	cbnz	r0, 800682a <_svfiprintf_r+0x2e>
 8006820:	230c      	movs	r3, #12
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	f04f 30ff 	mov.w	r0, #4294967295
 8006828:	e0d1      	b.n	80069ce <_svfiprintf_r+0x1d2>
 800682a:	2340      	movs	r3, #64	; 0x40
 800682c:	616b      	str	r3, [r5, #20]
 800682e:	2300      	movs	r3, #0
 8006830:	9309      	str	r3, [sp, #36]	; 0x24
 8006832:	2320      	movs	r3, #32
 8006834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006838:	f8cd 800c 	str.w	r8, [sp, #12]
 800683c:	2330      	movs	r3, #48	; 0x30
 800683e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069e8 <_svfiprintf_r+0x1ec>
 8006842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006846:	f04f 0901 	mov.w	r9, #1
 800684a:	4623      	mov	r3, r4
 800684c:	469a      	mov	sl, r3
 800684e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006852:	b10a      	cbz	r2, 8006858 <_svfiprintf_r+0x5c>
 8006854:	2a25      	cmp	r2, #37	; 0x25
 8006856:	d1f9      	bne.n	800684c <_svfiprintf_r+0x50>
 8006858:	ebba 0b04 	subs.w	fp, sl, r4
 800685c:	d00b      	beq.n	8006876 <_svfiprintf_r+0x7a>
 800685e:	465b      	mov	r3, fp
 8006860:	4622      	mov	r2, r4
 8006862:	4629      	mov	r1, r5
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff ff6d 	bl	8006744 <__ssputs_r>
 800686a:	3001      	adds	r0, #1
 800686c:	f000 80aa 	beq.w	80069c4 <_svfiprintf_r+0x1c8>
 8006870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006872:	445a      	add	r2, fp
 8006874:	9209      	str	r2, [sp, #36]	; 0x24
 8006876:	f89a 3000 	ldrb.w	r3, [sl]
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80a2 	beq.w	80069c4 <_svfiprintf_r+0x1c8>
 8006880:	2300      	movs	r3, #0
 8006882:	f04f 32ff 	mov.w	r2, #4294967295
 8006886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800688a:	f10a 0a01 	add.w	sl, sl, #1
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	9307      	str	r3, [sp, #28]
 8006892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006896:	931a      	str	r3, [sp, #104]	; 0x68
 8006898:	4654      	mov	r4, sl
 800689a:	2205      	movs	r2, #5
 800689c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a0:	4851      	ldr	r0, [pc, #324]	; (80069e8 <_svfiprintf_r+0x1ec>)
 80068a2:	f7f9 fca5 	bl	80001f0 <memchr>
 80068a6:	9a04      	ldr	r2, [sp, #16]
 80068a8:	b9d8      	cbnz	r0, 80068e2 <_svfiprintf_r+0xe6>
 80068aa:	06d0      	lsls	r0, r2, #27
 80068ac:	bf44      	itt	mi
 80068ae:	2320      	movmi	r3, #32
 80068b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068b4:	0711      	lsls	r1, r2, #28
 80068b6:	bf44      	itt	mi
 80068b8:	232b      	movmi	r3, #43	; 0x2b
 80068ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068be:	f89a 3000 	ldrb.w	r3, [sl]
 80068c2:	2b2a      	cmp	r3, #42	; 0x2a
 80068c4:	d015      	beq.n	80068f2 <_svfiprintf_r+0xf6>
 80068c6:	9a07      	ldr	r2, [sp, #28]
 80068c8:	4654      	mov	r4, sl
 80068ca:	2000      	movs	r0, #0
 80068cc:	f04f 0c0a 	mov.w	ip, #10
 80068d0:	4621      	mov	r1, r4
 80068d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068d6:	3b30      	subs	r3, #48	; 0x30
 80068d8:	2b09      	cmp	r3, #9
 80068da:	d94e      	bls.n	800697a <_svfiprintf_r+0x17e>
 80068dc:	b1b0      	cbz	r0, 800690c <_svfiprintf_r+0x110>
 80068de:	9207      	str	r2, [sp, #28]
 80068e0:	e014      	b.n	800690c <_svfiprintf_r+0x110>
 80068e2:	eba0 0308 	sub.w	r3, r0, r8
 80068e6:	fa09 f303 	lsl.w	r3, r9, r3
 80068ea:	4313      	orrs	r3, r2
 80068ec:	9304      	str	r3, [sp, #16]
 80068ee:	46a2      	mov	sl, r4
 80068f0:	e7d2      	b.n	8006898 <_svfiprintf_r+0x9c>
 80068f2:	9b03      	ldr	r3, [sp, #12]
 80068f4:	1d19      	adds	r1, r3, #4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	9103      	str	r1, [sp, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bfbb      	ittet	lt
 80068fe:	425b      	neglt	r3, r3
 8006900:	f042 0202 	orrlt.w	r2, r2, #2
 8006904:	9307      	strge	r3, [sp, #28]
 8006906:	9307      	strlt	r3, [sp, #28]
 8006908:	bfb8      	it	lt
 800690a:	9204      	strlt	r2, [sp, #16]
 800690c:	7823      	ldrb	r3, [r4, #0]
 800690e:	2b2e      	cmp	r3, #46	; 0x2e
 8006910:	d10c      	bne.n	800692c <_svfiprintf_r+0x130>
 8006912:	7863      	ldrb	r3, [r4, #1]
 8006914:	2b2a      	cmp	r3, #42	; 0x2a
 8006916:	d135      	bne.n	8006984 <_svfiprintf_r+0x188>
 8006918:	9b03      	ldr	r3, [sp, #12]
 800691a:	1d1a      	adds	r2, r3, #4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	9203      	str	r2, [sp, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	bfb8      	it	lt
 8006924:	f04f 33ff 	movlt.w	r3, #4294967295
 8006928:	3402      	adds	r4, #2
 800692a:	9305      	str	r3, [sp, #20]
 800692c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069f8 <_svfiprintf_r+0x1fc>
 8006930:	7821      	ldrb	r1, [r4, #0]
 8006932:	2203      	movs	r2, #3
 8006934:	4650      	mov	r0, sl
 8006936:	f7f9 fc5b 	bl	80001f0 <memchr>
 800693a:	b140      	cbz	r0, 800694e <_svfiprintf_r+0x152>
 800693c:	2340      	movs	r3, #64	; 0x40
 800693e:	eba0 000a 	sub.w	r0, r0, sl
 8006942:	fa03 f000 	lsl.w	r0, r3, r0
 8006946:	9b04      	ldr	r3, [sp, #16]
 8006948:	4303      	orrs	r3, r0
 800694a:	3401      	adds	r4, #1
 800694c:	9304      	str	r3, [sp, #16]
 800694e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006952:	4826      	ldr	r0, [pc, #152]	; (80069ec <_svfiprintf_r+0x1f0>)
 8006954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006958:	2206      	movs	r2, #6
 800695a:	f7f9 fc49 	bl	80001f0 <memchr>
 800695e:	2800      	cmp	r0, #0
 8006960:	d038      	beq.n	80069d4 <_svfiprintf_r+0x1d8>
 8006962:	4b23      	ldr	r3, [pc, #140]	; (80069f0 <_svfiprintf_r+0x1f4>)
 8006964:	bb1b      	cbnz	r3, 80069ae <_svfiprintf_r+0x1b2>
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	3307      	adds	r3, #7
 800696a:	f023 0307 	bic.w	r3, r3, #7
 800696e:	3308      	adds	r3, #8
 8006970:	9303      	str	r3, [sp, #12]
 8006972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006974:	4433      	add	r3, r6
 8006976:	9309      	str	r3, [sp, #36]	; 0x24
 8006978:	e767      	b.n	800684a <_svfiprintf_r+0x4e>
 800697a:	fb0c 3202 	mla	r2, ip, r2, r3
 800697e:	460c      	mov	r4, r1
 8006980:	2001      	movs	r0, #1
 8006982:	e7a5      	b.n	80068d0 <_svfiprintf_r+0xd4>
 8006984:	2300      	movs	r3, #0
 8006986:	3401      	adds	r4, #1
 8006988:	9305      	str	r3, [sp, #20]
 800698a:	4619      	mov	r1, r3
 800698c:	f04f 0c0a 	mov.w	ip, #10
 8006990:	4620      	mov	r0, r4
 8006992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006996:	3a30      	subs	r2, #48	; 0x30
 8006998:	2a09      	cmp	r2, #9
 800699a:	d903      	bls.n	80069a4 <_svfiprintf_r+0x1a8>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0c5      	beq.n	800692c <_svfiprintf_r+0x130>
 80069a0:	9105      	str	r1, [sp, #20]
 80069a2:	e7c3      	b.n	800692c <_svfiprintf_r+0x130>
 80069a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069a8:	4604      	mov	r4, r0
 80069aa:	2301      	movs	r3, #1
 80069ac:	e7f0      	b.n	8006990 <_svfiprintf_r+0x194>
 80069ae:	ab03      	add	r3, sp, #12
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	462a      	mov	r2, r5
 80069b4:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <_svfiprintf_r+0x1f8>)
 80069b6:	a904      	add	r1, sp, #16
 80069b8:	4638      	mov	r0, r7
 80069ba:	f7fe f80d 	bl	80049d8 <_printf_float>
 80069be:	1c42      	adds	r2, r0, #1
 80069c0:	4606      	mov	r6, r0
 80069c2:	d1d6      	bne.n	8006972 <_svfiprintf_r+0x176>
 80069c4:	89ab      	ldrh	r3, [r5, #12]
 80069c6:	065b      	lsls	r3, r3, #25
 80069c8:	f53f af2c 	bmi.w	8006824 <_svfiprintf_r+0x28>
 80069cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ce:	b01d      	add	sp, #116	; 0x74
 80069d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d4:	ab03      	add	r3, sp, #12
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	462a      	mov	r2, r5
 80069da:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <_svfiprintf_r+0x1f8>)
 80069dc:	a904      	add	r1, sp, #16
 80069de:	4638      	mov	r0, r7
 80069e0:	f7fe fa9e 	bl	8004f20 <_printf_i>
 80069e4:	e7eb      	b.n	80069be <_svfiprintf_r+0x1c2>
 80069e6:	bf00      	nop
 80069e8:	08007844 	.word	0x08007844
 80069ec:	0800784e 	.word	0x0800784e
 80069f0:	080049d9 	.word	0x080049d9
 80069f4:	08006745 	.word	0x08006745
 80069f8:	0800784a 	.word	0x0800784a

080069fc <_sbrk_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4d06      	ldr	r5, [pc, #24]	; (8006a18 <_sbrk_r+0x1c>)
 8006a00:	2300      	movs	r3, #0
 8006a02:	4604      	mov	r4, r0
 8006a04:	4608      	mov	r0, r1
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	f7fa ff36 	bl	8001878 <_sbrk>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_sbrk_r+0x1a>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_sbrk_r+0x1a>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	200003ac 	.word	0x200003ac

08006a1c <__assert_func>:
 8006a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a1e:	4614      	mov	r4, r2
 8006a20:	461a      	mov	r2, r3
 8006a22:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <__assert_func+0x2c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4605      	mov	r5, r0
 8006a28:	68d8      	ldr	r0, [r3, #12]
 8006a2a:	b14c      	cbz	r4, 8006a40 <__assert_func+0x24>
 8006a2c:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <__assert_func+0x30>)
 8006a2e:	9100      	str	r1, [sp, #0]
 8006a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a34:	4906      	ldr	r1, [pc, #24]	; (8006a50 <__assert_func+0x34>)
 8006a36:	462b      	mov	r3, r5
 8006a38:	f000 f80e 	bl	8006a58 <fiprintf>
 8006a3c:	f000 faa4 	bl	8006f88 <abort>
 8006a40:	4b04      	ldr	r3, [pc, #16]	; (8006a54 <__assert_func+0x38>)
 8006a42:	461c      	mov	r4, r3
 8006a44:	e7f3      	b.n	8006a2e <__assert_func+0x12>
 8006a46:	bf00      	nop
 8006a48:	20000010 	.word	0x20000010
 8006a4c:	08007855 	.word	0x08007855
 8006a50:	08007862 	.word	0x08007862
 8006a54:	08007890 	.word	0x08007890

08006a58 <fiprintf>:
 8006a58:	b40e      	push	{r1, r2, r3}
 8006a5a:	b503      	push	{r0, r1, lr}
 8006a5c:	4601      	mov	r1, r0
 8006a5e:	ab03      	add	r3, sp, #12
 8006a60:	4805      	ldr	r0, [pc, #20]	; (8006a78 <fiprintf+0x20>)
 8006a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a66:	6800      	ldr	r0, [r0, #0]
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	f000 f88f 	bl	8006b8c <_vfiprintf_r>
 8006a6e:	b002      	add	sp, #8
 8006a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a74:	b003      	add	sp, #12
 8006a76:	4770      	bx	lr
 8006a78:	20000010 	.word	0x20000010

08006a7c <__ascii_mbtowc>:
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	b901      	cbnz	r1, 8006a82 <__ascii_mbtowc+0x6>
 8006a80:	a901      	add	r1, sp, #4
 8006a82:	b142      	cbz	r2, 8006a96 <__ascii_mbtowc+0x1a>
 8006a84:	b14b      	cbz	r3, 8006a9a <__ascii_mbtowc+0x1e>
 8006a86:	7813      	ldrb	r3, [r2, #0]
 8006a88:	600b      	str	r3, [r1, #0]
 8006a8a:	7812      	ldrb	r2, [r2, #0]
 8006a8c:	1e10      	subs	r0, r2, #0
 8006a8e:	bf18      	it	ne
 8006a90:	2001      	movne	r0, #1
 8006a92:	b002      	add	sp, #8
 8006a94:	4770      	bx	lr
 8006a96:	4610      	mov	r0, r2
 8006a98:	e7fb      	b.n	8006a92 <__ascii_mbtowc+0x16>
 8006a9a:	f06f 0001 	mvn.w	r0, #1
 8006a9e:	e7f8      	b.n	8006a92 <__ascii_mbtowc+0x16>

08006aa0 <memmove>:
 8006aa0:	4288      	cmp	r0, r1
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	eb01 0402 	add.w	r4, r1, r2
 8006aa8:	d902      	bls.n	8006ab0 <memmove+0x10>
 8006aaa:	4284      	cmp	r4, r0
 8006aac:	4623      	mov	r3, r4
 8006aae:	d807      	bhi.n	8006ac0 <memmove+0x20>
 8006ab0:	1e43      	subs	r3, r0, #1
 8006ab2:	42a1      	cmp	r1, r4
 8006ab4:	d008      	beq.n	8006ac8 <memmove+0x28>
 8006ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006abe:	e7f8      	b.n	8006ab2 <memmove+0x12>
 8006ac0:	4402      	add	r2, r0
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	428a      	cmp	r2, r1
 8006ac6:	d100      	bne.n	8006aca <memmove+0x2a>
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ad2:	e7f7      	b.n	8006ac4 <memmove+0x24>

08006ad4 <__malloc_lock>:
 8006ad4:	4801      	ldr	r0, [pc, #4]	; (8006adc <__malloc_lock+0x8>)
 8006ad6:	f000 bc17 	b.w	8007308 <__retarget_lock_acquire_recursive>
 8006ada:	bf00      	nop
 8006adc:	200003b4 	.word	0x200003b4

08006ae0 <__malloc_unlock>:
 8006ae0:	4801      	ldr	r0, [pc, #4]	; (8006ae8 <__malloc_unlock+0x8>)
 8006ae2:	f000 bc12 	b.w	800730a <__retarget_lock_release_recursive>
 8006ae6:	bf00      	nop
 8006ae8:	200003b4 	.word	0x200003b4

08006aec <_realloc_r>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	4607      	mov	r7, r0
 8006af0:	4614      	mov	r4, r2
 8006af2:	460e      	mov	r6, r1
 8006af4:	b921      	cbnz	r1, 8006b00 <_realloc_r+0x14>
 8006af6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006afa:	4611      	mov	r1, r2
 8006afc:	f7ff bdc8 	b.w	8006690 <_malloc_r>
 8006b00:	b922      	cbnz	r2, 8006b0c <_realloc_r+0x20>
 8006b02:	f7ff fd75 	bl	80065f0 <_free_r>
 8006b06:	4625      	mov	r5, r4
 8006b08:	4628      	mov	r0, r5
 8006b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b0c:	f000 fc62 	bl	80073d4 <_malloc_usable_size_r>
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d20f      	bcs.n	8006b34 <_realloc_r+0x48>
 8006b14:	4621      	mov	r1, r4
 8006b16:	4638      	mov	r0, r7
 8006b18:	f7ff fdba 	bl	8006690 <_malloc_r>
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d0f2      	beq.n	8006b08 <_realloc_r+0x1c>
 8006b22:	4631      	mov	r1, r6
 8006b24:	4622      	mov	r2, r4
 8006b26:	f7ff f9c7 	bl	8005eb8 <memcpy>
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	f7ff fd5f 	bl	80065f0 <_free_r>
 8006b32:	e7e9      	b.n	8006b08 <_realloc_r+0x1c>
 8006b34:	4635      	mov	r5, r6
 8006b36:	e7e7      	b.n	8006b08 <_realloc_r+0x1c>

08006b38 <__sfputc_r>:
 8006b38:	6893      	ldr	r3, [r2, #8]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	b410      	push	{r4}
 8006b40:	6093      	str	r3, [r2, #8]
 8006b42:	da08      	bge.n	8006b56 <__sfputc_r+0x1e>
 8006b44:	6994      	ldr	r4, [r2, #24]
 8006b46:	42a3      	cmp	r3, r4
 8006b48:	db01      	blt.n	8006b4e <__sfputc_r+0x16>
 8006b4a:	290a      	cmp	r1, #10
 8006b4c:	d103      	bne.n	8006b56 <__sfputc_r+0x1e>
 8006b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b52:	f000 b94b 	b.w	8006dec <__swbuf_r>
 8006b56:	6813      	ldr	r3, [r2, #0]
 8006b58:	1c58      	adds	r0, r3, #1
 8006b5a:	6010      	str	r0, [r2, #0]
 8006b5c:	7019      	strb	r1, [r3, #0]
 8006b5e:	4608      	mov	r0, r1
 8006b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <__sfputs_r>:
 8006b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b68:	4606      	mov	r6, r0
 8006b6a:	460f      	mov	r7, r1
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	18d5      	adds	r5, r2, r3
 8006b70:	42ac      	cmp	r4, r5
 8006b72:	d101      	bne.n	8006b78 <__sfputs_r+0x12>
 8006b74:	2000      	movs	r0, #0
 8006b76:	e007      	b.n	8006b88 <__sfputs_r+0x22>
 8006b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7c:	463a      	mov	r2, r7
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f7ff ffda 	bl	8006b38 <__sfputc_r>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d1f3      	bne.n	8006b70 <__sfputs_r+0xa>
 8006b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b8c <_vfiprintf_r>:
 8006b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b90:	460d      	mov	r5, r1
 8006b92:	b09d      	sub	sp, #116	; 0x74
 8006b94:	4614      	mov	r4, r2
 8006b96:	4698      	mov	r8, r3
 8006b98:	4606      	mov	r6, r0
 8006b9a:	b118      	cbz	r0, 8006ba4 <_vfiprintf_r+0x18>
 8006b9c:	6983      	ldr	r3, [r0, #24]
 8006b9e:	b90b      	cbnz	r3, 8006ba4 <_vfiprintf_r+0x18>
 8006ba0:	f000 fb14 	bl	80071cc <__sinit>
 8006ba4:	4b89      	ldr	r3, [pc, #548]	; (8006dcc <_vfiprintf_r+0x240>)
 8006ba6:	429d      	cmp	r5, r3
 8006ba8:	d11b      	bne.n	8006be2 <_vfiprintf_r+0x56>
 8006baa:	6875      	ldr	r5, [r6, #4]
 8006bac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bae:	07d9      	lsls	r1, r3, #31
 8006bb0:	d405      	bmi.n	8006bbe <_vfiprintf_r+0x32>
 8006bb2:	89ab      	ldrh	r3, [r5, #12]
 8006bb4:	059a      	lsls	r2, r3, #22
 8006bb6:	d402      	bmi.n	8006bbe <_vfiprintf_r+0x32>
 8006bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bba:	f000 fba5 	bl	8007308 <__retarget_lock_acquire_recursive>
 8006bbe:	89ab      	ldrh	r3, [r5, #12]
 8006bc0:	071b      	lsls	r3, r3, #28
 8006bc2:	d501      	bpl.n	8006bc8 <_vfiprintf_r+0x3c>
 8006bc4:	692b      	ldr	r3, [r5, #16]
 8006bc6:	b9eb      	cbnz	r3, 8006c04 <_vfiprintf_r+0x78>
 8006bc8:	4629      	mov	r1, r5
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f000 f96e 	bl	8006eac <__swsetup_r>
 8006bd0:	b1c0      	cbz	r0, 8006c04 <_vfiprintf_r+0x78>
 8006bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bd4:	07dc      	lsls	r4, r3, #31
 8006bd6:	d50e      	bpl.n	8006bf6 <_vfiprintf_r+0x6a>
 8006bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bdc:	b01d      	add	sp, #116	; 0x74
 8006bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be2:	4b7b      	ldr	r3, [pc, #492]	; (8006dd0 <_vfiprintf_r+0x244>)
 8006be4:	429d      	cmp	r5, r3
 8006be6:	d101      	bne.n	8006bec <_vfiprintf_r+0x60>
 8006be8:	68b5      	ldr	r5, [r6, #8]
 8006bea:	e7df      	b.n	8006bac <_vfiprintf_r+0x20>
 8006bec:	4b79      	ldr	r3, [pc, #484]	; (8006dd4 <_vfiprintf_r+0x248>)
 8006bee:	429d      	cmp	r5, r3
 8006bf0:	bf08      	it	eq
 8006bf2:	68f5      	ldreq	r5, [r6, #12]
 8006bf4:	e7da      	b.n	8006bac <_vfiprintf_r+0x20>
 8006bf6:	89ab      	ldrh	r3, [r5, #12]
 8006bf8:	0598      	lsls	r0, r3, #22
 8006bfa:	d4ed      	bmi.n	8006bd8 <_vfiprintf_r+0x4c>
 8006bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bfe:	f000 fb84 	bl	800730a <__retarget_lock_release_recursive>
 8006c02:	e7e9      	b.n	8006bd8 <_vfiprintf_r+0x4c>
 8006c04:	2300      	movs	r3, #0
 8006c06:	9309      	str	r3, [sp, #36]	; 0x24
 8006c08:	2320      	movs	r3, #32
 8006c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c12:	2330      	movs	r3, #48	; 0x30
 8006c14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006dd8 <_vfiprintf_r+0x24c>
 8006c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c1c:	f04f 0901 	mov.w	r9, #1
 8006c20:	4623      	mov	r3, r4
 8006c22:	469a      	mov	sl, r3
 8006c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c28:	b10a      	cbz	r2, 8006c2e <_vfiprintf_r+0xa2>
 8006c2a:	2a25      	cmp	r2, #37	; 0x25
 8006c2c:	d1f9      	bne.n	8006c22 <_vfiprintf_r+0x96>
 8006c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c32:	d00b      	beq.n	8006c4c <_vfiprintf_r+0xc0>
 8006c34:	465b      	mov	r3, fp
 8006c36:	4622      	mov	r2, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7ff ff93 	bl	8006b66 <__sfputs_r>
 8006c40:	3001      	adds	r0, #1
 8006c42:	f000 80aa 	beq.w	8006d9a <_vfiprintf_r+0x20e>
 8006c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c48:	445a      	add	r2, fp
 8006c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 80a2 	beq.w	8006d9a <_vfiprintf_r+0x20e>
 8006c56:	2300      	movs	r3, #0
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c60:	f10a 0a01 	add.w	sl, sl, #1
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	9307      	str	r3, [sp, #28]
 8006c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c6e:	4654      	mov	r4, sl
 8006c70:	2205      	movs	r2, #5
 8006c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c76:	4858      	ldr	r0, [pc, #352]	; (8006dd8 <_vfiprintf_r+0x24c>)
 8006c78:	f7f9 faba 	bl	80001f0 <memchr>
 8006c7c:	9a04      	ldr	r2, [sp, #16]
 8006c7e:	b9d8      	cbnz	r0, 8006cb8 <_vfiprintf_r+0x12c>
 8006c80:	06d1      	lsls	r1, r2, #27
 8006c82:	bf44      	itt	mi
 8006c84:	2320      	movmi	r3, #32
 8006c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c8a:	0713      	lsls	r3, r2, #28
 8006c8c:	bf44      	itt	mi
 8006c8e:	232b      	movmi	r3, #43	; 0x2b
 8006c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c94:	f89a 3000 	ldrb.w	r3, [sl]
 8006c98:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9a:	d015      	beq.n	8006cc8 <_vfiprintf_r+0x13c>
 8006c9c:	9a07      	ldr	r2, [sp, #28]
 8006c9e:	4654      	mov	r4, sl
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f04f 0c0a 	mov.w	ip, #10
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cac:	3b30      	subs	r3, #48	; 0x30
 8006cae:	2b09      	cmp	r3, #9
 8006cb0:	d94e      	bls.n	8006d50 <_vfiprintf_r+0x1c4>
 8006cb2:	b1b0      	cbz	r0, 8006ce2 <_vfiprintf_r+0x156>
 8006cb4:	9207      	str	r2, [sp, #28]
 8006cb6:	e014      	b.n	8006ce2 <_vfiprintf_r+0x156>
 8006cb8:	eba0 0308 	sub.w	r3, r0, r8
 8006cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	46a2      	mov	sl, r4
 8006cc6:	e7d2      	b.n	8006c6e <_vfiprintf_r+0xe2>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	1d19      	adds	r1, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	9103      	str	r1, [sp, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bfbb      	ittet	lt
 8006cd4:	425b      	neglt	r3, r3
 8006cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cda:	9307      	strge	r3, [sp, #28]
 8006cdc:	9307      	strlt	r3, [sp, #28]
 8006cde:	bfb8      	it	lt
 8006ce0:	9204      	strlt	r2, [sp, #16]
 8006ce2:	7823      	ldrb	r3, [r4, #0]
 8006ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce6:	d10c      	bne.n	8006d02 <_vfiprintf_r+0x176>
 8006ce8:	7863      	ldrb	r3, [r4, #1]
 8006cea:	2b2a      	cmp	r3, #42	; 0x2a
 8006cec:	d135      	bne.n	8006d5a <_vfiprintf_r+0x1ce>
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	1d1a      	adds	r2, r3, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	9203      	str	r2, [sp, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfb8      	it	lt
 8006cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cfe:	3402      	adds	r4, #2
 8006d00:	9305      	str	r3, [sp, #20]
 8006d02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006de8 <_vfiprintf_r+0x25c>
 8006d06:	7821      	ldrb	r1, [r4, #0]
 8006d08:	2203      	movs	r2, #3
 8006d0a:	4650      	mov	r0, sl
 8006d0c:	f7f9 fa70 	bl	80001f0 <memchr>
 8006d10:	b140      	cbz	r0, 8006d24 <_vfiprintf_r+0x198>
 8006d12:	2340      	movs	r3, #64	; 0x40
 8006d14:	eba0 000a 	sub.w	r0, r0, sl
 8006d18:	fa03 f000 	lsl.w	r0, r3, r0
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	4303      	orrs	r3, r0
 8006d20:	3401      	adds	r4, #1
 8006d22:	9304      	str	r3, [sp, #16]
 8006d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d28:	482c      	ldr	r0, [pc, #176]	; (8006ddc <_vfiprintf_r+0x250>)
 8006d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d2e:	2206      	movs	r2, #6
 8006d30:	f7f9 fa5e 	bl	80001f0 <memchr>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d03f      	beq.n	8006db8 <_vfiprintf_r+0x22c>
 8006d38:	4b29      	ldr	r3, [pc, #164]	; (8006de0 <_vfiprintf_r+0x254>)
 8006d3a:	bb1b      	cbnz	r3, 8006d84 <_vfiprintf_r+0x1f8>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	3307      	adds	r3, #7
 8006d40:	f023 0307 	bic.w	r3, r3, #7
 8006d44:	3308      	adds	r3, #8
 8006d46:	9303      	str	r3, [sp, #12]
 8006d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4a:	443b      	add	r3, r7
 8006d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4e:	e767      	b.n	8006c20 <_vfiprintf_r+0x94>
 8006d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d54:	460c      	mov	r4, r1
 8006d56:	2001      	movs	r0, #1
 8006d58:	e7a5      	b.n	8006ca6 <_vfiprintf_r+0x11a>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	3401      	adds	r4, #1
 8006d5e:	9305      	str	r3, [sp, #20]
 8006d60:	4619      	mov	r1, r3
 8006d62:	f04f 0c0a 	mov.w	ip, #10
 8006d66:	4620      	mov	r0, r4
 8006d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d6c:	3a30      	subs	r2, #48	; 0x30
 8006d6e:	2a09      	cmp	r2, #9
 8006d70:	d903      	bls.n	8006d7a <_vfiprintf_r+0x1ee>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0c5      	beq.n	8006d02 <_vfiprintf_r+0x176>
 8006d76:	9105      	str	r1, [sp, #20]
 8006d78:	e7c3      	b.n	8006d02 <_vfiprintf_r+0x176>
 8006d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d7e:	4604      	mov	r4, r0
 8006d80:	2301      	movs	r3, #1
 8006d82:	e7f0      	b.n	8006d66 <_vfiprintf_r+0x1da>
 8006d84:	ab03      	add	r3, sp, #12
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	462a      	mov	r2, r5
 8006d8a:	4b16      	ldr	r3, [pc, #88]	; (8006de4 <_vfiprintf_r+0x258>)
 8006d8c:	a904      	add	r1, sp, #16
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7fd fe22 	bl	80049d8 <_printf_float>
 8006d94:	4607      	mov	r7, r0
 8006d96:	1c78      	adds	r0, r7, #1
 8006d98:	d1d6      	bne.n	8006d48 <_vfiprintf_r+0x1bc>
 8006d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d9c:	07d9      	lsls	r1, r3, #31
 8006d9e:	d405      	bmi.n	8006dac <_vfiprintf_r+0x220>
 8006da0:	89ab      	ldrh	r3, [r5, #12]
 8006da2:	059a      	lsls	r2, r3, #22
 8006da4:	d402      	bmi.n	8006dac <_vfiprintf_r+0x220>
 8006da6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006da8:	f000 faaf 	bl	800730a <__retarget_lock_release_recursive>
 8006dac:	89ab      	ldrh	r3, [r5, #12]
 8006dae:	065b      	lsls	r3, r3, #25
 8006db0:	f53f af12 	bmi.w	8006bd8 <_vfiprintf_r+0x4c>
 8006db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006db6:	e711      	b.n	8006bdc <_vfiprintf_r+0x50>
 8006db8:	ab03      	add	r3, sp, #12
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	462a      	mov	r2, r5
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <_vfiprintf_r+0x258>)
 8006dc0:	a904      	add	r1, sp, #16
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f7fe f8ac 	bl	8004f20 <_printf_i>
 8006dc8:	e7e4      	b.n	8006d94 <_vfiprintf_r+0x208>
 8006dca:	bf00      	nop
 8006dcc:	080079bc 	.word	0x080079bc
 8006dd0:	080079dc 	.word	0x080079dc
 8006dd4:	0800799c 	.word	0x0800799c
 8006dd8:	08007844 	.word	0x08007844
 8006ddc:	0800784e 	.word	0x0800784e
 8006de0:	080049d9 	.word	0x080049d9
 8006de4:	08006b67 	.word	0x08006b67
 8006de8:	0800784a 	.word	0x0800784a

08006dec <__swbuf_r>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	460e      	mov	r6, r1
 8006df0:	4614      	mov	r4, r2
 8006df2:	4605      	mov	r5, r0
 8006df4:	b118      	cbz	r0, 8006dfe <__swbuf_r+0x12>
 8006df6:	6983      	ldr	r3, [r0, #24]
 8006df8:	b90b      	cbnz	r3, 8006dfe <__swbuf_r+0x12>
 8006dfa:	f000 f9e7 	bl	80071cc <__sinit>
 8006dfe:	4b21      	ldr	r3, [pc, #132]	; (8006e84 <__swbuf_r+0x98>)
 8006e00:	429c      	cmp	r4, r3
 8006e02:	d12b      	bne.n	8006e5c <__swbuf_r+0x70>
 8006e04:	686c      	ldr	r4, [r5, #4]
 8006e06:	69a3      	ldr	r3, [r4, #24]
 8006e08:	60a3      	str	r3, [r4, #8]
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	071a      	lsls	r2, r3, #28
 8006e0e:	d52f      	bpl.n	8006e70 <__swbuf_r+0x84>
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	b36b      	cbz	r3, 8006e70 <__swbuf_r+0x84>
 8006e14:	6923      	ldr	r3, [r4, #16]
 8006e16:	6820      	ldr	r0, [r4, #0]
 8006e18:	1ac0      	subs	r0, r0, r3
 8006e1a:	6963      	ldr	r3, [r4, #20]
 8006e1c:	b2f6      	uxtb	r6, r6
 8006e1e:	4283      	cmp	r3, r0
 8006e20:	4637      	mov	r7, r6
 8006e22:	dc04      	bgt.n	8006e2e <__swbuf_r+0x42>
 8006e24:	4621      	mov	r1, r4
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 f93c 	bl	80070a4 <_fflush_r>
 8006e2c:	bb30      	cbnz	r0, 8006e7c <__swbuf_r+0x90>
 8006e2e:	68a3      	ldr	r3, [r4, #8]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	60a3      	str	r3, [r4, #8]
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	6022      	str	r2, [r4, #0]
 8006e3a:	701e      	strb	r6, [r3, #0]
 8006e3c:	6963      	ldr	r3, [r4, #20]
 8006e3e:	3001      	adds	r0, #1
 8006e40:	4283      	cmp	r3, r0
 8006e42:	d004      	beq.n	8006e4e <__swbuf_r+0x62>
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	07db      	lsls	r3, r3, #31
 8006e48:	d506      	bpl.n	8006e58 <__swbuf_r+0x6c>
 8006e4a:	2e0a      	cmp	r6, #10
 8006e4c:	d104      	bne.n	8006e58 <__swbuf_r+0x6c>
 8006e4e:	4621      	mov	r1, r4
 8006e50:	4628      	mov	r0, r5
 8006e52:	f000 f927 	bl	80070a4 <_fflush_r>
 8006e56:	b988      	cbnz	r0, 8006e7c <__swbuf_r+0x90>
 8006e58:	4638      	mov	r0, r7
 8006e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <__swbuf_r+0x9c>)
 8006e5e:	429c      	cmp	r4, r3
 8006e60:	d101      	bne.n	8006e66 <__swbuf_r+0x7a>
 8006e62:	68ac      	ldr	r4, [r5, #8]
 8006e64:	e7cf      	b.n	8006e06 <__swbuf_r+0x1a>
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <__swbuf_r+0xa0>)
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	bf08      	it	eq
 8006e6c:	68ec      	ldreq	r4, [r5, #12]
 8006e6e:	e7ca      	b.n	8006e06 <__swbuf_r+0x1a>
 8006e70:	4621      	mov	r1, r4
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 f81a 	bl	8006eac <__swsetup_r>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d0cb      	beq.n	8006e14 <__swbuf_r+0x28>
 8006e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8006e80:	e7ea      	b.n	8006e58 <__swbuf_r+0x6c>
 8006e82:	bf00      	nop
 8006e84:	080079bc 	.word	0x080079bc
 8006e88:	080079dc 	.word	0x080079dc
 8006e8c:	0800799c 	.word	0x0800799c

08006e90 <__ascii_wctomb>:
 8006e90:	b149      	cbz	r1, 8006ea6 <__ascii_wctomb+0x16>
 8006e92:	2aff      	cmp	r2, #255	; 0xff
 8006e94:	bf85      	ittet	hi
 8006e96:	238a      	movhi	r3, #138	; 0x8a
 8006e98:	6003      	strhi	r3, [r0, #0]
 8006e9a:	700a      	strbls	r2, [r1, #0]
 8006e9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006ea0:	bf98      	it	ls
 8006ea2:	2001      	movls	r0, #1
 8006ea4:	4770      	bx	lr
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	4770      	bx	lr
	...

08006eac <__swsetup_r>:
 8006eac:	4b32      	ldr	r3, [pc, #200]	; (8006f78 <__swsetup_r+0xcc>)
 8006eae:	b570      	push	{r4, r5, r6, lr}
 8006eb0:	681d      	ldr	r5, [r3, #0]
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	b125      	cbz	r5, 8006ec2 <__swsetup_r+0x16>
 8006eb8:	69ab      	ldr	r3, [r5, #24]
 8006eba:	b913      	cbnz	r3, 8006ec2 <__swsetup_r+0x16>
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f000 f985 	bl	80071cc <__sinit>
 8006ec2:	4b2e      	ldr	r3, [pc, #184]	; (8006f7c <__swsetup_r+0xd0>)
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	d10f      	bne.n	8006ee8 <__swsetup_r+0x3c>
 8006ec8:	686c      	ldr	r4, [r5, #4]
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ed0:	0719      	lsls	r1, r3, #28
 8006ed2:	d42c      	bmi.n	8006f2e <__swsetup_r+0x82>
 8006ed4:	06dd      	lsls	r5, r3, #27
 8006ed6:	d411      	bmi.n	8006efc <__swsetup_r+0x50>
 8006ed8:	2309      	movs	r3, #9
 8006eda:	6033      	str	r3, [r6, #0]
 8006edc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ee0:	81a3      	strh	r3, [r4, #12]
 8006ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee6:	e03e      	b.n	8006f66 <__swsetup_r+0xba>
 8006ee8:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <__swsetup_r+0xd4>)
 8006eea:	429c      	cmp	r4, r3
 8006eec:	d101      	bne.n	8006ef2 <__swsetup_r+0x46>
 8006eee:	68ac      	ldr	r4, [r5, #8]
 8006ef0:	e7eb      	b.n	8006eca <__swsetup_r+0x1e>
 8006ef2:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <__swsetup_r+0xd8>)
 8006ef4:	429c      	cmp	r4, r3
 8006ef6:	bf08      	it	eq
 8006ef8:	68ec      	ldreq	r4, [r5, #12]
 8006efa:	e7e6      	b.n	8006eca <__swsetup_r+0x1e>
 8006efc:	0758      	lsls	r0, r3, #29
 8006efe:	d512      	bpl.n	8006f26 <__swsetup_r+0x7a>
 8006f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f02:	b141      	cbz	r1, 8006f16 <__swsetup_r+0x6a>
 8006f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	d002      	beq.n	8006f12 <__swsetup_r+0x66>
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f7ff fb6f 	bl	80065f0 <_free_r>
 8006f12:	2300      	movs	r3, #0
 8006f14:	6363      	str	r3, [r4, #52]	; 0x34
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6063      	str	r3, [r4, #4]
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	f043 0308 	orr.w	r3, r3, #8
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	b94b      	cbnz	r3, 8006f46 <__swsetup_r+0x9a>
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f3c:	d003      	beq.n	8006f46 <__swsetup_r+0x9a>
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4630      	mov	r0, r6
 8006f42:	f000 fa07 	bl	8007354 <__smakebuf_r>
 8006f46:	89a0      	ldrh	r0, [r4, #12]
 8006f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f4c:	f010 0301 	ands.w	r3, r0, #1
 8006f50:	d00a      	beq.n	8006f68 <__swsetup_r+0xbc>
 8006f52:	2300      	movs	r3, #0
 8006f54:	60a3      	str	r3, [r4, #8]
 8006f56:	6963      	ldr	r3, [r4, #20]
 8006f58:	425b      	negs	r3, r3
 8006f5a:	61a3      	str	r3, [r4, #24]
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	b943      	cbnz	r3, 8006f72 <__swsetup_r+0xc6>
 8006f60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f64:	d1ba      	bne.n	8006edc <__swsetup_r+0x30>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	0781      	lsls	r1, r0, #30
 8006f6a:	bf58      	it	pl
 8006f6c:	6963      	ldrpl	r3, [r4, #20]
 8006f6e:	60a3      	str	r3, [r4, #8]
 8006f70:	e7f4      	b.n	8006f5c <__swsetup_r+0xb0>
 8006f72:	2000      	movs	r0, #0
 8006f74:	e7f7      	b.n	8006f66 <__swsetup_r+0xba>
 8006f76:	bf00      	nop
 8006f78:	20000010 	.word	0x20000010
 8006f7c:	080079bc 	.word	0x080079bc
 8006f80:	080079dc 	.word	0x080079dc
 8006f84:	0800799c 	.word	0x0800799c

08006f88 <abort>:
 8006f88:	b508      	push	{r3, lr}
 8006f8a:	2006      	movs	r0, #6
 8006f8c:	f000 fa52 	bl	8007434 <raise>
 8006f90:	2001      	movs	r0, #1
 8006f92:	f7fa fbf9 	bl	8001788 <_exit>
	...

08006f98 <__sflush_r>:
 8006f98:	898a      	ldrh	r2, [r1, #12]
 8006f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	0710      	lsls	r0, r2, #28
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	d458      	bmi.n	8007058 <__sflush_r+0xc0>
 8006fa6:	684b      	ldr	r3, [r1, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dc05      	bgt.n	8006fb8 <__sflush_r+0x20>
 8006fac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	dc02      	bgt.n	8006fb8 <__sflush_r+0x20>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fba:	2e00      	cmp	r6, #0
 8006fbc:	d0f9      	beq.n	8006fb2 <__sflush_r+0x1a>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fc4:	682f      	ldr	r7, [r5, #0]
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	d032      	beq.n	8007030 <__sflush_r+0x98>
 8006fca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	075a      	lsls	r2, r3, #29
 8006fd0:	d505      	bpl.n	8006fde <__sflush_r+0x46>
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	1ac0      	subs	r0, r0, r3
 8006fd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fd8:	b10b      	cbz	r3, 8006fde <__sflush_r+0x46>
 8006fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fdc:	1ac0      	subs	r0, r0, r3
 8006fde:	2300      	movs	r3, #0
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fe4:	6a21      	ldr	r1, [r4, #32]
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b0      	blx	r6
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	d106      	bne.n	8006ffe <__sflush_r+0x66>
 8006ff0:	6829      	ldr	r1, [r5, #0]
 8006ff2:	291d      	cmp	r1, #29
 8006ff4:	d82c      	bhi.n	8007050 <__sflush_r+0xb8>
 8006ff6:	4a2a      	ldr	r2, [pc, #168]	; (80070a0 <__sflush_r+0x108>)
 8006ff8:	40ca      	lsrs	r2, r1
 8006ffa:	07d6      	lsls	r6, r2, #31
 8006ffc:	d528      	bpl.n	8007050 <__sflush_r+0xb8>
 8006ffe:	2200      	movs	r2, #0
 8007000:	6062      	str	r2, [r4, #4]
 8007002:	04d9      	lsls	r1, r3, #19
 8007004:	6922      	ldr	r2, [r4, #16]
 8007006:	6022      	str	r2, [r4, #0]
 8007008:	d504      	bpl.n	8007014 <__sflush_r+0x7c>
 800700a:	1c42      	adds	r2, r0, #1
 800700c:	d101      	bne.n	8007012 <__sflush_r+0x7a>
 800700e:	682b      	ldr	r3, [r5, #0]
 8007010:	b903      	cbnz	r3, 8007014 <__sflush_r+0x7c>
 8007012:	6560      	str	r0, [r4, #84]	; 0x54
 8007014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007016:	602f      	str	r7, [r5, #0]
 8007018:	2900      	cmp	r1, #0
 800701a:	d0ca      	beq.n	8006fb2 <__sflush_r+0x1a>
 800701c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007020:	4299      	cmp	r1, r3
 8007022:	d002      	beq.n	800702a <__sflush_r+0x92>
 8007024:	4628      	mov	r0, r5
 8007026:	f7ff fae3 	bl	80065f0 <_free_r>
 800702a:	2000      	movs	r0, #0
 800702c:	6360      	str	r0, [r4, #52]	; 0x34
 800702e:	e7c1      	b.n	8006fb4 <__sflush_r+0x1c>
 8007030:	6a21      	ldr	r1, [r4, #32]
 8007032:	2301      	movs	r3, #1
 8007034:	4628      	mov	r0, r5
 8007036:	47b0      	blx	r6
 8007038:	1c41      	adds	r1, r0, #1
 800703a:	d1c7      	bne.n	8006fcc <__sflush_r+0x34>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0c4      	beq.n	8006fcc <__sflush_r+0x34>
 8007042:	2b1d      	cmp	r3, #29
 8007044:	d001      	beq.n	800704a <__sflush_r+0xb2>
 8007046:	2b16      	cmp	r3, #22
 8007048:	d101      	bne.n	800704e <__sflush_r+0xb6>
 800704a:	602f      	str	r7, [r5, #0]
 800704c:	e7b1      	b.n	8006fb2 <__sflush_r+0x1a>
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007054:	81a3      	strh	r3, [r4, #12]
 8007056:	e7ad      	b.n	8006fb4 <__sflush_r+0x1c>
 8007058:	690f      	ldr	r7, [r1, #16]
 800705a:	2f00      	cmp	r7, #0
 800705c:	d0a9      	beq.n	8006fb2 <__sflush_r+0x1a>
 800705e:	0793      	lsls	r3, r2, #30
 8007060:	680e      	ldr	r6, [r1, #0]
 8007062:	bf08      	it	eq
 8007064:	694b      	ldreq	r3, [r1, #20]
 8007066:	600f      	str	r7, [r1, #0]
 8007068:	bf18      	it	ne
 800706a:	2300      	movne	r3, #0
 800706c:	eba6 0807 	sub.w	r8, r6, r7
 8007070:	608b      	str	r3, [r1, #8]
 8007072:	f1b8 0f00 	cmp.w	r8, #0
 8007076:	dd9c      	ble.n	8006fb2 <__sflush_r+0x1a>
 8007078:	6a21      	ldr	r1, [r4, #32]
 800707a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800707c:	4643      	mov	r3, r8
 800707e:	463a      	mov	r2, r7
 8007080:	4628      	mov	r0, r5
 8007082:	47b0      	blx	r6
 8007084:	2800      	cmp	r0, #0
 8007086:	dc06      	bgt.n	8007096 <__sflush_r+0xfe>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	e78e      	b.n	8006fb4 <__sflush_r+0x1c>
 8007096:	4407      	add	r7, r0
 8007098:	eba8 0800 	sub.w	r8, r8, r0
 800709c:	e7e9      	b.n	8007072 <__sflush_r+0xda>
 800709e:	bf00      	nop
 80070a0:	20400001 	.word	0x20400001

080070a4 <_fflush_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	690b      	ldr	r3, [r1, #16]
 80070a8:	4605      	mov	r5, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	b913      	cbnz	r3, 80070b4 <_fflush_r+0x10>
 80070ae:	2500      	movs	r5, #0
 80070b0:	4628      	mov	r0, r5
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	b118      	cbz	r0, 80070be <_fflush_r+0x1a>
 80070b6:	6983      	ldr	r3, [r0, #24]
 80070b8:	b90b      	cbnz	r3, 80070be <_fflush_r+0x1a>
 80070ba:	f000 f887 	bl	80071cc <__sinit>
 80070be:	4b14      	ldr	r3, [pc, #80]	; (8007110 <_fflush_r+0x6c>)
 80070c0:	429c      	cmp	r4, r3
 80070c2:	d11b      	bne.n	80070fc <_fflush_r+0x58>
 80070c4:	686c      	ldr	r4, [r5, #4]
 80070c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0ef      	beq.n	80070ae <_fflush_r+0xa>
 80070ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070d0:	07d0      	lsls	r0, r2, #31
 80070d2:	d404      	bmi.n	80070de <_fflush_r+0x3a>
 80070d4:	0599      	lsls	r1, r3, #22
 80070d6:	d402      	bmi.n	80070de <_fflush_r+0x3a>
 80070d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070da:	f000 f915 	bl	8007308 <__retarget_lock_acquire_recursive>
 80070de:	4628      	mov	r0, r5
 80070e0:	4621      	mov	r1, r4
 80070e2:	f7ff ff59 	bl	8006f98 <__sflush_r>
 80070e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070e8:	07da      	lsls	r2, r3, #31
 80070ea:	4605      	mov	r5, r0
 80070ec:	d4e0      	bmi.n	80070b0 <_fflush_r+0xc>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	059b      	lsls	r3, r3, #22
 80070f2:	d4dd      	bmi.n	80070b0 <_fflush_r+0xc>
 80070f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070f6:	f000 f908 	bl	800730a <__retarget_lock_release_recursive>
 80070fa:	e7d9      	b.n	80070b0 <_fflush_r+0xc>
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <_fflush_r+0x70>)
 80070fe:	429c      	cmp	r4, r3
 8007100:	d101      	bne.n	8007106 <_fflush_r+0x62>
 8007102:	68ac      	ldr	r4, [r5, #8]
 8007104:	e7df      	b.n	80070c6 <_fflush_r+0x22>
 8007106:	4b04      	ldr	r3, [pc, #16]	; (8007118 <_fflush_r+0x74>)
 8007108:	429c      	cmp	r4, r3
 800710a:	bf08      	it	eq
 800710c:	68ec      	ldreq	r4, [r5, #12]
 800710e:	e7da      	b.n	80070c6 <_fflush_r+0x22>
 8007110:	080079bc 	.word	0x080079bc
 8007114:	080079dc 	.word	0x080079dc
 8007118:	0800799c 	.word	0x0800799c

0800711c <std>:
 800711c:	2300      	movs	r3, #0
 800711e:	b510      	push	{r4, lr}
 8007120:	4604      	mov	r4, r0
 8007122:	e9c0 3300 	strd	r3, r3, [r0]
 8007126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800712a:	6083      	str	r3, [r0, #8]
 800712c:	8181      	strh	r1, [r0, #12]
 800712e:	6643      	str	r3, [r0, #100]	; 0x64
 8007130:	81c2      	strh	r2, [r0, #14]
 8007132:	6183      	str	r3, [r0, #24]
 8007134:	4619      	mov	r1, r3
 8007136:	2208      	movs	r2, #8
 8007138:	305c      	adds	r0, #92	; 0x5c
 800713a:	f7fd fba5 	bl	8004888 <memset>
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <std+0x38>)
 8007140:	6263      	str	r3, [r4, #36]	; 0x24
 8007142:	4b05      	ldr	r3, [pc, #20]	; (8007158 <std+0x3c>)
 8007144:	62a3      	str	r3, [r4, #40]	; 0x28
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <std+0x40>)
 8007148:	62e3      	str	r3, [r4, #44]	; 0x2c
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <std+0x44>)
 800714c:	6224      	str	r4, [r4, #32]
 800714e:	6323      	str	r3, [r4, #48]	; 0x30
 8007150:	bd10      	pop	{r4, pc}
 8007152:	bf00      	nop
 8007154:	0800746d 	.word	0x0800746d
 8007158:	0800748f 	.word	0x0800748f
 800715c:	080074c7 	.word	0x080074c7
 8007160:	080074eb 	.word	0x080074eb

08007164 <_cleanup_r>:
 8007164:	4901      	ldr	r1, [pc, #4]	; (800716c <_cleanup_r+0x8>)
 8007166:	f000 b8af 	b.w	80072c8 <_fwalk_reent>
 800716a:	bf00      	nop
 800716c:	080070a5 	.word	0x080070a5

08007170 <__sfmoreglue>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	1e4a      	subs	r2, r1, #1
 8007174:	2568      	movs	r5, #104	; 0x68
 8007176:	4355      	muls	r5, r2
 8007178:	460e      	mov	r6, r1
 800717a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800717e:	f7ff fa87 	bl	8006690 <_malloc_r>
 8007182:	4604      	mov	r4, r0
 8007184:	b140      	cbz	r0, 8007198 <__sfmoreglue+0x28>
 8007186:	2100      	movs	r1, #0
 8007188:	e9c0 1600 	strd	r1, r6, [r0]
 800718c:	300c      	adds	r0, #12
 800718e:	60a0      	str	r0, [r4, #8]
 8007190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007194:	f7fd fb78 	bl	8004888 <memset>
 8007198:	4620      	mov	r0, r4
 800719a:	bd70      	pop	{r4, r5, r6, pc}

0800719c <__sfp_lock_acquire>:
 800719c:	4801      	ldr	r0, [pc, #4]	; (80071a4 <__sfp_lock_acquire+0x8>)
 800719e:	f000 b8b3 	b.w	8007308 <__retarget_lock_acquire_recursive>
 80071a2:	bf00      	nop
 80071a4:	200003b8 	.word	0x200003b8

080071a8 <__sfp_lock_release>:
 80071a8:	4801      	ldr	r0, [pc, #4]	; (80071b0 <__sfp_lock_release+0x8>)
 80071aa:	f000 b8ae 	b.w	800730a <__retarget_lock_release_recursive>
 80071ae:	bf00      	nop
 80071b0:	200003b8 	.word	0x200003b8

080071b4 <__sinit_lock_acquire>:
 80071b4:	4801      	ldr	r0, [pc, #4]	; (80071bc <__sinit_lock_acquire+0x8>)
 80071b6:	f000 b8a7 	b.w	8007308 <__retarget_lock_acquire_recursive>
 80071ba:	bf00      	nop
 80071bc:	200003b3 	.word	0x200003b3

080071c0 <__sinit_lock_release>:
 80071c0:	4801      	ldr	r0, [pc, #4]	; (80071c8 <__sinit_lock_release+0x8>)
 80071c2:	f000 b8a2 	b.w	800730a <__retarget_lock_release_recursive>
 80071c6:	bf00      	nop
 80071c8:	200003b3 	.word	0x200003b3

080071cc <__sinit>:
 80071cc:	b510      	push	{r4, lr}
 80071ce:	4604      	mov	r4, r0
 80071d0:	f7ff fff0 	bl	80071b4 <__sinit_lock_acquire>
 80071d4:	69a3      	ldr	r3, [r4, #24]
 80071d6:	b11b      	cbz	r3, 80071e0 <__sinit+0x14>
 80071d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071dc:	f7ff bff0 	b.w	80071c0 <__sinit_lock_release>
 80071e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071e4:	6523      	str	r3, [r4, #80]	; 0x50
 80071e6:	4b13      	ldr	r3, [pc, #76]	; (8007234 <__sinit+0x68>)
 80071e8:	4a13      	ldr	r2, [pc, #76]	; (8007238 <__sinit+0x6c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80071ee:	42a3      	cmp	r3, r4
 80071f0:	bf04      	itt	eq
 80071f2:	2301      	moveq	r3, #1
 80071f4:	61a3      	streq	r3, [r4, #24]
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 f820 	bl	800723c <__sfp>
 80071fc:	6060      	str	r0, [r4, #4]
 80071fe:	4620      	mov	r0, r4
 8007200:	f000 f81c 	bl	800723c <__sfp>
 8007204:	60a0      	str	r0, [r4, #8]
 8007206:	4620      	mov	r0, r4
 8007208:	f000 f818 	bl	800723c <__sfp>
 800720c:	2200      	movs	r2, #0
 800720e:	60e0      	str	r0, [r4, #12]
 8007210:	2104      	movs	r1, #4
 8007212:	6860      	ldr	r0, [r4, #4]
 8007214:	f7ff ff82 	bl	800711c <std>
 8007218:	68a0      	ldr	r0, [r4, #8]
 800721a:	2201      	movs	r2, #1
 800721c:	2109      	movs	r1, #9
 800721e:	f7ff ff7d 	bl	800711c <std>
 8007222:	68e0      	ldr	r0, [r4, #12]
 8007224:	2202      	movs	r2, #2
 8007226:	2112      	movs	r1, #18
 8007228:	f7ff ff78 	bl	800711c <std>
 800722c:	2301      	movs	r3, #1
 800722e:	61a3      	str	r3, [r4, #24]
 8007230:	e7d2      	b.n	80071d8 <__sinit+0xc>
 8007232:	bf00      	nop
 8007234:	08007618 	.word	0x08007618
 8007238:	08007165 	.word	0x08007165

0800723c <__sfp>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	4607      	mov	r7, r0
 8007240:	f7ff ffac 	bl	800719c <__sfp_lock_acquire>
 8007244:	4b1e      	ldr	r3, [pc, #120]	; (80072c0 <__sfp+0x84>)
 8007246:	681e      	ldr	r6, [r3, #0]
 8007248:	69b3      	ldr	r3, [r6, #24]
 800724a:	b913      	cbnz	r3, 8007252 <__sfp+0x16>
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff ffbd 	bl	80071cc <__sinit>
 8007252:	3648      	adds	r6, #72	; 0x48
 8007254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007258:	3b01      	subs	r3, #1
 800725a:	d503      	bpl.n	8007264 <__sfp+0x28>
 800725c:	6833      	ldr	r3, [r6, #0]
 800725e:	b30b      	cbz	r3, 80072a4 <__sfp+0x68>
 8007260:	6836      	ldr	r6, [r6, #0]
 8007262:	e7f7      	b.n	8007254 <__sfp+0x18>
 8007264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007268:	b9d5      	cbnz	r5, 80072a0 <__sfp+0x64>
 800726a:	4b16      	ldr	r3, [pc, #88]	; (80072c4 <__sfp+0x88>)
 800726c:	60e3      	str	r3, [r4, #12]
 800726e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007272:	6665      	str	r5, [r4, #100]	; 0x64
 8007274:	f000 f847 	bl	8007306 <__retarget_lock_init_recursive>
 8007278:	f7ff ff96 	bl	80071a8 <__sfp_lock_release>
 800727c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007280:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007284:	6025      	str	r5, [r4, #0]
 8007286:	61a5      	str	r5, [r4, #24]
 8007288:	2208      	movs	r2, #8
 800728a:	4629      	mov	r1, r5
 800728c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007290:	f7fd fafa 	bl	8004888 <memset>
 8007294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800729c:	4620      	mov	r0, r4
 800729e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a0:	3468      	adds	r4, #104	; 0x68
 80072a2:	e7d9      	b.n	8007258 <__sfp+0x1c>
 80072a4:	2104      	movs	r1, #4
 80072a6:	4638      	mov	r0, r7
 80072a8:	f7ff ff62 	bl	8007170 <__sfmoreglue>
 80072ac:	4604      	mov	r4, r0
 80072ae:	6030      	str	r0, [r6, #0]
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d1d5      	bne.n	8007260 <__sfp+0x24>
 80072b4:	f7ff ff78 	bl	80071a8 <__sfp_lock_release>
 80072b8:	230c      	movs	r3, #12
 80072ba:	603b      	str	r3, [r7, #0]
 80072bc:	e7ee      	b.n	800729c <__sfp+0x60>
 80072be:	bf00      	nop
 80072c0:	08007618 	.word	0x08007618
 80072c4:	ffff0001 	.word	0xffff0001

080072c8 <_fwalk_reent>:
 80072c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072cc:	4606      	mov	r6, r0
 80072ce:	4688      	mov	r8, r1
 80072d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072d4:	2700      	movs	r7, #0
 80072d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072da:	f1b9 0901 	subs.w	r9, r9, #1
 80072de:	d505      	bpl.n	80072ec <_fwalk_reent+0x24>
 80072e0:	6824      	ldr	r4, [r4, #0]
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	d1f7      	bne.n	80072d6 <_fwalk_reent+0xe>
 80072e6:	4638      	mov	r0, r7
 80072e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ec:	89ab      	ldrh	r3, [r5, #12]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d907      	bls.n	8007302 <_fwalk_reent+0x3a>
 80072f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072f6:	3301      	adds	r3, #1
 80072f8:	d003      	beq.n	8007302 <_fwalk_reent+0x3a>
 80072fa:	4629      	mov	r1, r5
 80072fc:	4630      	mov	r0, r6
 80072fe:	47c0      	blx	r8
 8007300:	4307      	orrs	r7, r0
 8007302:	3568      	adds	r5, #104	; 0x68
 8007304:	e7e9      	b.n	80072da <_fwalk_reent+0x12>

08007306 <__retarget_lock_init_recursive>:
 8007306:	4770      	bx	lr

08007308 <__retarget_lock_acquire_recursive>:
 8007308:	4770      	bx	lr

0800730a <__retarget_lock_release_recursive>:
 800730a:	4770      	bx	lr

0800730c <__swhatbuf_r>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	460e      	mov	r6, r1
 8007310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007314:	2900      	cmp	r1, #0
 8007316:	b096      	sub	sp, #88	; 0x58
 8007318:	4614      	mov	r4, r2
 800731a:	461d      	mov	r5, r3
 800731c:	da07      	bge.n	800732e <__swhatbuf_r+0x22>
 800731e:	2300      	movs	r3, #0
 8007320:	602b      	str	r3, [r5, #0]
 8007322:	89b3      	ldrh	r3, [r6, #12]
 8007324:	061a      	lsls	r2, r3, #24
 8007326:	d410      	bmi.n	800734a <__swhatbuf_r+0x3e>
 8007328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800732c:	e00e      	b.n	800734c <__swhatbuf_r+0x40>
 800732e:	466a      	mov	r2, sp
 8007330:	f000 f902 	bl	8007538 <_fstat_r>
 8007334:	2800      	cmp	r0, #0
 8007336:	dbf2      	blt.n	800731e <__swhatbuf_r+0x12>
 8007338:	9a01      	ldr	r2, [sp, #4]
 800733a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800733e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007342:	425a      	negs	r2, r3
 8007344:	415a      	adcs	r2, r3
 8007346:	602a      	str	r2, [r5, #0]
 8007348:	e7ee      	b.n	8007328 <__swhatbuf_r+0x1c>
 800734a:	2340      	movs	r3, #64	; 0x40
 800734c:	2000      	movs	r0, #0
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	b016      	add	sp, #88	; 0x58
 8007352:	bd70      	pop	{r4, r5, r6, pc}

08007354 <__smakebuf_r>:
 8007354:	898b      	ldrh	r3, [r1, #12]
 8007356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007358:	079d      	lsls	r5, r3, #30
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	d507      	bpl.n	8007370 <__smakebuf_r+0x1c>
 8007360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	6123      	str	r3, [r4, #16]
 8007368:	2301      	movs	r3, #1
 800736a:	6163      	str	r3, [r4, #20]
 800736c:	b002      	add	sp, #8
 800736e:	bd70      	pop	{r4, r5, r6, pc}
 8007370:	ab01      	add	r3, sp, #4
 8007372:	466a      	mov	r2, sp
 8007374:	f7ff ffca 	bl	800730c <__swhatbuf_r>
 8007378:	9900      	ldr	r1, [sp, #0]
 800737a:	4605      	mov	r5, r0
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff f987 	bl	8006690 <_malloc_r>
 8007382:	b948      	cbnz	r0, 8007398 <__smakebuf_r+0x44>
 8007384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007388:	059a      	lsls	r2, r3, #22
 800738a:	d4ef      	bmi.n	800736c <__smakebuf_r+0x18>
 800738c:	f023 0303 	bic.w	r3, r3, #3
 8007390:	f043 0302 	orr.w	r3, r3, #2
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	e7e3      	b.n	8007360 <__smakebuf_r+0xc>
 8007398:	4b0d      	ldr	r3, [pc, #52]	; (80073d0 <__smakebuf_r+0x7c>)
 800739a:	62b3      	str	r3, [r6, #40]	; 0x28
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	6020      	str	r0, [r4, #0]
 80073a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	9b00      	ldr	r3, [sp, #0]
 80073a8:	6163      	str	r3, [r4, #20]
 80073aa:	9b01      	ldr	r3, [sp, #4]
 80073ac:	6120      	str	r0, [r4, #16]
 80073ae:	b15b      	cbz	r3, 80073c8 <__smakebuf_r+0x74>
 80073b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073b4:	4630      	mov	r0, r6
 80073b6:	f000 f8d1 	bl	800755c <_isatty_r>
 80073ba:	b128      	cbz	r0, 80073c8 <__smakebuf_r+0x74>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f023 0303 	bic.w	r3, r3, #3
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	89a0      	ldrh	r0, [r4, #12]
 80073ca:	4305      	orrs	r5, r0
 80073cc:	81a5      	strh	r5, [r4, #12]
 80073ce:	e7cd      	b.n	800736c <__smakebuf_r+0x18>
 80073d0:	08007165 	.word	0x08007165

080073d4 <_malloc_usable_size_r>:
 80073d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d8:	1f18      	subs	r0, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bfbc      	itt	lt
 80073de:	580b      	ldrlt	r3, [r1, r0]
 80073e0:	18c0      	addlt	r0, r0, r3
 80073e2:	4770      	bx	lr

080073e4 <_raise_r>:
 80073e4:	291f      	cmp	r1, #31
 80073e6:	b538      	push	{r3, r4, r5, lr}
 80073e8:	4604      	mov	r4, r0
 80073ea:	460d      	mov	r5, r1
 80073ec:	d904      	bls.n	80073f8 <_raise_r+0x14>
 80073ee:	2316      	movs	r3, #22
 80073f0:	6003      	str	r3, [r0, #0]
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073fa:	b112      	cbz	r2, 8007402 <_raise_r+0x1e>
 80073fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007400:	b94b      	cbnz	r3, 8007416 <_raise_r+0x32>
 8007402:	4620      	mov	r0, r4
 8007404:	f000 f830 	bl	8007468 <_getpid_r>
 8007408:	462a      	mov	r2, r5
 800740a:	4601      	mov	r1, r0
 800740c:	4620      	mov	r0, r4
 800740e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007412:	f000 b817 	b.w	8007444 <_kill_r>
 8007416:	2b01      	cmp	r3, #1
 8007418:	d00a      	beq.n	8007430 <_raise_r+0x4c>
 800741a:	1c59      	adds	r1, r3, #1
 800741c:	d103      	bne.n	8007426 <_raise_r+0x42>
 800741e:	2316      	movs	r3, #22
 8007420:	6003      	str	r3, [r0, #0]
 8007422:	2001      	movs	r0, #1
 8007424:	e7e7      	b.n	80073f6 <_raise_r+0x12>
 8007426:	2400      	movs	r4, #0
 8007428:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800742c:	4628      	mov	r0, r5
 800742e:	4798      	blx	r3
 8007430:	2000      	movs	r0, #0
 8007432:	e7e0      	b.n	80073f6 <_raise_r+0x12>

08007434 <raise>:
 8007434:	4b02      	ldr	r3, [pc, #8]	; (8007440 <raise+0xc>)
 8007436:	4601      	mov	r1, r0
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	f7ff bfd3 	b.w	80073e4 <_raise_r>
 800743e:	bf00      	nop
 8007440:	20000010 	.word	0x20000010

08007444 <_kill_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4d07      	ldr	r5, [pc, #28]	; (8007464 <_kill_r+0x20>)
 8007448:	2300      	movs	r3, #0
 800744a:	4604      	mov	r4, r0
 800744c:	4608      	mov	r0, r1
 800744e:	4611      	mov	r1, r2
 8007450:	602b      	str	r3, [r5, #0]
 8007452:	f7fa f989 	bl	8001768 <_kill>
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	d102      	bne.n	8007460 <_kill_r+0x1c>
 800745a:	682b      	ldr	r3, [r5, #0]
 800745c:	b103      	cbz	r3, 8007460 <_kill_r+0x1c>
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	bd38      	pop	{r3, r4, r5, pc}
 8007462:	bf00      	nop
 8007464:	200003ac 	.word	0x200003ac

08007468 <_getpid_r>:
 8007468:	f7fa b976 	b.w	8001758 <_getpid>

0800746c <__sread>:
 800746c:	b510      	push	{r4, lr}
 800746e:	460c      	mov	r4, r1
 8007470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007474:	f000 f894 	bl	80075a0 <_read_r>
 8007478:	2800      	cmp	r0, #0
 800747a:	bfab      	itete	ge
 800747c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800747e:	89a3      	ldrhlt	r3, [r4, #12]
 8007480:	181b      	addge	r3, r3, r0
 8007482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007486:	bfac      	ite	ge
 8007488:	6563      	strge	r3, [r4, #84]	; 0x54
 800748a:	81a3      	strhlt	r3, [r4, #12]
 800748c:	bd10      	pop	{r4, pc}

0800748e <__swrite>:
 800748e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007492:	461f      	mov	r7, r3
 8007494:	898b      	ldrh	r3, [r1, #12]
 8007496:	05db      	lsls	r3, r3, #23
 8007498:	4605      	mov	r5, r0
 800749a:	460c      	mov	r4, r1
 800749c:	4616      	mov	r6, r2
 800749e:	d505      	bpl.n	80074ac <__swrite+0x1e>
 80074a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a4:	2302      	movs	r3, #2
 80074a6:	2200      	movs	r2, #0
 80074a8:	f000 f868 	bl	800757c <_lseek_r>
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074b6:	81a3      	strh	r3, [r4, #12]
 80074b8:	4632      	mov	r2, r6
 80074ba:	463b      	mov	r3, r7
 80074bc:	4628      	mov	r0, r5
 80074be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074c2:	f000 b817 	b.w	80074f4 <_write_r>

080074c6 <__sseek>:
 80074c6:	b510      	push	{r4, lr}
 80074c8:	460c      	mov	r4, r1
 80074ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ce:	f000 f855 	bl	800757c <_lseek_r>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	bf15      	itete	ne
 80074d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074e2:	81a3      	strheq	r3, [r4, #12]
 80074e4:	bf18      	it	ne
 80074e6:	81a3      	strhne	r3, [r4, #12]
 80074e8:	bd10      	pop	{r4, pc}

080074ea <__sclose>:
 80074ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ee:	f000 b813 	b.w	8007518 <_close_r>
	...

080074f4 <_write_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d07      	ldr	r5, [pc, #28]	; (8007514 <_write_r+0x20>)
 80074f8:	4604      	mov	r4, r0
 80074fa:	4608      	mov	r0, r1
 80074fc:	4611      	mov	r1, r2
 80074fe:	2200      	movs	r2, #0
 8007500:	602a      	str	r2, [r5, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f7fa f967 	bl	80017d6 <_write>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_write_r+0x1e>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_write_r+0x1e>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	200003ac 	.word	0x200003ac

08007518 <_close_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d06      	ldr	r5, [pc, #24]	; (8007534 <_close_r+0x1c>)
 800751c:	2300      	movs	r3, #0
 800751e:	4604      	mov	r4, r0
 8007520:	4608      	mov	r0, r1
 8007522:	602b      	str	r3, [r5, #0]
 8007524:	f7fa f973 	bl	800180e <_close>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_close_r+0x1a>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_close_r+0x1a>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	200003ac 	.word	0x200003ac

08007538 <_fstat_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4d07      	ldr	r5, [pc, #28]	; (8007558 <_fstat_r+0x20>)
 800753c:	2300      	movs	r3, #0
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	4611      	mov	r1, r2
 8007544:	602b      	str	r3, [r5, #0]
 8007546:	f7fa f96e 	bl	8001826 <_fstat>
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	d102      	bne.n	8007554 <_fstat_r+0x1c>
 800754e:	682b      	ldr	r3, [r5, #0]
 8007550:	b103      	cbz	r3, 8007554 <_fstat_r+0x1c>
 8007552:	6023      	str	r3, [r4, #0]
 8007554:	bd38      	pop	{r3, r4, r5, pc}
 8007556:	bf00      	nop
 8007558:	200003ac 	.word	0x200003ac

0800755c <_isatty_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d06      	ldr	r5, [pc, #24]	; (8007578 <_isatty_r+0x1c>)
 8007560:	2300      	movs	r3, #0
 8007562:	4604      	mov	r4, r0
 8007564:	4608      	mov	r0, r1
 8007566:	602b      	str	r3, [r5, #0]
 8007568:	f7fa f96d 	bl	8001846 <_isatty>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_isatty_r+0x1a>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_isatty_r+0x1a>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	200003ac 	.word	0x200003ac

0800757c <_lseek_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d07      	ldr	r5, [pc, #28]	; (800759c <_lseek_r+0x20>)
 8007580:	4604      	mov	r4, r0
 8007582:	4608      	mov	r0, r1
 8007584:	4611      	mov	r1, r2
 8007586:	2200      	movs	r2, #0
 8007588:	602a      	str	r2, [r5, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	f7fa f966 	bl	800185c <_lseek>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_lseek_r+0x1e>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_lseek_r+0x1e>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	200003ac 	.word	0x200003ac

080075a0 <_read_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4d07      	ldr	r5, [pc, #28]	; (80075c0 <_read_r+0x20>)
 80075a4:	4604      	mov	r4, r0
 80075a6:	4608      	mov	r0, r1
 80075a8:	4611      	mov	r1, r2
 80075aa:	2200      	movs	r2, #0
 80075ac:	602a      	str	r2, [r5, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f7fa f8f4 	bl	800179c <_read>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_read_r+0x1e>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	b103      	cbz	r3, 80075be <_read_r+0x1e>
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	200003ac 	.word	0x200003ac

080075c4 <_init>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	bf00      	nop
 80075c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ca:	bc08      	pop	{r3}
 80075cc:	469e      	mov	lr, r3
 80075ce:	4770      	bx	lr

080075d0 <_fini>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	bf00      	nop
 80075d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d6:	bc08      	pop	{r3}
 80075d8:	469e      	mov	lr, r3
 80075da:	4770      	bx	lr
