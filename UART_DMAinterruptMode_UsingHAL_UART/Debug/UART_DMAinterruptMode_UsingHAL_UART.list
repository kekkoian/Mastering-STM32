
UART_DMAinterruptMode_UsingHAL_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b5c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d50  08002d50  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d58  08002d58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000010  08002d70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002d70  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000710b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001557  00000000  00000000  0002714b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  000286a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00028d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000147c9  00000000  00000000  000293a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000745f  00000000  00000000  0003db69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080896  00000000  00000000  00044fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c585e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a6c  00000000  00000000  000c58b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002cd8 	.word	0x08002cd8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08002cd8 	.word	0x08002cd8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96e 	b.w	80004d8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468c      	mov	ip, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 8083 	bne.w	800032a <__udivmoddi4+0x116>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d947      	bls.n	80002ba <__udivmoddi4+0xa6>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b142      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 8000230:	f1c2 0020 	rsb	r0, r2, #32
 8000234:	fa24 f000 	lsr.w	r0, r4, r0
 8000238:	4091      	lsls	r1, r2
 800023a:	4097      	lsls	r7, r2
 800023c:	ea40 0c01 	orr.w	ip, r0, r1
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbbc f6f8 	udiv	r6, ip, r8
 800024c:	fa1f fe87 	uxth.w	lr, r7
 8000250:	fb08 c116 	mls	r1, r8, r6, ip
 8000254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000258:	fb06 f10e 	mul.w	r1, r6, lr
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 8119 	bcs.w	800049c <__udivmoddi4+0x288>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8116 	bls.w	800049c <__udivmoddi4+0x288>
 8000270:	3e02      	subs	r6, #2
 8000272:	443b      	add	r3, r7
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	45a6      	cmp	lr, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	193c      	adds	r4, r7, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8105 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 8000296:	45a6      	cmp	lr, r4
 8000298:	f240 8102 	bls.w	80004a0 <__udivmoddi4+0x28c>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a4:	eba4 040e 	sub.w	r4, r4, lr
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	b902      	cbnz	r2, 80002be <__udivmoddi4+0xaa>
 80002bc:	deff      	udf	#255	; 0xff
 80002be:	fab2 f282 	clz	r2, r2
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d150      	bne.n	8000368 <__udivmoddi4+0x154>
 80002c6:	1bcb      	subs	r3, r1, r7
 80002c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002cc:	fa1f f887 	uxth.w	r8, r7
 80002d0:	2601      	movs	r6, #1
 80002d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e0:	fb08 f30c 	mul.w	r3, r8, ip
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xe4>
 80002e8:	1879      	adds	r1, r7, r1
 80002ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0xe2>
 80002f0:	428b      	cmp	r3, r1
 80002f2:	f200 80e9 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 80002f6:	4684      	mov	ip, r0
 80002f8:	1ac9      	subs	r1, r1, r3
 80002fa:	b2a3      	uxth	r3, r4
 80002fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000300:	fb0e 1110 	mls	r1, lr, r0, r1
 8000304:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000308:	fb08 f800 	mul.w	r8, r8, r0
 800030c:	45a0      	cmp	r8, r4
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x10c>
 8000310:	193c      	adds	r4, r7, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x10a>
 8000318:	45a0      	cmp	r8, r4
 800031a:	f200 80d9 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 800031e:	4618      	mov	r0, r3
 8000320:	eba4 0408 	sub.w	r4, r4, r8
 8000324:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000328:	e7bf      	b.n	80002aa <__udivmoddi4+0x96>
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x12e>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80b1 	beq.w	8000496 <__udivmoddi4+0x282>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x1cc>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0x140>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80b8 	bhi.w	80004c4 <__udivmoddi4+0x2b0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0103 	sbc.w	r1, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	468c      	mov	ip, r1
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0a8      	beq.n	80002b4 <__udivmoddi4+0xa0>
 8000362:	e9c5 4c00 	strd	r4, ip, [r5]
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000368:	f1c2 0320 	rsb	r3, r2, #32
 800036c:	fa20 f603 	lsr.w	r6, r0, r3
 8000370:	4097      	lsls	r7, r2
 8000372:	fa01 f002 	lsl.w	r0, r1, r2
 8000376:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037a:	40d9      	lsrs	r1, r3
 800037c:	4330      	orrs	r0, r6
 800037e:	0c03      	lsrs	r3, r0, #16
 8000380:	fbb1 f6fe 	udiv	r6, r1, lr
 8000384:	fa1f f887 	uxth.w	r8, r7
 8000388:	fb0e 1116 	mls	r1, lr, r6, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f108 	mul.w	r1, r6, r8
 8000394:	4299      	cmp	r1, r3
 8000396:	fa04 f402 	lsl.w	r4, r4, r2
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x19c>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a2:	f080 808d 	bcs.w	80004c0 <__udivmoddi4+0x2ac>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 808a 	bls.w	80004c0 <__udivmoddi4+0x2ac>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b281      	uxth	r1, r0
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c0:	fb00 f308 	mul.w	r3, r0, r8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x1c4>
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ce:	d273      	bcs.n	80004b8 <__udivmoddi4+0x2a4>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d971      	bls.n	80004b8 <__udivmoddi4+0x2a4>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4439      	add	r1, r7
 80003d8:	1acb      	subs	r3, r1, r3
 80003da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003de:	e778      	b.n	80002d2 <__udivmoddi4+0xbe>
 80003e0:	f1c6 0c20 	rsb	ip, r6, #32
 80003e4:	fa03 f406 	lsl.w	r4, r3, r6
 80003e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003ec:	431c      	orrs	r4, r3
 80003ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fe:	431f      	orrs	r7, r3
 8000400:	0c3b      	lsrs	r3, r7, #16
 8000402:	fbb1 f9fe 	udiv	r9, r1, lr
 8000406:	fa1f f884 	uxth.w	r8, r4
 800040a:	fb0e 1119 	mls	r1, lr, r9, r1
 800040e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000412:	fb09 fa08 	mul.w	sl, r9, r8
 8000416:	458a      	cmp	sl, r1
 8000418:	fa02 f206 	lsl.w	r2, r2, r6
 800041c:	fa00 f306 	lsl.w	r3, r0, r6
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x220>
 8000422:	1861      	adds	r1, r4, r1
 8000424:	f109 30ff 	add.w	r0, r9, #4294967295
 8000428:	d248      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800042a:	458a      	cmp	sl, r1
 800042c:	d946      	bls.n	80004bc <__udivmoddi4+0x2a8>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4421      	add	r1, r4
 8000434:	eba1 010a 	sub.w	r1, r1, sl
 8000438:	b2bf      	uxth	r7, r7
 800043a:	fbb1 f0fe 	udiv	r0, r1, lr
 800043e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000442:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000446:	fb00 f808 	mul.w	r8, r0, r8
 800044a:	45b8      	cmp	r8, r7
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x24a>
 800044e:	19e7      	adds	r7, r4, r7
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d22e      	bcs.n	80004b4 <__udivmoddi4+0x2a0>
 8000456:	45b8      	cmp	r8, r7
 8000458:	d92c      	bls.n	80004b4 <__udivmoddi4+0x2a0>
 800045a:	3802      	subs	r0, #2
 800045c:	4427      	add	r7, r4
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	eba7 0708 	sub.w	r7, r7, r8
 8000466:	fba0 8902 	umull	r8, r9, r0, r2
 800046a:	454f      	cmp	r7, r9
 800046c:	46c6      	mov	lr, r8
 800046e:	4649      	mov	r1, r9
 8000470:	d31a      	bcc.n	80004a8 <__udivmoddi4+0x294>
 8000472:	d017      	beq.n	80004a4 <__udivmoddi4+0x290>
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x27a>
 8000476:	ebb3 020e 	subs.w	r2, r3, lr
 800047a:	eb67 0701 	sbc.w	r7, r7, r1
 800047e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000482:	40f2      	lsrs	r2, r6
 8000484:	ea4c 0202 	orr.w	r2, ip, r2
 8000488:	40f7      	lsrs	r7, r6
 800048a:	e9c5 2700 	strd	r2, r7, [r5]
 800048e:	2600      	movs	r6, #0
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e70b      	b.n	80002b4 <__udivmoddi4+0xa0>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e9      	b.n	8000274 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fd      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a4:	4543      	cmp	r3, r8
 80004a6:	d2e5      	bcs.n	8000474 <__udivmoddi4+0x260>
 80004a8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ac:	eb69 0104 	sbc.w	r1, r9, r4
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7df      	b.n	8000474 <__udivmoddi4+0x260>
 80004b4:	4608      	mov	r0, r1
 80004b6:	e7d2      	b.n	800045e <__udivmoddi4+0x24a>
 80004b8:	4660      	mov	r0, ip
 80004ba:	e78d      	b.n	80003d8 <__udivmoddi4+0x1c4>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7b9      	b.n	8000434 <__udivmoddi4+0x220>
 80004c0:	4666      	mov	r6, ip
 80004c2:	e775      	b.n	80003b0 <__udivmoddi4+0x19c>
 80004c4:	4630      	mov	r0, r6
 80004c6:	e74a      	b.n	800035e <__udivmoddi4+0x14a>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	4439      	add	r1, r7
 80004ce:	e713      	b.n	80002f8 <__udivmoddi4+0xe4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	e724      	b.n	8000320 <__udivmoddi4+0x10c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b598      	push	{r3, r4, r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa32 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f81a 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8c2 	bl	8000670 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f8a0 	bl	8000630 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f874 	bl	80005dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit_DMA(&huart2, (uint32_t)msg, strlen(msg));
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <main+0x38>)
 80004f6:	681c      	ldr	r4, [r3, #0]
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <main+0x38>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fe69 	bl	80001d4 <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	b29b      	uxth	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	4621      	mov	r1, r4
 800050a:	4803      	ldr	r0, [pc, #12]	; (8000518 <main+0x3c>)
 800050c:	f001 fdd6 	bl	80020bc <HAL_UART_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x34>
 8000512:	bf00      	nop
 8000514:	20000000 	.word	0x20000000
 8000518:	2000008c 	.word	0x2000008c

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fbcc 	bl	8002cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <SystemClock_Config+0xb8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <SystemClock_Config+0xb8>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <SystemClock_Config+0xb8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <SystemClock_Config+0xbc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000568:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <SystemClock_Config+0xbc>)
 800056a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <SystemClock_Config+0xbc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000588:	2300      	movs	r3, #0
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f001 f8fd 	bl	8001790 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800059c:	f000 f8aa 	bl	80006f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fb60 	bl	8001c80 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005c6:	f000 f895 	bl	80006f4 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART2_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005e8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 8000614:	f001 fd04 	bl	8002020 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800061e:	f000 f869 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000008c 	.word	0x2000008c
 800062c:	40004400 	.word	0x40004400

08000630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_DMA_Init+0x3c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a0b      	ldr	r2, [pc, #44]	; (800066c <MX_DMA_Init+0x3c>)
 8000640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_DMA_Init+0x3c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2011      	movs	r0, #17
 8000658:	f000 fac3 	bl	8000be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800065c:	2011      	movs	r0, #17
 800065e:	f000 fadc 	bl	8000c1a <HAL_NVIC_EnableIRQ>

}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_GPIO_Init+0x5c>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <MX_GPIO_Init+0x5c>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_GPIO_Init+0x5c>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2120      	movs	r1, #32
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <MX_GPIO_Init+0x60>)
 80006a6:	f001 f859 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006aa:	2320      	movs	r3, #32
 80006ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_GPIO_Init+0x60>)
 80006c0:	f000 fec8 	bl	8001454 <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020000 	.word	0x40020000

080006d4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
//This callback is automatically called by the HAL when the DMA transfer is completed
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	//Turn LD2 ON
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2120      	movs	r1, #32
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <HAL_UART_TxCpltCallback+0x1c>)
 80006e2:	f001 f83b 	bl	800175c <HAL_GPIO_WritePin>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40020000 	.word	0x40020000

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a0f      	ldr	r2, [pc, #60]	; (800074c <HAL_MspInit+0x4c>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_MspInit+0x4c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_MspInit+0x4c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_MspInit+0x4c>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800

08000750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a34      	ldr	r2, [pc, #208]	; (8000840 <HAL_UART_MspInit+0xf0>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d161      	bne.n	8000836 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b33      	ldr	r3, [pc, #204]	; (8000844 <HAL_UART_MspInit+0xf4>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a32      	ldr	r2, [pc, #200]	; (8000844 <HAL_UART_MspInit+0xf4>)
 800077c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b30      	ldr	r3, [pc, #192]	; (8000844 <HAL_UART_MspInit+0xf4>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <HAL_UART_MspInit+0xf4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a2b      	ldr	r2, [pc, #172]	; (8000844 <HAL_UART_MspInit+0xf4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <HAL_UART_MspInit+0xf4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007aa:	230c      	movs	r3, #12
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ba:	2307      	movs	r3, #7
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4820      	ldr	r0, [pc, #128]	; (8000848 <HAL_UART_MspInit+0xf8>)
 80007c6:	f000 fe45 	bl	8001454 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <HAL_UART_MspInit+0xfc>)
 80007cc:	4a20      	ldr	r2, [pc, #128]	; (8000850 <HAL_UART_MspInit+0x100>)
 80007ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <HAL_UART_MspInit+0xfc>)
 80007d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <HAL_UART_MspInit+0xfc>)
 80007da:	2240      	movs	r2, #64	; 0x40
 80007dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <HAL_UART_MspInit+0xfc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <HAL_UART_MspInit+0xfc>)
 80007e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <HAL_UART_MspInit+0xfc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <HAL_UART_MspInit+0xfc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_UART_MspInit+0xfc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <HAL_UART_MspInit+0xfc>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_UART_MspInit+0xfc>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800080a:	4810      	ldr	r0, [pc, #64]	; (800084c <HAL_UART_MspInit+0xfc>)
 800080c:	f000 fa20 	bl	8000c50 <HAL_DMA_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000816:	f7ff ff6d 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a0b      	ldr	r2, [pc, #44]	; (800084c <HAL_UART_MspInit+0xfc>)
 800081e:	635a      	str	r2, [r3, #52]	; 0x34
 8000820:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_UART_MspInit+0xfc>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2026      	movs	r0, #38	; 0x26
 800082c:	f000 f9d9 	bl	8000be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000830:	2026      	movs	r0, #38	; 0x26
 8000832:	f000 f9f2 	bl	8000c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40004400 	.word	0x40004400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	2000002c 	.word	0x2000002c
 8000850:	400260a0 	.word	0x400260a0

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f8a4 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <DMA1_Stream6_IRQHandler+0x10>)
 80008ae:	f000 fb67 	bl	8000f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000002c 	.word	0x2000002c

080008bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <USART2_IRQHandler+0x10>)
 80008c2:	f001 fc67 	bl	8002194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000008c 	.word	0x2000008c

080008d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <SystemInit+0x20>)
 80008d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <SystemInit+0x20>)
 80008dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800092c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008fa:	490e      	ldr	r1, [pc, #56]	; (8000934 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008fc:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000910:	4c0b      	ldr	r4, [pc, #44]	; (8000940 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800091e:	f7ff ffd7 	bl	80008d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000922:	f002 f9ad 	bl	8002c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000926:	f7ff fdd9 	bl	80004dc <main>
  bx  lr    
 800092a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800092c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000938:	08002d60 	.word	0x08002d60
  ldr r2, =_sbss
 800093c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000940:	200000d4 	.word	0x200000d4

08000944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <HAL_Init+0x40>)
 8000952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <HAL_Init+0x40>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_Init+0x40>)
 800095e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_Init+0x40>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <HAL_Init+0x40>)
 800096a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f92b 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000976:	2000      	movs	r0, #0
 8000978:	f000 f808 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097c:	f7ff fec0 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023c00 	.word	0x40023c00

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x54>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x58>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f943 	bl	8000c36 <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00e      	b.n	80009d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d80a      	bhi.n	80009d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 f90b 	bl	8000be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_InitTick+0x5c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000004 	.word	0x20000004
 80009e4:	2000000c 	.word	0x2000000c
 80009e8:	20000008 	.word	0x20000008

080009ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x20>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x24>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_IncTick+0x24>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2000000c 	.word	0x2000000c
 8000a10:	200000d0 	.word	0x200000d0

08000a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	200000d0 	.word	0x200000d0

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db0b      	blt.n	8000aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	f003 021f 	and.w	r2, r3, #31
 8000aa8:	4907      	ldr	r1, [pc, #28]	; (8000ac8 <__NVIC_EnableIRQ+0x38>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	; 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b98:	d301      	bcc.n	8000b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00f      	b.n	8000bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <SysTick_Config+0x40>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f7ff ff8e 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff29 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf4:	f7ff ff3e 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f7ff ff8e 	bl	8000b20 <NVIC_EncodePriority>
 8000c04:	4602      	mov	r2, r0
 8000c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff5d 	bl	8000acc <__NVIC_SetPriority>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff31 	bl	8000a90 <__NVIC_EnableIRQ>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffa2 	bl	8000b88 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff feda 	bl	8000a14 <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e099      	b.n	8000da0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2202      	movs	r2, #2
 8000c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0201 	bic.w	r2, r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c8c:	e00f      	b.n	8000cae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c8e:	f7ff fec1 	bl	8000a14 <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d908      	bls.n	8000cae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e078      	b.n	8000da0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1e8      	bne.n	8000c8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <HAL_DMA_Init+0x158>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	d107      	bne.n	8000d18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4313      	orrs	r3, r2
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f023 0307 	bic.w	r3, r3, #7
 8000d2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d117      	bne.n	8000d72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00e      	beq.n	8000d72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 fb01 	bl	800135c <DMA_CheckFifoParam>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d008      	beq.n	8000d72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2240      	movs	r2, #64	; 0x40
 8000d64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e016      	b.n	8000da0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fab8 	bl	80012f0 <DMA_CalcBaseAndBitshift>
 8000d80:	4603      	mov	r3, r0
 8000d82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d88:	223f      	movs	r2, #63	; 0x3f
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	f010803f 	.word	0xf010803f

08000dac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d101      	bne.n	8000dd2 <HAL_DMA_Start_IT+0x26>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e040      	b.n	8000e54 <HAL_DMA_Start_IT+0xa8>
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d12f      	bne.n	8000e46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2202      	movs	r2, #2
 8000dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2200      	movs	r2, #0
 8000df2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f000 fa4a 	bl	8001294 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e04:	223f      	movs	r2, #63	; 0x3f
 8000e06:	409a      	lsls	r2, r3
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0216 	orr.w	r2, r2, #22
 8000e1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d007      	beq.n	8000e34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0208 	orr.w	r2, r2, #8
 8000e32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0201 	orr.w	r2, r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	e005      	b.n	8000e52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e6a:	f7ff fdd3 	bl	8000a14 <HAL_GetTick>
 8000e6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d008      	beq.n	8000e8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e052      	b.n	8000f34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0216 	bic.w	r2, r2, #22
 8000e9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	695a      	ldr	r2, [r3, #20]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d103      	bne.n	8000ebe <HAL_DMA_Abort+0x62>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0208 	bic.w	r2, r2, #8
 8000ecc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0201 	bic.w	r2, r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ede:	e013      	b.n	8000f08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ee0:	f7ff fd98 	bl	8000a14 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b05      	cmp	r3, #5
 8000eec:	d90c      	bls.n	8000f08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e015      	b.n	8000f34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1e4      	bne.n	8000ee0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f1a:	223f      	movs	r2, #63	; 0x3f
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d004      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00c      	b.n	8000f74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2205      	movs	r2, #5
 8000f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f8c:	4b92      	ldr	r3, [pc, #584]	; (80011d8 <HAL_DMA_IRQHandler+0x258>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a92      	ldr	r2, [pc, #584]	; (80011dc <HAL_DMA_IRQHandler+0x25c>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	0a9b      	lsrs	r3, r3, #10
 8000f98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000faa:	2208      	movs	r2, #8
 8000fac:	409a      	lsls	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d01a      	beq.n	8000fec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d013      	beq.n	8000fec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0204 	bic.w	r2, r2, #4
 8000fd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd8:	2208      	movs	r2, #8
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe4:	f043 0201 	orr.w	r2, r3, #1
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d012      	beq.n	8001022 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00b      	beq.n	8001022 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100e:	2201      	movs	r2, #1
 8001010:	409a      	lsls	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800101a:	f043 0202 	orr.w	r2, r3, #2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001026:	2204      	movs	r2, #4
 8001028:	409a      	lsls	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d012      	beq.n	8001058 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00b      	beq.n	8001058 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001044:	2204      	movs	r2, #4
 8001046:	409a      	lsls	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001050:	f043 0204 	orr.w	r2, r3, #4
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105c:	2210      	movs	r2, #16
 800105e:	409a      	lsls	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d043      	beq.n	80010f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	d03c      	beq.n	80010f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107a:	2210      	movs	r2, #16
 800107c:	409a      	lsls	r2, r3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d018      	beq.n	80010c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d108      	bne.n	80010b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d024      	beq.n	80010f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4798      	blx	r3
 80010ae:	e01f      	b.n	80010f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d01b      	beq.n	80010f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	4798      	blx	r3
 80010c0:	e016      	b.n	80010f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d107      	bne.n	80010e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0208 	bic.w	r2, r2, #8
 80010de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f4:	2220      	movs	r2, #32
 80010f6:	409a      	lsls	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 808e 	beq.w	800121e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0310 	and.w	r3, r3, #16
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 8086 	beq.w	800121e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001116:	2220      	movs	r2, #32
 8001118:	409a      	lsls	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b05      	cmp	r3, #5
 8001128:	d136      	bne.n	8001198 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0216 	bic.w	r2, r2, #22
 8001138:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001148:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	2b00      	cmp	r3, #0
 8001150:	d103      	bne.n	800115a <HAL_DMA_IRQHandler+0x1da>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0208 	bic.w	r2, r2, #8
 8001168:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116e:	223f      	movs	r2, #63	; 0x3f
 8001170:	409a      	lsls	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800118a:	2b00      	cmp	r3, #0
 800118c:	d07d      	beq.n	800128a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	4798      	blx	r3
        }
        return;
 8001196:	e078      	b.n	800128a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01c      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d108      	bne.n	80011c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d030      	beq.n	800121e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	4798      	blx	r3
 80011c4:	e02b      	b.n	800121e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d027      	beq.n	800121e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	4798      	blx	r3
 80011d6:	e022      	b.n	800121e <HAL_DMA_IRQHandler+0x29e>
 80011d8:	20000004 	.word	0x20000004
 80011dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10f      	bne.n	800120e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0210 	bic.w	r2, r2, #16
 80011fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001222:	2b00      	cmp	r3, #0
 8001224:	d032      	beq.n	800128c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d022      	beq.n	8001278 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2205      	movs	r2, #5
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0201 	bic.w	r2, r2, #1
 8001248:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3301      	adds	r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	429a      	cmp	r2, r3
 8001254:	d307      	bcc.n	8001266 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f2      	bne.n	800124a <HAL_DMA_IRQHandler+0x2ca>
 8001264:	e000      	b.n	8001268 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001266:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	4798      	blx	r3
 8001288:	e000      	b.n	800128c <HAL_DMA_IRQHandler+0x30c>
        return;
 800128a:	bf00      	nop
    }
  }
}
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop

08001294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b40      	cmp	r3, #64	; 0x40
 80012c0:	d108      	bne.n	80012d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80012d2:	e007      	b.n	80012e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	60da      	str	r2, [r3, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	3b10      	subs	r3, #16
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <DMA_CalcBaseAndBitshift+0x64>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800130a:	4a13      	ldr	r2, [pc, #76]	; (8001358 <DMA_CalcBaseAndBitshift+0x68>)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d909      	bls.n	8001332 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001326:	f023 0303 	bic.w	r3, r3, #3
 800132a:	1d1a      	adds	r2, r3, #4
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	659a      	str	r2, [r3, #88]	; 0x58
 8001330:	e007      	b.n	8001342 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800133a:	f023 0303 	bic.w	r3, r3, #3
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	aaaaaaab 	.word	0xaaaaaaab
 8001358:	08002d48 	.word	0x08002d48

0800135c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d11f      	bne.n	80013b6 <DMA_CheckFifoParam+0x5a>
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d856      	bhi.n	800142a <DMA_CheckFifoParam+0xce>
 800137c:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <DMA_CheckFifoParam+0x28>)
 800137e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001382:	bf00      	nop
 8001384:	08001395 	.word	0x08001395
 8001388:	080013a7 	.word	0x080013a7
 800138c:	08001395 	.word	0x08001395
 8001390:	0800142b 	.word	0x0800142b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d046      	beq.n	800142e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013a4:	e043      	b.n	800142e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013ae:	d140      	bne.n	8001432 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013b4:	e03d      	b.n	8001432 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013be:	d121      	bne.n	8001404 <DMA_CheckFifoParam+0xa8>
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d837      	bhi.n	8001436 <DMA_CheckFifoParam+0xda>
 80013c6:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <DMA_CheckFifoParam+0x70>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	080013dd 	.word	0x080013dd
 80013d0:	080013e3 	.word	0x080013e3
 80013d4:	080013dd 	.word	0x080013dd
 80013d8:	080013f5 	.word	0x080013f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
      break;
 80013e0:	e030      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d025      	beq.n	800143a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013f2:	e022      	b.n	800143a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013fc:	d11f      	bne.n	800143e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001402:	e01c      	b.n	800143e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d903      	bls.n	8001412 <DMA_CheckFifoParam+0xb6>
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d003      	beq.n	8001418 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001410:	e018      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
      break;
 8001416:	e015      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00e      	beq.n	8001442 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
      break;
 8001428:	e00b      	b.n	8001442 <DMA_CheckFifoParam+0xe6>
      break;
 800142a:	bf00      	nop
 800142c:	e00a      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;
 800142e:	bf00      	nop
 8001430:	e008      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;
 8001432:	bf00      	nop
 8001434:	e006      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;
 8001436:	bf00      	nop
 8001438:	e004      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;
 800143a:	bf00      	nop
 800143c:	e002      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;   
 800143e:	bf00      	nop
 8001440:	e000      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;
 8001442:	bf00      	nop
    }
  } 
  
  return status; 
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e159      	b.n	8001724 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8148 	bne.w	800171e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d005      	beq.n	80014a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d017      	beq.n	8001544 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a2 	beq.w	800171e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b57      	ldr	r3, [pc, #348]	; (800173c <HAL_GPIO_Init+0x2e8>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a56      	ldr	r2, [pc, #344]	; (800173c <HAL_GPIO_Init+0x2e8>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b54      	ldr	r3, [pc, #336]	; (800173c <HAL_GPIO_Init+0x2e8>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a52      	ldr	r2, [pc, #328]	; (8001740 <HAL_GPIO_Init+0x2ec>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a49      	ldr	r2, [pc, #292]	; (8001744 <HAL_GPIO_Init+0x2f0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d019      	beq.n	8001656 <HAL_GPIO_Init+0x202>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a48      	ldr	r2, [pc, #288]	; (8001748 <HAL_GPIO_Init+0x2f4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0x1fe>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a47      	ldr	r2, [pc, #284]	; (800174c <HAL_GPIO_Init+0x2f8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00d      	beq.n	800164e <HAL_GPIO_Init+0x1fa>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a46      	ldr	r2, [pc, #280]	; (8001750 <HAL_GPIO_Init+0x2fc>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x1f6>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a45      	ldr	r2, [pc, #276]	; (8001754 <HAL_GPIO_Init+0x300>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_GPIO_Init+0x1f2>
 8001642:	2304      	movs	r3, #4
 8001644:	e008      	b.n	8001658 <HAL_GPIO_Init+0x204>
 8001646:	2307      	movs	r3, #7
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x204>
 800164a:	2303      	movs	r3, #3
 800164c:	e004      	b.n	8001658 <HAL_GPIO_Init+0x204>
 800164e:	2302      	movs	r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x204>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x204>
 8001656:	2300      	movs	r3, #0
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	f002 0203 	and.w	r2, r2, #3
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	4093      	lsls	r3, r2
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001668:	4935      	ldr	r1, [pc, #212]	; (8001740 <HAL_GPIO_Init+0x2ec>)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <HAL_GPIO_Init+0x304>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800169a:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <HAL_GPIO_Init+0x304>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016a0:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <HAL_GPIO_Init+0x304>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c4:	4a24      	ldr	r2, [pc, #144]	; (8001758 <HAL_GPIO_Init+0x304>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ca:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_GPIO_Init+0x304>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ee:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <HAL_GPIO_Init+0x304>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_GPIO_Init+0x304>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001718:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <HAL_GPIO_Init+0x304>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	f67f aea2 	bls.w	8001470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40013800 	.word	0x40013800
 8001744:	40020000 	.word	0x40020000
 8001748:	40020400 	.word	0x40020400
 800174c:	40020800 	.word	0x40020800
 8001750:	40020c00 	.word	0x40020c00
 8001754:	40021000 	.word	0x40021000
 8001758:	40013c00 	.word	0x40013c00

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001778:	e003      	b.n	8001782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	041a      	lsls	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	619a      	str	r2, [r3, #24]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e264      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d075      	beq.n	800189a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ae:	4ba3      	ldr	r3, [pc, #652]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d00c      	beq.n	80017d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ba:	4ba0      	ldr	r3, [pc, #640]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d112      	bne.n	80017ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c6:	4b9d      	ldr	r3, [pc, #628]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d2:	d10b      	bne.n	80017ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	4b99      	ldr	r3, [pc, #612]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d05b      	beq.n	8001898 <HAL_RCC_OscConfig+0x108>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d157      	bne.n	8001898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e23f      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f4:	d106      	bne.n	8001804 <HAL_RCC_OscConfig+0x74>
 80017f6:	4b91      	ldr	r3, [pc, #580]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a90      	ldr	r2, [pc, #576]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e01d      	b.n	8001840 <HAL_RCC_OscConfig+0xb0>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x98>
 800180e:	4b8b      	ldr	r3, [pc, #556]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a8a      	ldr	r2, [pc, #552]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b88      	ldr	r3, [pc, #544]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a87      	ldr	r2, [pc, #540]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0xb0>
 8001828:	4b84      	ldr	r3, [pc, #528]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a83      	ldr	r2, [pc, #524]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b81      	ldr	r3, [pc, #516]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a80      	ldr	r2, [pc, #512]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff f8e4 	bl	8000a14 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff f8e0 	bl	8000a14 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e204      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b76      	ldr	r3, [pc, #472]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0xc0>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff f8d0 	bl	8000a14 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff f8cc 	bl	8000a14 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1f0      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	4b6c      	ldr	r3, [pc, #432]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0xe8>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d063      	beq.n	800196e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018a6:	4b65      	ldr	r3, [pc, #404]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b2:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d11c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018be:	4b5f      	ldr	r3, [pc, #380]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d116      	bne.n	80018f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_RCC_OscConfig+0x152>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e1c4      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4952      	ldr	r1, [pc, #328]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f6:	e03a      	b.n	800196e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001900:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <HAL_RCC_OscConfig+0x2b0>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff f885 	bl	8000a14 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190e:	f7ff f881 	bl	8000a14 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1a5      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192c:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4940      	ldr	r1, [pc, #256]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
 8001940:	e015      	b.n	800196e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001942:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <HAL_RCC_OscConfig+0x2b0>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff f864 	bl	8000a14 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff f860 	bl	8000a14 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e184      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d030      	beq.n	80019dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d016      	beq.n	80019b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_OscConfig+0x2b4>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff f844 	bl	8000a14 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff f840 	bl	8000a14 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e164      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x200>
 80019ae:	e015      	b.n	80019dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_OscConfig+0x2b4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b6:	f7ff f82d 	bl	8000a14 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019be:	f7ff f829 	bl	8000a14 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e14d      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80019d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80a0 	beq.w	8001b2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10f      	bne.n	8001a1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a16:	2301      	movs	r3, #1
 8001a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_OscConfig+0x2b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d121      	bne.n	8001a6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_RCC_OscConfig+0x2b8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_RCC_OscConfig+0x2b8>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a32:	f7fe ffef 	bl	8000a14 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	e011      	b.n	8001a5e <HAL_RCC_OscConfig+0x2ce>
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	42470000 	.word	0x42470000
 8001a44:	42470e80 	.word	0x42470e80
 8001a48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4c:	f7fe ffe2 	bl	8000a14 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e106      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b85      	ldr	r3, [pc, #532]	; (8001c74 <HAL_RCC_OscConfig+0x4e4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d106      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
 8001a72:	4b81      	ldr	r3, [pc, #516]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	4a80      	ldr	r2, [pc, #512]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7e:	e01c      	b.n	8001aba <HAL_RCC_OscConfig+0x32a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d10c      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x312>
 8001a88:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	4a7a      	ldr	r2, [pc, #488]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
 8001a94:	4b78      	ldr	r3, [pc, #480]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a77      	ldr	r2, [pc, #476]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa0:	e00b      	b.n	8001aba <HAL_RCC_OscConfig+0x32a>
 8001aa2:	4b75      	ldr	r3, [pc, #468]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa6:	4a74      	ldr	r2, [pc, #464]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6713      	str	r3, [r2, #112]	; 0x70
 8001aae:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	4a71      	ldr	r2, [pc, #452]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
 8001ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d015      	beq.n	8001aee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7fe ffa7 	bl	8000a14 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7fe ffa3 	bl	8000a14 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0c5      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	4b65      	ldr	r3, [pc, #404]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ee      	beq.n	8001aca <HAL_RCC_OscConfig+0x33a>
 8001aec:	e014      	b.n	8001b18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7fe ff91 	bl	8000a14 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7fe ff8d 	bl	8000a14 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e0af      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	4b5a      	ldr	r3, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ee      	bne.n	8001af6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1e:	4b56      	ldr	r3, [pc, #344]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	4a55      	ldr	r2, [pc, #340]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 809b 	beq.w	8001c6a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d05c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d141      	bne.n	8001bcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b48:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <HAL_RCC_OscConfig+0x4ec>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7fe ff61 	bl	8000a14 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b56:	f7fe ff5d 	bl	8000a14 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e081      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b68:	4b43      	ldr	r3, [pc, #268]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	019b      	lsls	r3, r3, #6
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	085b      	lsrs	r3, r3, #1
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	061b      	lsls	r3, r3, #24
 8001b98:	4937      	ldr	r1, [pc, #220]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <HAL_RCC_OscConfig+0x4ec>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ff36 	bl	8000a14 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7fe ff32 	bl	8000a14 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e056      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x41c>
 8001bca:	e04e      	b.n	8001c6a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_RCC_OscConfig+0x4ec>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7fe ff1f 	bl	8000a14 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bda:	f7fe ff1b 	bl	8000a14 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e03f      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x44a>
 8001bf8:	e037      	b.n	8001c6a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e032      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_RCC_OscConfig+0x4e8>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d028      	beq.n	8001c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d121      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d11a      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c36:	4013      	ands	r3, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c3c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d111      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40007000 	.word	0x40007000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	42470060 	.word	0x42470060

08001c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0cc      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d90c      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b65      	ldr	r3, [pc, #404]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0b8      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd4:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a58      	ldr	r2, [pc, #352]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cec:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4a52      	ldr	r2, [pc, #328]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf8:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	494d      	ldr	r1, [pc, #308]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d044      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d119      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e07f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d003      	beq.n	8001d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e06f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e067      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5e:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f023 0203 	bic.w	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4934      	ldr	r1, [pc, #208]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d70:	f7fe fe50 	bl	8000a14 <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7fe fe4c 	bl	8000a14 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e04f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 020c 	and.w	r2, r3, #12
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1eb      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d20c      	bcs.n	8001dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e032      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4916      	ldr	r1, [pc, #88]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	490e      	ldr	r1, [pc, #56]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e06:	f000 f821 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	490a      	ldr	r1, [pc, #40]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	5ccb      	ldrb	r3, [r1, r3]
 8001e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1e:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RCC_ClockConfig+0x1c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fdb0 	bl	800098c <HAL_InitTick>

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023c00 	.word	0x40023c00
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	08002d30 	.word	0x08002d30
 8001e44:	20000004 	.word	0x20000004
 8001e48:	20000008 	.word	0x20000008

08001e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e52:	2100      	movs	r1, #0
 8001e54:	6079      	str	r1, [r7, #4]
 8001e56:	2100      	movs	r1, #0
 8001e58:	60f9      	str	r1, [r7, #12]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e5e:	2100      	movs	r1, #0
 8001e60:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e62:	4952      	ldr	r1, [pc, #328]	; (8001fac <HAL_RCC_GetSysClockFreq+0x160>)
 8001e64:	6889      	ldr	r1, [r1, #8]
 8001e66:	f001 010c 	and.w	r1, r1, #12
 8001e6a:	2908      	cmp	r1, #8
 8001e6c:	d00d      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x3e>
 8001e6e:	2908      	cmp	r1, #8
 8001e70:	f200 8094 	bhi.w	8001f9c <HAL_RCC_GetSysClockFreq+0x150>
 8001e74:	2900      	cmp	r1, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x32>
 8001e78:	2904      	cmp	r1, #4
 8001e7a:	d003      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x38>
 8001e7c:	e08e      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e80:	60bb      	str	r3, [r7, #8]
       break;
 8001e82:	e08e      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e84:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e86:	60bb      	str	r3, [r7, #8]
      break;
 8001e88:	e08b      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e8a:	4948      	ldr	r1, [pc, #288]	; (8001fac <HAL_RCC_GetSysClockFreq+0x160>)
 8001e8c:	6849      	ldr	r1, [r1, #4]
 8001e8e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e92:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e94:	4945      	ldr	r1, [pc, #276]	; (8001fac <HAL_RCC_GetSysClockFreq+0x160>)
 8001e96:	6849      	ldr	r1, [r1, #4]
 8001e98:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001e9c:	2900      	cmp	r1, #0
 8001e9e:	d024      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea0:	4942      	ldr	r1, [pc, #264]	; (8001fac <HAL_RCC_GetSysClockFreq+0x160>)
 8001ea2:	6849      	ldr	r1, [r1, #4]
 8001ea4:	0989      	lsrs	r1, r1, #6
 8001ea6:	4608      	mov	r0, r1
 8001ea8:	f04f 0100 	mov.w	r1, #0
 8001eac:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001eb0:	f04f 0500 	mov.w	r5, #0
 8001eb4:	ea00 0204 	and.w	r2, r0, r4
 8001eb8:	ea01 0305 	and.w	r3, r1, r5
 8001ebc:	493d      	ldr	r1, [pc, #244]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ebe:	fb01 f003 	mul.w	r0, r1, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	fb01 f102 	mul.w	r1, r1, r2
 8001ec8:	1844      	adds	r4, r0, r1
 8001eca:	493a      	ldr	r1, [pc, #232]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ecc:	fba2 0101 	umull	r0, r1, r2, r1
 8001ed0:	1863      	adds	r3, r4, r1
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	f7fe f982 	bl	80001e4 <__aeabi_uldivmod>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e04a      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_RCC_GetSysClockFreq+0x160>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	099b      	lsrs	r3, r3, #6
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001efa:	f04f 0100 	mov.w	r1, #0
 8001efe:	ea02 0400 	and.w	r4, r2, r0
 8001f02:	ea03 0501 	and.w	r5, r3, r1
 8001f06:	4620      	mov	r0, r4
 8001f08:	4629      	mov	r1, r5
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	014b      	lsls	r3, r1, #5
 8001f14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f18:	0142      	lsls	r2, r0, #5
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	1b00      	subs	r0, r0, r4
 8001f20:	eb61 0105 	sbc.w	r1, r1, r5
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	018b      	lsls	r3, r1, #6
 8001f2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f32:	0182      	lsls	r2, r0, #6
 8001f34:	1a12      	subs	r2, r2, r0
 8001f36:	eb63 0301 	sbc.w	r3, r3, r1
 8001f3a:	f04f 0000 	mov.w	r0, #0
 8001f3e:	f04f 0100 	mov.w	r1, #0
 8001f42:	00d9      	lsls	r1, r3, #3
 8001f44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f48:	00d0      	lsls	r0, r2, #3
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	1912      	adds	r2, r2, r4
 8001f50:	eb45 0303 	adc.w	r3, r5, r3
 8001f54:	f04f 0000 	mov.w	r0, #0
 8001f58:	f04f 0100 	mov.w	r1, #0
 8001f5c:	0299      	lsls	r1, r3, #10
 8001f5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f62:	0290      	lsls	r0, r2, #10
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	f7fe f936 	bl	80001e4 <__aeabi_uldivmod>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_RCC_GetSysClockFreq+0x160>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	60bb      	str	r3, [r7, #8]
      break;
 8001f9a:	e002      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f9e:	60bb      	str	r3, [r7, #8]
      break;
 8001fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bdb0      	pop	{r4, r5, r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	00f42400 	.word	0x00f42400
 8001fb4:	017d7840 	.word	0x017d7840

08001fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fd4:	f7ff fff0 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	0a9b      	lsrs	r3, r3, #10
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4903      	ldr	r1, [pc, #12]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	08002d40 	.word	0x08002d40

08001ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ffc:	f7ff ffdc 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0b5b      	lsrs	r3, r3, #13
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK2Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	08002d40 	.word	0x08002d40

08002020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e03f      	b.n	80020b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fb82 	bl	8000750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2224      	movs	r2, #36	; 0x24
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fc43 	bl	80028f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d153      	bne.n	800217e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_UART_Transmit_DMA+0x26>
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e04c      	b.n	8002180 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_UART_Transmit_DMA+0x38>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e045      	b.n	8002180 <HAL_UART_Transmit_DMA+0xc4>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2221      	movs	r2, #33	; 0x21
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_UART_Transmit_DMA+0xcc>)
 8002122:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002128:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_UART_Transmit_DMA+0xd0>)
 800212a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	4a17      	ldr	r2, [pc, #92]	; (8002190 <HAL_UART_Transmit_DMA+0xd4>)
 8002132:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002138:	2200      	movs	r2, #0
 800213a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	6819      	ldr	r1, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3304      	adds	r3, #4
 8002150:	461a      	mov	r2, r3
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	f7fe fe2a 	bl	8000dac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002160:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002178:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e000      	b.n	8002180 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800217e:	2302      	movs	r3, #2
  }
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	08002541 	.word	0x08002541
 800218c:	08002593 	.word	0x08002593
 8002190:	080025af 	.word	0x080025af

08002194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10d      	bne.n	80021e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_UART_IRQHandler+0x52>
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 faee 	bl	80027c0 <UART_Receive_IT>
      return;
 80021e4:	e17c      	b.n	80024e0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80b1 	beq.w	8002350 <HAL_UART_IRQHandler+0x1bc>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_UART_IRQHandler+0x70>
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 80a6 	beq.w	8002350 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_UART_IRQHandler+0x90>
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_UART_IRQHandler+0xb0>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f043 0202 	orr.w	r2, r3, #2
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_UART_IRQHandler+0xd0>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f043 0204 	orr.w	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00f      	beq.n	800228e <HAL_UART_IRQHandler+0xfa>
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d104      	bne.n	8002282 <HAL_UART_IRQHandler+0xee>
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f043 0208 	orr.w	r2, r3, #8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 811f 	beq.w	80024d6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_UART_IRQHandler+0x11e>
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fa87 	bl	80027c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022bc:	2b40      	cmp	r3, #64	; 0x40
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <HAL_UART_IRQHandler+0x146>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d031      	beq.n	800233e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f9c7 	bl	800266e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d123      	bne.n	8002336 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	2b00      	cmp	r3, #0
 8002304:	d013      	beq.n	800232e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	4a77      	ldr	r2, [pc, #476]	; (80024e8 <HAL_UART_IRQHandler+0x354>)
 800230c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fe12 	bl	8000f3c <HAL_DMA_Abort_IT>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d016      	beq.n	800234c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002328:	4610      	mov	r0, r2
 800232a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800232c:	e00e      	b.n	800234c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f8f0 	bl	8002514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	e00a      	b.n	800234c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8ec 	bl	8002514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800233c:	e006      	b.n	800234c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8e8 	bl	8002514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800234a:	e0c4      	b.n	80024d6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800234c:	bf00      	nop
    return;
 800234e:	e0c2      	b.n	80024d6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	2b01      	cmp	r3, #1
 8002356:	f040 80a2 	bne.w	800249e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 809c 	beq.w	800249e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 8096 	beq.w	800249e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002392:	2b40      	cmp	r3, #64	; 0x40
 8002394:	d14f      	bne.n	8002436 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80023a0:	8a3b      	ldrh	r3, [r7, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8099 	beq.w	80024da <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023ac:	8a3a      	ldrh	r2, [r7, #16]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	f080 8093 	bcs.w	80024da <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	8a3a      	ldrh	r2, [r7, #16]
 80023b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c4:	d02b      	beq.n	800241e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023d4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0210 	bic.w	r2, r2, #16
 8002412:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fd1f 	bl	8000e5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002426:	b29b      	uxth	r3, r3
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	b29b      	uxth	r3, r3
 800242c:	4619      	mov	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f87a 	bl	8002528 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002434:	e051      	b.n	80024da <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800243e:	b29b      	uxth	r3, r3
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d047      	beq.n	80024de <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800244e:	8a7b      	ldrh	r3, [r7, #18]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d044      	beq.n	80024de <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002462:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0210 	bic.w	r2, r2, #16
 8002490:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002492:	8a7b      	ldrh	r3, [r7, #18]
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f846 	bl	8002528 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800249c:	e01f      	b.n	80024de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_UART_IRQHandler+0x326>
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f91c 	bl	80026f0 <UART_Transmit_IT>
    return;
 80024b8:	e012      	b.n	80024e0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <HAL_UART_IRQHandler+0x34c>
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f95e 	bl	8002790 <UART_EndTransmit_IT>
    return;
 80024d4:	e004      	b.n	80024e0 <HAL_UART_IRQHandler+0x34c>
    return;
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <HAL_UART_IRQHandler+0x34c>
      return;
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <HAL_UART_IRQHandler+0x34c>
      return;
 80024de:	bf00      	nop
  }
}
 80024e0:	3728      	adds	r7, #40	; 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	080026c9 	.word	0x080026c9

080024ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d113      	bne.n	8002584 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002570:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002580:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002582:	e002      	b.n	800258a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7fe f8a5 	bl	80006d4 <HAL_UART_TxCpltCallback>
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff ffa3 	bl	80024ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ca:	2b80      	cmp	r3, #128	; 0x80
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b21      	cmp	r3, #33	; 0x21
 80025e0:	d108      	bne.n	80025f4 <UART_DMAError+0x46>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80025ee:	68b8      	ldr	r0, [r7, #8]
 80025f0:	f000 f827 	bl	8002642 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	2b40      	cmp	r3, #64	; 0x40
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b22      	cmp	r3, #34	; 0x22
 8002614:	d108      	bne.n	8002628 <UART_DMAError+0x7a>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002622:	68b8      	ldr	r0, [r7, #8]
 8002624:	f000 f823 	bl	800266e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f043 0210 	orr.w	r2, r3, #16
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002634:	68b8      	ldr	r0, [r7, #8]
 8002636:	f7ff ff6d 	bl	8002514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002658:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002684:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	2b01      	cmp	r3, #1
 800269c:	d107      	bne.n	80026ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0210 	bic.w	r2, r2, #16
 80026ac:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7ff ff16 	bl	8002514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b21      	cmp	r3, #33	; 0x21
 8002702:	d13e      	bne.n	8002782 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270c:	d114      	bne.n	8002738 <UART_Transmit_IT+0x48>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d110      	bne.n	8002738 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800272a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	1c9a      	adds	r2, r3, #2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	621a      	str	r2, [r3, #32]
 8002736:	e008      	b.n	800274a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	1c59      	adds	r1, r3, #1
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6211      	str	r1, [r2, #32]
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29b      	uxth	r3, r3
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4619      	mov	r1, r3
 8002758:	84d1      	strh	r1, [r2, #38]	; 0x26
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800276c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800277c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002782:	2302      	movs	r3, #2
  }
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7fd ff8f 	bl	80006d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b22      	cmp	r3, #34	; 0x22
 80027d2:	f040 8087 	bne.w	80028e4 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027de:	d117      	bne.n	8002810 <UART_Receive_IT+0x50>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d113      	bne.n	8002810 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	1c9a      	adds	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
 800280e:	e026      	b.n	800285e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002822:	d007      	beq.n	8002834 <UART_Receive_IT+0x74>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <UART_Receive_IT+0x82>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e008      	b.n	8002854 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800284e:	b2da      	uxtb	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29b      	uxth	r3, r3
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4619      	mov	r1, r3
 800286c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800286e:	2b00      	cmp	r3, #0
 8002870:	d136      	bne.n	80028e0 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0220 	bic.w	r2, r2, #32
 8002880:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002890:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10e      	bne.n	80028d0 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0210 	bic.w	r2, r2, #16
 80028c0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028c6:	4619      	mov	r1, r3
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fe2d 	bl	8002528 <HAL_UARTEx_RxEventCallback>
 80028ce:	e002      	b.n	80028d6 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fe15 	bl	8002500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e002      	b.n	80028e6 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f4:	b09f      	sub	sp, #124	; 0x7c
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002906:	68d9      	ldr	r1, [r3, #12]
 8002908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	ea40 0301 	orr.w	r3, r0, r1
 8002910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	431a      	orrs	r2, r3
 800291c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	431a      	orrs	r2, r3
 8002922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4313      	orrs	r3, r2
 8002928:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800292a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002934:	f021 010c 	bic.w	r1, r1, #12
 8002938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800293e:	430b      	orrs	r3, r1
 8002940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800294c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294e:	6999      	ldr	r1, [r3, #24]
 8002950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	ea40 0301 	orr.w	r3, r0, r1
 8002958:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800295a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4bc5      	ldr	r3, [pc, #788]	; (8002c74 <UART_SetConfig+0x384>)
 8002960:	429a      	cmp	r2, r3
 8002962:	d004      	beq.n	800296e <UART_SetConfig+0x7e>
 8002964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4bc3      	ldr	r3, [pc, #780]	; (8002c78 <UART_SetConfig+0x388>)
 800296a:	429a      	cmp	r2, r3
 800296c:	d103      	bne.n	8002976 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800296e:	f7ff fb43 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8002972:	6778      	str	r0, [r7, #116]	; 0x74
 8002974:	e002      	b.n	800297c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002976:	f7ff fb2b 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 800297a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800297c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002984:	f040 80b6 	bne.w	8002af4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800298a:	461c      	mov	r4, r3
 800298c:	f04f 0500 	mov.w	r5, #0
 8002990:	4622      	mov	r2, r4
 8002992:	462b      	mov	r3, r5
 8002994:	1891      	adds	r1, r2, r2
 8002996:	6439      	str	r1, [r7, #64]	; 0x40
 8002998:	415b      	adcs	r3, r3
 800299a:	647b      	str	r3, [r7, #68]	; 0x44
 800299c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029a0:	1912      	adds	r2, r2, r4
 80029a2:	eb45 0303 	adc.w	r3, r5, r3
 80029a6:	f04f 0000 	mov.w	r0, #0
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	00d9      	lsls	r1, r3, #3
 80029b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029b4:	00d0      	lsls	r0, r2, #3
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	1911      	adds	r1, r2, r4
 80029bc:	6639      	str	r1, [r7, #96]	; 0x60
 80029be:	416b      	adcs	r3, r5
 80029c0:	667b      	str	r3, [r7, #100]	; 0x64
 80029c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	1891      	adds	r1, r2, r2
 80029ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80029d0:	415b      	adcs	r3, r3
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80029dc:	f7fd fc02 	bl	80001e4 <__aeabi_uldivmod>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4ba5      	ldr	r3, [pc, #660]	; (8002c7c <UART_SetConfig+0x38c>)
 80029e6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	011e      	lsls	r6, r3, #4
 80029ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f0:	461c      	mov	r4, r3
 80029f2:	f04f 0500 	mov.w	r5, #0
 80029f6:	4622      	mov	r2, r4
 80029f8:	462b      	mov	r3, r5
 80029fa:	1891      	adds	r1, r2, r2
 80029fc:	6339      	str	r1, [r7, #48]	; 0x30
 80029fe:	415b      	adcs	r3, r3
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
 8002a02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a06:	1912      	adds	r2, r2, r4
 8002a08:	eb45 0303 	adc.w	r3, r5, r3
 8002a0c:	f04f 0000 	mov.w	r0, #0
 8002a10:	f04f 0100 	mov.w	r1, #0
 8002a14:	00d9      	lsls	r1, r3, #3
 8002a16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a1a:	00d0      	lsls	r0, r2, #3
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	1911      	adds	r1, r2, r4
 8002a22:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a24:	416b      	adcs	r3, r5
 8002a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	1891      	adds	r1, r2, r2
 8002a34:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a36:	415b      	adcs	r3, r3
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a3e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a42:	f7fd fbcf 	bl	80001e4 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4b8c      	ldr	r3, [pc, #560]	; (8002c7c <UART_SetConfig+0x38c>)
 8002a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	2164      	movs	r1, #100	; 0x64
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	3332      	adds	r3, #50	; 0x32
 8002a5e:	4a87      	ldr	r2, [pc, #540]	; (8002c7c <UART_SetConfig+0x38c>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a6c:	441e      	add	r6, r3
 8002a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a70:	4618      	mov	r0, r3
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	1894      	adds	r4, r2, r2
 8002a7c:	623c      	str	r4, [r7, #32]
 8002a7e:	415b      	adcs	r3, r3
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
 8002a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a86:	1812      	adds	r2, r2, r0
 8002a88:	eb41 0303 	adc.w	r3, r1, r3
 8002a8c:	f04f 0400 	mov.w	r4, #0
 8002a90:	f04f 0500 	mov.w	r5, #0
 8002a94:	00dd      	lsls	r5, r3, #3
 8002a96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a9a:	00d4      	lsls	r4, r2, #3
 8002a9c:	4622      	mov	r2, r4
 8002a9e:	462b      	mov	r3, r5
 8002aa0:	1814      	adds	r4, r2, r0
 8002aa2:	653c      	str	r4, [r7, #80]	; 0x50
 8002aa4:	414b      	adcs	r3, r1
 8002aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8002aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	461a      	mov	r2, r3
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	1891      	adds	r1, r2, r2
 8002ab4:	61b9      	str	r1, [r7, #24]
 8002ab6:	415b      	adcs	r3, r3
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002abe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002ac2:	f7fd fb8f 	bl	80001e4 <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4b6c      	ldr	r3, [pc, #432]	; (8002c7c <UART_SetConfig+0x38c>)
 8002acc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	2164      	movs	r1, #100	; 0x64
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	3332      	adds	r3, #50	; 0x32
 8002ade:	4a67      	ldr	r2, [pc, #412]	; (8002c7c <UART_SetConfig+0x38c>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	f003 0207 	and.w	r2, r3, #7
 8002aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4432      	add	r2, r6
 8002af0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002af2:	e0b9      	b.n	8002c68 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af6:	461c      	mov	r4, r3
 8002af8:	f04f 0500 	mov.w	r5, #0
 8002afc:	4622      	mov	r2, r4
 8002afe:	462b      	mov	r3, r5
 8002b00:	1891      	adds	r1, r2, r2
 8002b02:	6139      	str	r1, [r7, #16]
 8002b04:	415b      	adcs	r3, r3
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b0c:	1912      	adds	r2, r2, r4
 8002b0e:	eb45 0303 	adc.w	r3, r5, r3
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	00d9      	lsls	r1, r3, #3
 8002b1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b20:	00d0      	lsls	r0, r2, #3
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	eb12 0804 	adds.w	r8, r2, r4
 8002b2a:	eb43 0905 	adc.w	r9, r3, r5
 8002b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	008b      	lsls	r3, r1, #2
 8002b42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b46:	0082      	lsls	r2, r0, #2
 8002b48:	4640      	mov	r0, r8
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	f7fd fb4a 	bl	80001e4 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <UART_SetConfig+0x38c>)
 8002b56:	fba3 2302 	umull	r2, r3, r3, r2
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	011e      	lsls	r6, r3, #4
 8002b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b60:	4618      	mov	r0, r3
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	1894      	adds	r4, r2, r2
 8002b6c:	60bc      	str	r4, [r7, #8]
 8002b6e:	415b      	adcs	r3, r3
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b76:	1812      	adds	r2, r2, r0
 8002b78:	eb41 0303 	adc.w	r3, r1, r3
 8002b7c:	f04f 0400 	mov.w	r4, #0
 8002b80:	f04f 0500 	mov.w	r5, #0
 8002b84:	00dd      	lsls	r5, r3, #3
 8002b86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b8a:	00d4      	lsls	r4, r2, #3
 8002b8c:	4622      	mov	r2, r4
 8002b8e:	462b      	mov	r3, r5
 8002b90:	1814      	adds	r4, r2, r0
 8002b92:	64bc      	str	r4, [r7, #72]	; 0x48
 8002b94:	414b      	adcs	r3, r1
 8002b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	008b      	lsls	r3, r1, #2
 8002bac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bb0:	0082      	lsls	r2, r0, #2
 8002bb2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002bb6:	f7fd fb15 	bl	80001e4 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <UART_SetConfig+0x38c>)
 8002bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	2164      	movs	r1, #100	; 0x64
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	3332      	adds	r3, #50	; 0x32
 8002bd2:	4a2a      	ldr	r2, [pc, #168]	; (8002c7c <UART_SetConfig+0x38c>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bde:	441e      	add	r6, r3
 8002be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be2:	4618      	mov	r0, r3
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	1894      	adds	r4, r2, r2
 8002bee:	603c      	str	r4, [r7, #0]
 8002bf0:	415b      	adcs	r3, r3
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bf8:	1812      	adds	r2, r2, r0
 8002bfa:	eb41 0303 	adc.w	r3, r1, r3
 8002bfe:	f04f 0400 	mov.w	r4, #0
 8002c02:	f04f 0500 	mov.w	r5, #0
 8002c06:	00dd      	lsls	r5, r3, #3
 8002c08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c0c:	00d4      	lsls	r4, r2, #3
 8002c0e:	4622      	mov	r2, r4
 8002c10:	462b      	mov	r3, r5
 8002c12:	eb12 0a00 	adds.w	sl, r2, r0
 8002c16:	eb43 0b01 	adc.w	fp, r3, r1
 8002c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f04f 0100 	mov.w	r1, #0
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	008b      	lsls	r3, r1, #2
 8002c2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c32:	0082      	lsls	r2, r0, #2
 8002c34:	4650      	mov	r0, sl
 8002c36:	4659      	mov	r1, fp
 8002c38:	f7fd fad4 	bl	80001e4 <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <UART_SetConfig+0x38c>)
 8002c42:	fba3 1302 	umull	r1, r3, r3, r2
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2164      	movs	r1, #100	; 0x64
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	3332      	adds	r3, #50	; 0x32
 8002c54:	4a09      	ldr	r2, [pc, #36]	; (8002c7c <UART_SetConfig+0x38c>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	f003 020f 	and.w	r2, r3, #15
 8002c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4432      	add	r2, r6
 8002c66:	609a      	str	r2, [r3, #8]
}
 8002c68:	bf00      	nop
 8002c6a:	377c      	adds	r7, #124	; 0x7c
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c72:	bf00      	nop
 8002c74:	40011000 	.word	0x40011000
 8002c78:	40011400 	.word	0x40011400
 8002c7c:	51eb851f 	.word	0x51eb851f

08002c80 <__libc_init_array>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	4d0d      	ldr	r5, [pc, #52]	; (8002cb8 <__libc_init_array+0x38>)
 8002c84:	4c0d      	ldr	r4, [pc, #52]	; (8002cbc <__libc_init_array+0x3c>)
 8002c86:	1b64      	subs	r4, r4, r5
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	2600      	movs	r6, #0
 8002c8c:	42a6      	cmp	r6, r4
 8002c8e:	d109      	bne.n	8002ca4 <__libc_init_array+0x24>
 8002c90:	4d0b      	ldr	r5, [pc, #44]	; (8002cc0 <__libc_init_array+0x40>)
 8002c92:	4c0c      	ldr	r4, [pc, #48]	; (8002cc4 <__libc_init_array+0x44>)
 8002c94:	f000 f820 	bl	8002cd8 <_init>
 8002c98:	1b64      	subs	r4, r4, r5
 8002c9a:	10a4      	asrs	r4, r4, #2
 8002c9c:	2600      	movs	r6, #0
 8002c9e:	42a6      	cmp	r6, r4
 8002ca0:	d105      	bne.n	8002cae <__libc_init_array+0x2e>
 8002ca2:	bd70      	pop	{r4, r5, r6, pc}
 8002ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca8:	4798      	blx	r3
 8002caa:	3601      	adds	r6, #1
 8002cac:	e7ee      	b.n	8002c8c <__libc_init_array+0xc>
 8002cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb2:	4798      	blx	r3
 8002cb4:	3601      	adds	r6, #1
 8002cb6:	e7f2      	b.n	8002c9e <__libc_init_array+0x1e>
 8002cb8:	08002d58 	.word	0x08002d58
 8002cbc:	08002d58 	.word	0x08002d58
 8002cc0:	08002d58 	.word	0x08002d58
 8002cc4:	08002d5c 	.word	0x08002d5c

08002cc8 <memset>:
 8002cc8:	4402      	add	r2, r0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d100      	bne.n	8002cd2 <memset+0xa>
 8002cd0:	4770      	bx	lr
 8002cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd6:	e7f9      	b.n	8002ccc <memset+0x4>

08002cd8 <_init>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr

08002ce4 <_fini>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	bf00      	nop
 8002ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cea:	bc08      	pop	{r3}
 8002cec:	469e      	mov	lr, r3
 8002cee:	4770      	bx	lr
