
TIM_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002470  08002470  00012470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002488  08002488  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002488  08002488  00012488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002490  08002490  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002490  08002490  00012490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002494  08002494  00012494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  080024a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080024a8  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000978a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172d  00000000  00000000  000297ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015074  00000000  00000000  0002c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a759  00000000  00000000  00041274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086869  00000000  00000000  0004b9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002900  00000000  00000000  000d228c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002458 	.word	0x08002458

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08002458 	.word	0x08002458

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa16 	bl	8000900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f820 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8f0 	bl	80006bc <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f8ce 	bl	800067c <MX_DMA_Init>
  MX_TIM1_Init();
 80004e0:	f000 f87a 	bl	80005d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <main+0x3c>)
 80004e6:	f001 fce5 	bl	8001eb4 <HAL_TIM_Base_Start>
  HAL_DMA_Start(&hdma_tim1_up, (uint32_t)data, (uint32_t)&GPIOA->ODR, 2);
 80004ea:	4908      	ldr	r1, [pc, #32]	; (800050c <main+0x40>)
 80004ec:	2302      	movs	r3, #2
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <main+0x44>)
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x48>)
 80004f2:	f000 fc37 	bl	8000d64 <HAL_DMA_Start>
       __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <main+0x3c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	68da      	ldr	r2, [r3, #12]
 80004fc:	4b02      	ldr	r3, [pc, #8]	; (8000508 <main+0x3c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000504:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000506:	e7fe      	b.n	8000506 <main+0x3a>
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000000 	.word	0x20000000
 8000510:	40020014 	.word	0x40020014
 8000514:	20000074 	.word	0x20000074

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f001 ff8e 	bl	8002448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <SystemClock_Config+0xb8>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a22      	ldr	r2, [pc, #136]	; (80005d0 <SystemClock_Config+0xb8>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <SystemClock_Config+0xb8>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <SystemClock_Config+0xbc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <SystemClock_Config+0xbc>)
 8000566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <SystemClock_Config+0xbc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	2310      	movs	r3, #16
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000584:	2300      	movs	r3, #0
 8000586:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f82d 	bl	80015ec <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000598:	f000 f8c2 	bl	8000720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fa90 	bl	8001adc <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005c2:	f000 f8ad 	bl	8000720 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	; 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_TIM1_Init+0x9c>)
 80005f6:	4a20      	ldr	r2, [pc, #128]	; (8000678 <MX_TIM1_Init+0xa0>)
 80005f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_TIM1_Init+0x9c>)
 80005fc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000600:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_TIM1_Init+0x9c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_TIM1_Init+0x9c>)
 800060a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800060e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_TIM1_Init+0x9c>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_TIM1_Init+0x9c>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_TIM1_Init+0x9c>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000622:	4814      	ldr	r0, [pc, #80]	; (8000674 <MX_TIM1_Init+0x9c>)
 8000624:	f001 fbf6 	bl	8001e14 <HAL_TIM_Base_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800062e:	f000 f877 	bl	8000720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000636:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	4619      	mov	r1, r3
 800063e:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_TIM1_Init+0x9c>)
 8000640:	f001 fc92 	bl	8001f68 <HAL_TIM_ConfigClockSource>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800064a:	f000 f869 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_TIM1_Init+0x9c>)
 800065c:	f001 fe62 	bl	8002324 <HAL_TIMEx_MasterConfigSynchronization>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000666:	f000 f85b 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000002c 	.word	0x2000002c
 8000678:	40010000 	.word	0x40010000

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_DMA_Init+0x3c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <MX_DMA_Init+0x3c>)
 800068c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_DMA_Init+0x3c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2044      	movs	r0, #68	; 0x44
 80006a4:	f000 fa79 	bl	8000b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80006a8:	2044      	movs	r0, #68	; 0x44
 80006aa:	f000 fa92 	bl	8000bd2 <HAL_NVIC_EnableIRQ>

}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_GPIO_Init+0x5c>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <MX_GPIO_Init+0x5c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_GPIO_Init+0x5c>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2120      	movs	r1, #32
 80006f0:	480a      	ldr	r0, [pc, #40]	; (800071c <MX_GPIO_Init+0x60>)
 80006f2:	f000 ff61 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006f6:	2320      	movs	r3, #32
 80006f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_GPIO_Init+0x60>)
 800070c:	f000 fdd0 	bl	80012b0 <HAL_GPIO_Init>

}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <HAL_MspInit+0x4c>)
 800073c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000740:	6453      	str	r3, [r2, #68]	; 0x44
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <HAL_MspInit+0x4c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a21      	ldr	r2, [pc, #132]	; (8000810 <HAL_TIM_Base_MspInit+0x94>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d13c      	bne.n	8000808 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <HAL_TIM_Base_MspInit+0x98>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <HAL_TIM_Base_MspInit+0x98>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6453      	str	r3, [r2, #68]	; 0x44
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <HAL_TIM_Base_MspInit+0x98>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <HAL_TIM_Base_MspInit+0xa0>)
 80007ae:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 80007b2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80007b6:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 80007ba:	2240      	movs	r2, #64	; 0x40
 80007bc:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 80007c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ca:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 80007da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007de:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 80007ee:	f000 fa0b 	bl	8000c08 <HAL_DMA_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 80007f8:	f7ff ff92 	bl	8000720 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a06      	ldr	r2, [pc, #24]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 8000800:	621a      	str	r2, [r3, #32]
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <HAL_TIM_Base_MspInit+0x9c>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40010000 	.word	0x40010000
 8000814:	40023800 	.word	0x40023800
 8000818:	20000074 	.word	0x20000074
 800081c:	40026488 	.word	0x40026488

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f89a 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <DMA2_Stream5_IRQHandler+0x10>)
 800087a:	f000 faaf 	bl	8000ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000074 	.word	0x20000074

08000888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008b2:	490e      	ldr	r1, [pc, #56]	; (80008ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008c8:	4c0b      	ldr	r4, [pc, #44]	; (80008f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008d6:	f7ff ffd7 	bl	8000888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008da:	f001 fd91 	bl	8002400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008de:	f7ff fdf5 	bl	80004cc <main>
  bx  lr    
 80008e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008f0:	08002498 	.word	0x08002498
  ldr r2, =_sbss
 80008f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008f8:	200000d8 	.word	0x200000d8

080008fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC_IRQHandler>
	...

08000900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <HAL_Init+0x40>)
 800090a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800090e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_Init+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <HAL_Init+0x40>)
 8000916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800091a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_Init+0x40>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <HAL_Init+0x40>)
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000928:	2003      	movs	r0, #3
 800092a:	f000 f92b 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 f808 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000934:	f7ff fefa 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023c00 	.word	0x40023c00

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_InitTick+0x54>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_InitTick+0x58>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095a:	fbb3 f3f1 	udiv	r3, r3, r1
 800095e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f943 	bl	8000bee <HAL_SYSTICK_Config>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e00e      	b.n	8000990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d80a      	bhi.n	800098e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f000 f90b 	bl	8000b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_InitTick+0x5c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	e000      	b.n	8000990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000004 	.word	0x20000004
 800099c:	2000000c 	.word	0x2000000c
 80009a0:	20000008 	.word	0x20000008

080009a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x20>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x24>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HAL_IncTick+0x24>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	2000000c 	.word	0x2000000c
 80009c8:	200000d4 	.word	0x200000d4

080009cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_GetTick+0x14>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	200000d4 	.word	0x200000d4

080009e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <__NVIC_GetPriorityGrouping+0x18>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	f003 0307 	and.w	r3, r3, #7
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	db0b      	blt.n	8000a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 021f 	and.w	r2, r3, #31
 8000a60:	4907      	ldr	r1, [pc, #28]	; (8000a80 <__NVIC_EnableIRQ+0x38>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	2001      	movs	r0, #1
 8000a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	; 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b50:	d301      	bcc.n	8000b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00f      	b.n	8000b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <SysTick_Config+0x40>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f7ff ff8e 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x40>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff29 	bl	80009e4 <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bac:	f7ff ff3e 	bl	8000a2c <__NVIC_GetPriorityGrouping>
 8000bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff ff8e 	bl	8000ad8 <NVIC_EncodePriority>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff5d 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff31 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffa2 	bl	8000b40 <SysTick_Config>
 8000bfc:	4603      	mov	r3, r0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff feda 	bl	80009cc <HAL_GetTick>
 8000c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d101      	bne.n	8000c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e099      	b.n	8000d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2202      	movs	r2, #2
 8000c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0201 	bic.w	r2, r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c44:	e00f      	b.n	8000c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c46:	f7ff fec1 	bl	80009cc <HAL_GetTick>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	2b05      	cmp	r3, #5
 8000c52:	d908      	bls.n	8000c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2220      	movs	r2, #32
 8000c58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e078      	b.n	8000d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1e8      	bne.n	8000c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <HAL_DMA_Init+0x158>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d107      	bne.n	8000cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f023 0307 	bic.w	r3, r3, #7
 8000ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d117      	bne.n	8000d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d00e      	beq.n	8000d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 fa53 	bl	80011b8 <DMA_CheckFifoParam>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d008      	beq.n	8000d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2240      	movs	r2, #64	; 0x40
 8000d1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000d26:	2301      	movs	r3, #1
 8000d28:	e016      	b.n	8000d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 fa0a 	bl	800114c <DMA_CalcBaseAndBitshift>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d40:	223f      	movs	r2, #63	; 0x3f
 8000d42:	409a      	lsls	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	f010803f 	.word	0xf010803f

08000d64 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d101      	bne.n	8000d84 <HAL_DMA_Start+0x20>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e026      	b.n	8000dd2 <HAL_DMA_Start+0x6e>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d115      	bne.n	8000dc4 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2200      	movs	r2, #0
 8000da4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 f99f 	bl	80010f0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 0201 	orr.w	r2, r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e005      	b.n	8000dd0 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8000dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000de8:	4b92      	ldr	r3, [pc, #584]	; (8001034 <HAL_DMA_IRQHandler+0x258>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a92      	ldr	r2, [pc, #584]	; (8001038 <HAL_DMA_IRQHandler+0x25c>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	0a9b      	lsrs	r3, r3, #10
 8000df4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e06:	2208      	movs	r2, #8
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d01a      	beq.n	8000e48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d013      	beq.n	8000e48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0204 	bic.w	r2, r2, #4
 8000e2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e34:	2208      	movs	r2, #8
 8000e36:	409a      	lsls	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e40:	f043 0201 	orr.w	r2, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d012      	beq.n	8000e7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00b      	beq.n	8000e7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e76:	f043 0202 	orr.w	r2, r3, #2
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e82:	2204      	movs	r2, #4
 8000e84:	409a      	lsls	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d012      	beq.n	8000eb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00b      	beq.n	8000eb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eac:	f043 0204 	orr.w	r2, r3, #4
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb8:	2210      	movs	r2, #16
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d043      	beq.n	8000f4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d03c      	beq.n	8000f4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed6:	2210      	movs	r2, #16
 8000ed8:	409a      	lsls	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d018      	beq.n	8000f1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d108      	bne.n	8000f0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d024      	beq.n	8000f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	4798      	blx	r3
 8000f0a:	e01f      	b.n	8000f4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d01b      	beq.n	8000f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	4798      	blx	r3
 8000f1c:	e016      	b.n	8000f4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d107      	bne.n	8000f3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 0208 	bic.w	r2, r2, #8
 8000f3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f50:	2220      	movs	r2, #32
 8000f52:	409a      	lsls	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 808e 	beq.w	800107a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0310 	and.w	r3, r3, #16
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 8086 	beq.w	800107a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f72:	2220      	movs	r2, #32
 8000f74:	409a      	lsls	r2, r3
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b05      	cmp	r3, #5
 8000f84:	d136      	bne.n	8000ff4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0216 	bic.w	r2, r2, #22
 8000f94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	695a      	ldr	r2, [r3, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d103      	bne.n	8000fb6 <HAL_DMA_IRQHandler+0x1da>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d007      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0208 	bic.w	r2, r2, #8
 8000fc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fca:	223f      	movs	r2, #63	; 0x3f
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d07d      	beq.n	80010e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4798      	blx	r3
        }
        return;
 8000ff2:	e078      	b.n	80010e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01c      	beq.n	800103c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d108      	bne.n	8001022 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	2b00      	cmp	r3, #0
 8001016:	d030      	beq.n	800107a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	4798      	blx	r3
 8001020:	e02b      	b.n	800107a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001026:	2b00      	cmp	r3, #0
 8001028:	d027      	beq.n	800107a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	4798      	blx	r3
 8001032:	e022      	b.n	800107a <HAL_DMA_IRQHandler+0x29e>
 8001034:	20000004 	.word	0x20000004
 8001038:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10f      	bne.n	800106a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0210 	bic.w	r2, r2, #16
 8001058:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107e:	2b00      	cmp	r3, #0
 8001080:	d032      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d022      	beq.n	80010d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2205      	movs	r2, #5
 8001092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3301      	adds	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d307      	bcc.n	80010c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1f2      	bne.n	80010a6 <HAL_DMA_IRQHandler+0x2ca>
 80010c0:	e000      	b.n	80010c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80010c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	4798      	blx	r3
 80010e4:	e000      	b.n	80010e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80010e6:	bf00      	nop
    }
  }
}
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop

080010f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800110c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b40      	cmp	r3, #64	; 0x40
 800111c:	d108      	bne.n	8001130 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800112e:	e007      	b.n	8001140 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	60da      	str	r2, [r3, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	3b10      	subs	r3, #16
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <DMA_CalcBaseAndBitshift+0x64>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d909      	bls.n	800118e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001182:	f023 0303 	bic.w	r3, r3, #3
 8001186:	1d1a      	adds	r2, r3, #4
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	659a      	str	r2, [r3, #88]	; 0x58
 800118c:	e007      	b.n	800119e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	aaaaaaab 	.word	0xaaaaaaab
 80011b4:	08002480 	.word	0x08002480

080011b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d11f      	bne.n	8001212 <DMA_CheckFifoParam+0x5a>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d856      	bhi.n	8001286 <DMA_CheckFifoParam+0xce>
 80011d8:	a201      	add	r2, pc, #4	; (adr r2, 80011e0 <DMA_CheckFifoParam+0x28>)
 80011da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011de:	bf00      	nop
 80011e0:	080011f1 	.word	0x080011f1
 80011e4:	08001203 	.word	0x08001203
 80011e8:	080011f1 	.word	0x080011f1
 80011ec:	08001287 	.word	0x08001287
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d046      	beq.n	800128a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001200:	e043      	b.n	800128a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800120a:	d140      	bne.n	800128e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001210:	e03d      	b.n	800128e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800121a:	d121      	bne.n	8001260 <DMA_CheckFifoParam+0xa8>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d837      	bhi.n	8001292 <DMA_CheckFifoParam+0xda>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <DMA_CheckFifoParam+0x70>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001239 	.word	0x08001239
 800122c:	0800123f 	.word	0x0800123f
 8001230:	08001239 	.word	0x08001239
 8001234:	08001251 	.word	0x08001251
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
      break;
 800123c:	e030      	b.n	80012a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d025      	beq.n	8001296 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800124e:	e022      	b.n	8001296 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001254:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001258:	d11f      	bne.n	800129a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800125e:	e01c      	b.n	800129a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d903      	bls.n	800126e <DMA_CheckFifoParam+0xb6>
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d003      	beq.n	8001274 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800126c:	e018      	b.n	80012a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
      break;
 8001272:	e015      	b.n	80012a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00e      	beq.n	800129e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
      break;
 8001284:	e00b      	b.n	800129e <DMA_CheckFifoParam+0xe6>
      break;
 8001286:	bf00      	nop
 8001288:	e00a      	b.n	80012a0 <DMA_CheckFifoParam+0xe8>
      break;
 800128a:	bf00      	nop
 800128c:	e008      	b.n	80012a0 <DMA_CheckFifoParam+0xe8>
      break;
 800128e:	bf00      	nop
 8001290:	e006      	b.n	80012a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001292:	bf00      	nop
 8001294:	e004      	b.n	80012a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001296:	bf00      	nop
 8001298:	e002      	b.n	80012a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800129a:	bf00      	nop
 800129c:	e000      	b.n	80012a0 <DMA_CheckFifoParam+0xe8>
      break;
 800129e:	bf00      	nop
    }
  } 
  
  return status; 
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	e159      	b.n	8001580 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012cc:	2201      	movs	r2, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f040 8148 	bne.w	800157a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d005      	beq.n	8001302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d130      	bne.n	8001364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001338:	2201      	movs	r2, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	f003 0201 	and.w	r2, r3, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b03      	cmp	r3, #3
 800136e:	d017      	beq.n	80013a0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d123      	bne.n	80013f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	08da      	lsrs	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3208      	adds	r2, #8
 80013b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	220f      	movs	r2, #15
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	08da      	lsrs	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3208      	adds	r2, #8
 80013ee:	69b9      	ldr	r1, [r7, #24]
 80013f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a2 	beq.w	800157a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b57      	ldr	r3, [pc, #348]	; (8001598 <HAL_GPIO_Init+0x2e8>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a56      	ldr	r2, [pc, #344]	; (8001598 <HAL_GPIO_Init+0x2e8>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b54      	ldr	r3, [pc, #336]	; (8001598 <HAL_GPIO_Init+0x2e8>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001452:	4a52      	ldr	r2, [pc, #328]	; (800159c <HAL_GPIO_Init+0x2ec>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a49      	ldr	r2, [pc, #292]	; (80015a0 <HAL_GPIO_Init+0x2f0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d019      	beq.n	80014b2 <HAL_GPIO_Init+0x202>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a48      	ldr	r2, [pc, #288]	; (80015a4 <HAL_GPIO_Init+0x2f4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0x1fe>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a47      	ldr	r2, [pc, #284]	; (80015a8 <HAL_GPIO_Init+0x2f8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00d      	beq.n	80014aa <HAL_GPIO_Init+0x1fa>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a46      	ldr	r2, [pc, #280]	; (80015ac <HAL_GPIO_Init+0x2fc>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x1f6>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a45      	ldr	r2, [pc, #276]	; (80015b0 <HAL_GPIO_Init+0x300>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_GPIO_Init+0x1f2>
 800149e:	2304      	movs	r3, #4
 80014a0:	e008      	b.n	80014b4 <HAL_GPIO_Init+0x204>
 80014a2:	2307      	movs	r3, #7
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x204>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x204>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x204>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x204>
 80014b2:	2300      	movs	r3, #0
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	f002 0203 	and.w	r2, r2, #3
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c4:	4935      	ldr	r1, [pc, #212]	; (800159c <HAL_GPIO_Init+0x2ec>)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <HAL_GPIO_Init+0x304>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f6:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <HAL_GPIO_Init+0x304>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014fc:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_GPIO_Init+0x304>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001520:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <HAL_GPIO_Init+0x304>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_GPIO_Init+0x304>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800154a:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <HAL_GPIO_Init+0x304>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_GPIO_Init+0x304>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001574:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <HAL_GPIO_Init+0x304>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	f67f aea2 	bls.w	80012cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40013800 	.word	0x40013800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40013c00 	.word	0x40013c00

080015b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c8:	787b      	ldrb	r3, [r7, #1]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d4:	e003      	b.n	80015de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	619a      	str	r2, [r3, #24]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e264      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d075      	beq.n	80016f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160a:	4ba3      	ldr	r3, [pc, #652]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d00c      	beq.n	8001630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001616:	4ba0      	ldr	r3, [pc, #640]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800161e:	2b08      	cmp	r3, #8
 8001620:	d112      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001622:	4b9d      	ldr	r3, [pc, #628]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800162e:	d10b      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	4b99      	ldr	r3, [pc, #612]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d05b      	beq.n	80016f4 <HAL_RCC_OscConfig+0x108>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d157      	bne.n	80016f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e23f      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x74>
 8001652:	4b91      	ldr	r3, [pc, #580]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a90      	ldr	r2, [pc, #576]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e01d      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x98>
 800166a:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a8a      	ldr	r2, [pc, #552]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b88      	ldr	r3, [pc, #544]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a87      	ldr	r2, [pc, #540]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001684:	4b84      	ldr	r3, [pc, #528]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a83      	ldr	r2, [pc, #524]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b81      	ldr	r3, [pc, #516]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a80      	ldr	r2, [pc, #512]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff f992 	bl	80009cc <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff f98e 	bl	80009cc <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e204      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b76      	ldr	r3, [pc, #472]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0xc0>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff f97e 	bl	80009cc <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff f97a 	bl	80009cc <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1f0      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	4b6c      	ldr	r3, [pc, #432]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0xe8>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d063      	beq.n	80017ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001702:	4b65      	ldr	r3, [pc, #404]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b62      	ldr	r3, [pc, #392]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001716:	2b08      	cmp	r3, #8
 8001718:	d11c      	bne.n	8001754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d116      	bne.n	8001754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	4b5c      	ldr	r3, [pc, #368]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_RCC_OscConfig+0x152>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e1c4      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b56      	ldr	r3, [pc, #344]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4952      	ldr	r1, [pc, #328]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	e03a      	b.n	80017ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175c:	4b4f      	ldr	r3, [pc, #316]	; (800189c <HAL_RCC_OscConfig+0x2b0>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff f933 	bl	80009cc <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff f92f 	bl	80009cc <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1a5      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	4b46      	ldr	r3, [pc, #280]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b43      	ldr	r3, [pc, #268]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4940      	ldr	r1, [pc, #256]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179e:	4b3f      	ldr	r3, [pc, #252]	; (800189c <HAL_RCC_OscConfig+0x2b0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff f912 	bl	80009cc <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff f90e 	bl	80009cc <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e184      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	4b36      	ldr	r3, [pc, #216]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d030      	beq.n	8001838 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d016      	beq.n	800180c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_RCC_OscConfig+0x2b4>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff f8f2 	bl	80009cc <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff f8ee 	bl	80009cc <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e164      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x200>
 800180a:	e015      	b.n	8001838 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <HAL_RCC_OscConfig+0x2b4>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff f8db 	bl	80009cc <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181a:	f7ff f8d7 	bl	80009cc <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e14d      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 800182e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a0 	beq.w	8001986 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10f      	bne.n	8001876 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_RCC_OscConfig+0x2ac>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_RCC_OscConfig+0x2b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d121      	bne.n	80018c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_RCC_OscConfig+0x2b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_RCC_OscConfig+0x2b8>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188e:	f7ff f89d 	bl	80009cc <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	e011      	b.n	80018ba <HAL_RCC_OscConfig+0x2ce>
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	42470000 	.word	0x42470000
 80018a0:	42470e80 	.word	0x42470e80
 80018a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a8:	f7ff f890 	bl	80009cc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e106      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	4b85      	ldr	r3, [pc, #532]	; (8001ad0 <HAL_RCC_OscConfig+0x4e4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d106      	bne.n	80018dc <HAL_RCC_OscConfig+0x2f0>
 80018ce:	4b81      	ldr	r3, [pc, #516]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	4a80      	ldr	r2, [pc, #512]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6713      	str	r3, [r2, #112]	; 0x70
 80018da:	e01c      	b.n	8001916 <HAL_RCC_OscConfig+0x32a>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d10c      	bne.n	80018fe <HAL_RCC_OscConfig+0x312>
 80018e4:	4b7b      	ldr	r3, [pc, #492]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	4a7a      	ldr	r2, [pc, #488]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6713      	str	r3, [r2, #112]	; 0x70
 80018f0:	4b78      	ldr	r3, [pc, #480]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	4a77      	ldr	r2, [pc, #476]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6713      	str	r3, [r2, #112]	; 0x70
 80018fc:	e00b      	b.n	8001916 <HAL_RCC_OscConfig+0x32a>
 80018fe:	4b75      	ldr	r3, [pc, #468]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001902:	4a74      	ldr	r2, [pc, #464]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6713      	str	r3, [r2, #112]	; 0x70
 800190a:	4b72      	ldr	r3, [pc, #456]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	4a71      	ldr	r2, [pc, #452]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d015      	beq.n	800194a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191e:	f7ff f855 	bl	80009cc <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff f851 	bl	80009cc <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	; 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0c5      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	4b65      	ldr	r3, [pc, #404]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0ee      	beq.n	8001926 <HAL_RCC_OscConfig+0x33a>
 8001948:	e014      	b.n	8001974 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff f83f 	bl	80009cc <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff f83b 	bl	80009cc <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0af      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	4b5a      	ldr	r3, [pc, #360]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1ee      	bne.n	8001952 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d105      	bne.n	8001986 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197a:	4b56      	ldr	r3, [pc, #344]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a55      	ldr	r2, [pc, #340]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 8001980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 809b 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001990:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d05c      	beq.n	8001a56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d141      	bne.n	8001a28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a4:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <HAL_RCC_OscConfig+0x4ec>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff f80f 	bl	80009cc <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff f80b 	bl	80009cc <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e081      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c4:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	019b      	lsls	r3, r3, #6
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	085b      	lsrs	r3, r3, #1
 80019e8:	3b01      	subs	r3, #1
 80019ea:	041b      	lsls	r3, r3, #16
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	061b      	lsls	r3, r3, #24
 80019f4:	4937      	ldr	r1, [pc, #220]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fa:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <HAL_RCC_OscConfig+0x4ec>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7fe ffe4 	bl	80009cc <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a08:	f7fe ffe0 	bl	80009cc <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e056      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x41c>
 8001a26:	e04e      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_RCC_OscConfig+0x4ec>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7fe ffcd 	bl	80009cc <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a36:	f7fe ffc9 	bl	80009cc <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e03f      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x44a>
 8001a54:	e037      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e032      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_RCC_OscConfig+0x4e8>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d028      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d121      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d11a      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a92:	4013      	ands	r3, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d111      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	085b      	lsrs	r3, r3, #1
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	42470060 	.word	0x42470060

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0cc      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b68      	ldr	r3, [pc, #416]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d90c      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b65      	ldr	r3, [pc, #404]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b63      	ldr	r3, [pc, #396]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0b8      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b30:	4b59      	ldr	r3, [pc, #356]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a58      	ldr	r2, [pc, #352]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a52      	ldr	r2, [pc, #328]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	494d      	ldr	r1, [pc, #308]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d044      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d119      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e07f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e06f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e067      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bba:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 0203 	bic.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4934      	ldr	r1, [pc, #208]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7fe fefe 	bl	80009cc <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7fe fefa 	bl	80009cc <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e04f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 020c 	and.w	r2, r3, #12
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d20c      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e032      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4916      	ldr	r1, [pc, #88]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	490e      	ldr	r1, [pc, #56]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c62:	f000 f821 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001c66:	4602      	mov	r2, r0
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	490a      	ldr	r1, [pc, #40]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	5ccb      	ldrb	r3, [r1, r3]
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fe5e 	bl	8000944 <HAL_InitTick>

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08002470 	.word	0x08002470
 8001ca0:	20000004 	.word	0x20000004
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca8:	b5b0      	push	{r4, r5, r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cae:	2100      	movs	r1, #0
 8001cb0:	6079      	str	r1, [r7, #4]
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	60f9      	str	r1, [r7, #12]
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cba:	2100      	movs	r1, #0
 8001cbc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cbe:	4952      	ldr	r1, [pc, #328]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cc0:	6889      	ldr	r1, [r1, #8]
 8001cc2:	f001 010c 	and.w	r1, r1, #12
 8001cc6:	2908      	cmp	r1, #8
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x3e>
 8001cca:	2908      	cmp	r1, #8
 8001ccc:	f200 8094 	bhi.w	8001df8 <HAL_RCC_GetSysClockFreq+0x150>
 8001cd0:	2900      	cmp	r1, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0x32>
 8001cd4:	2904      	cmp	r1, #4
 8001cd6:	d003      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x38>
 8001cd8:	e08e      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cda:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x164>)
 8001cdc:	60bb      	str	r3, [r7, #8]
       break;
 8001cde:	e08e      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce0:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ce2:	60bb      	str	r3, [r7, #8]
      break;
 8001ce4:	e08b      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce6:	4948      	ldr	r1, [pc, #288]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ce8:	6849      	ldr	r1, [r1, #4]
 8001cea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001cee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf0:	4945      	ldr	r1, [pc, #276]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cf2:	6849      	ldr	r1, [r1, #4]
 8001cf4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001cf8:	2900      	cmp	r1, #0
 8001cfa:	d024      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfc:	4942      	ldr	r1, [pc, #264]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cfe:	6849      	ldr	r1, [r1, #4]
 8001d00:	0989      	lsrs	r1, r1, #6
 8001d02:	4608      	mov	r0, r1
 8001d04:	f04f 0100 	mov.w	r1, #0
 8001d08:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001d0c:	f04f 0500 	mov.w	r5, #0
 8001d10:	ea00 0204 	and.w	r2, r0, r4
 8001d14:	ea01 0305 	and.w	r3, r1, r5
 8001d18:	493d      	ldr	r1, [pc, #244]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d1a:	fb01 f003 	mul.w	r0, r1, r3
 8001d1e:	2100      	movs	r1, #0
 8001d20:	fb01 f102 	mul.w	r1, r1, r2
 8001d24:	1844      	adds	r4, r0, r1
 8001d26:	493a      	ldr	r1, [pc, #232]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d28:	fba2 0101 	umull	r0, r1, r2, r1
 8001d2c:	1863      	adds	r3, r4, r1
 8001d2e:	4619      	mov	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	461a      	mov	r2, r3
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	f7fe fa4c 	bl	80001d4 <__aeabi_uldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4613      	mov	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e04a      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	ea02 0400 	and.w	r4, r2, r0
 8001d5e:	ea03 0501 	and.w	r5, r3, r1
 8001d62:	4620      	mov	r0, r4
 8001d64:	4629      	mov	r1, r5
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	014b      	lsls	r3, r1, #5
 8001d70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d74:	0142      	lsls	r2, r0, #5
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	1b00      	subs	r0, r0, r4
 8001d7c:	eb61 0105 	sbc.w	r1, r1, r5
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	018b      	lsls	r3, r1, #6
 8001d8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d8e:	0182      	lsls	r2, r0, #6
 8001d90:	1a12      	subs	r2, r2, r0
 8001d92:	eb63 0301 	sbc.w	r3, r3, r1
 8001d96:	f04f 0000 	mov.w	r0, #0
 8001d9a:	f04f 0100 	mov.w	r1, #0
 8001d9e:	00d9      	lsls	r1, r3, #3
 8001da0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001da4:	00d0      	lsls	r0, r2, #3
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	1912      	adds	r2, r2, r4
 8001dac:	eb45 0303 	adc.w	r3, r5, r3
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	0299      	lsls	r1, r3, #10
 8001dba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dbe:	0290      	lsls	r0, r2, #10
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	f7fe fa00 	bl	80001d4 <__aeabi_uldivmod>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4613      	mov	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	0c1b      	lsrs	r3, r3, #16
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	3301      	adds	r3, #1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	60bb      	str	r3, [r7, #8]
      break;
 8001df6:	e002      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x164>)
 8001dfa:	60bb      	str	r3, [r7, #8]
      break;
 8001dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bdb0      	pop	{r4, r5, r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	00f42400 	.word	0x00f42400
 8001e10:	017d7840 	.word	0x017d7840

08001e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e041      	b.n	8001eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe fc9e 	bl	800077c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	f000 f94c 	bl	80020f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d001      	beq.n	8001ecc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e03c      	b.n	8001f46 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <HAL_TIM_Base_Start+0xa0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d018      	beq.n	8001f10 <HAL_TIM_Base_Start+0x5c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee6:	d013      	beq.n	8001f10 <HAL_TIM_Base_Start+0x5c>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_TIM_Base_Start+0xa4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00e      	beq.n	8001f10 <HAL_TIM_Base_Start+0x5c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <HAL_TIM_Base_Start+0xa8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d009      	beq.n	8001f10 <HAL_TIM_Base_Start+0x5c>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_TIM_Base_Start+0xac>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d004      	beq.n	8001f10 <HAL_TIM_Base_Start+0x5c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <HAL_TIM_Base_Start+0xb0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d111      	bne.n	8001f34 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d010      	beq.n	8001f44 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f32:	e007      	b.n	8001f44 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40010000 	.word	0x40010000
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40000800 	.word	0x40000800
 8001f60:	40000c00 	.word	0x40000c00
 8001f64:	40014000 	.word	0x40014000

08001f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_TIM_ConfigClockSource+0x18>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e0b3      	b.n	80020e8 <HAL_TIM_ConfigClockSource+0x180>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fa6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb8:	d03e      	beq.n	8002038 <HAL_TIM_ConfigClockSource+0xd0>
 8001fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fbe:	f200 8087 	bhi.w	80020d0 <HAL_TIM_ConfigClockSource+0x168>
 8001fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc6:	f000 8085 	beq.w	80020d4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fce:	d87f      	bhi.n	80020d0 <HAL_TIM_ConfigClockSource+0x168>
 8001fd0:	2b70      	cmp	r3, #112	; 0x70
 8001fd2:	d01a      	beq.n	800200a <HAL_TIM_ConfigClockSource+0xa2>
 8001fd4:	2b70      	cmp	r3, #112	; 0x70
 8001fd6:	d87b      	bhi.n	80020d0 <HAL_TIM_ConfigClockSource+0x168>
 8001fd8:	2b60      	cmp	r3, #96	; 0x60
 8001fda:	d050      	beq.n	800207e <HAL_TIM_ConfigClockSource+0x116>
 8001fdc:	2b60      	cmp	r3, #96	; 0x60
 8001fde:	d877      	bhi.n	80020d0 <HAL_TIM_ConfigClockSource+0x168>
 8001fe0:	2b50      	cmp	r3, #80	; 0x50
 8001fe2:	d03c      	beq.n	800205e <HAL_TIM_ConfigClockSource+0xf6>
 8001fe4:	2b50      	cmp	r3, #80	; 0x50
 8001fe6:	d873      	bhi.n	80020d0 <HAL_TIM_ConfigClockSource+0x168>
 8001fe8:	2b40      	cmp	r3, #64	; 0x40
 8001fea:	d058      	beq.n	800209e <HAL_TIM_ConfigClockSource+0x136>
 8001fec:	2b40      	cmp	r3, #64	; 0x40
 8001fee:	d86f      	bhi.n	80020d0 <HAL_TIM_ConfigClockSource+0x168>
 8001ff0:	2b30      	cmp	r3, #48	; 0x30
 8001ff2:	d064      	beq.n	80020be <HAL_TIM_ConfigClockSource+0x156>
 8001ff4:	2b30      	cmp	r3, #48	; 0x30
 8001ff6:	d86b      	bhi.n	80020d0 <HAL_TIM_ConfigClockSource+0x168>
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d060      	beq.n	80020be <HAL_TIM_ConfigClockSource+0x156>
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d867      	bhi.n	80020d0 <HAL_TIM_ConfigClockSource+0x168>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d05c      	beq.n	80020be <HAL_TIM_ConfigClockSource+0x156>
 8002004:	2b10      	cmp	r3, #16
 8002006:	d05a      	beq.n	80020be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002008:	e062      	b.n	80020d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6899      	ldr	r1, [r3, #8]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f000 f963 	bl	80022e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800202c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	609a      	str	r2, [r3, #8]
      break;
 8002036:	e04e      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f000 f94c 	bl	80022e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800205a:	609a      	str	r2, [r3, #8]
      break;
 800205c:	e03b      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6859      	ldr	r1, [r3, #4]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	461a      	mov	r2, r3
 800206c:	f000 f8c0 	bl	80021f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2150      	movs	r1, #80	; 0x50
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f919 	bl	80022ae <TIM_ITRx_SetConfig>
      break;
 800207c:	e02b      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6859      	ldr	r1, [r3, #4]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	461a      	mov	r2, r3
 800208c:	f000 f8df 	bl	800224e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2160      	movs	r1, #96	; 0x60
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f909 	bl	80022ae <TIM_ITRx_SetConfig>
      break;
 800209c:	e01b      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	461a      	mov	r2, r3
 80020ac:	f000 f8a0 	bl	80021f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2140      	movs	r1, #64	; 0x40
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f8f9 	bl	80022ae <TIM_ITRx_SetConfig>
      break;
 80020bc:	e00b      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4619      	mov	r1, r3
 80020c8:	4610      	mov	r0, r2
 80020ca:	f000 f8f0 	bl	80022ae <TIM_ITRx_SetConfig>
        break;
 80020ce:	e002      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80020d0:	bf00      	nop
 80020d2:	e000      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80020d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a34      	ldr	r2, [pc, #208]	; (80021d4 <TIM_Base_SetConfig+0xe4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00f      	beq.n	8002128 <TIM_Base_SetConfig+0x38>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210e:	d00b      	beq.n	8002128 <TIM_Base_SetConfig+0x38>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a31      	ldr	r2, [pc, #196]	; (80021d8 <TIM_Base_SetConfig+0xe8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d007      	beq.n	8002128 <TIM_Base_SetConfig+0x38>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a30      	ldr	r2, [pc, #192]	; (80021dc <TIM_Base_SetConfig+0xec>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d003      	beq.n	8002128 <TIM_Base_SetConfig+0x38>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <TIM_Base_SetConfig+0xf0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d108      	bne.n	800213a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a25      	ldr	r2, [pc, #148]	; (80021d4 <TIM_Base_SetConfig+0xe4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01b      	beq.n	800217a <TIM_Base_SetConfig+0x8a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002148:	d017      	beq.n	800217a <TIM_Base_SetConfig+0x8a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <TIM_Base_SetConfig+0xe8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <TIM_Base_SetConfig+0x8a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a21      	ldr	r2, [pc, #132]	; (80021dc <TIM_Base_SetConfig+0xec>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00f      	beq.n	800217a <TIM_Base_SetConfig+0x8a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <TIM_Base_SetConfig+0xf0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00b      	beq.n	800217a <TIM_Base_SetConfig+0x8a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <TIM_Base_SetConfig+0xf4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d007      	beq.n	800217a <TIM_Base_SetConfig+0x8a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <TIM_Base_SetConfig+0xf8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d003      	beq.n	800217a <TIM_Base_SetConfig+0x8a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <TIM_Base_SetConfig+0xfc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d108      	bne.n	800218c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <TIM_Base_SetConfig+0xe4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d103      	bne.n	80021c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	615a      	str	r2, [r3, #20]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40000c00 	.word	0x40000c00
 80021e4:	40014000 	.word	0x40014000
 80021e8:	40014400 	.word	0x40014400
 80021ec:	40014800 	.word	0x40014800

080021f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f023 0201 	bic.w	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800221a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f023 030a 	bic.w	r3, r3, #10
 800222c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	621a      	str	r2, [r3, #32]
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800224e:	b480      	push	{r7}
 8002250:	b087      	sub	sp, #28
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f023 0210 	bic.w	r2, r3, #16
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	031b      	lsls	r3, r3, #12
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800228a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	621a      	str	r2, [r3, #32]
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f043 0307 	orr.w	r3, r3, #7
 80022d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	609a      	str	r2, [r3, #8]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	021a      	lsls	r2, r3, #8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	431a      	orrs	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	609a      	str	r2, [r3, #8]
}
 8002318:	bf00      	nop
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002338:	2302      	movs	r3, #2
 800233a:	e050      	b.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d018      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002388:	d013      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a18      	ldr	r2, [pc, #96]	; (80023f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00e      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a13      	ldr	r2, [pc, #76]	; (80023fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10c      	bne.n	80023cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800
 80023f8:	40000c00 	.word	0x40000c00
 80023fc:	40014000 	.word	0x40014000

08002400 <__libc_init_array>:
 8002400:	b570      	push	{r4, r5, r6, lr}
 8002402:	4d0d      	ldr	r5, [pc, #52]	; (8002438 <__libc_init_array+0x38>)
 8002404:	4c0d      	ldr	r4, [pc, #52]	; (800243c <__libc_init_array+0x3c>)
 8002406:	1b64      	subs	r4, r4, r5
 8002408:	10a4      	asrs	r4, r4, #2
 800240a:	2600      	movs	r6, #0
 800240c:	42a6      	cmp	r6, r4
 800240e:	d109      	bne.n	8002424 <__libc_init_array+0x24>
 8002410:	4d0b      	ldr	r5, [pc, #44]	; (8002440 <__libc_init_array+0x40>)
 8002412:	4c0c      	ldr	r4, [pc, #48]	; (8002444 <__libc_init_array+0x44>)
 8002414:	f000 f820 	bl	8002458 <_init>
 8002418:	1b64      	subs	r4, r4, r5
 800241a:	10a4      	asrs	r4, r4, #2
 800241c:	2600      	movs	r6, #0
 800241e:	42a6      	cmp	r6, r4
 8002420:	d105      	bne.n	800242e <__libc_init_array+0x2e>
 8002422:	bd70      	pop	{r4, r5, r6, pc}
 8002424:	f855 3b04 	ldr.w	r3, [r5], #4
 8002428:	4798      	blx	r3
 800242a:	3601      	adds	r6, #1
 800242c:	e7ee      	b.n	800240c <__libc_init_array+0xc>
 800242e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002432:	4798      	blx	r3
 8002434:	3601      	adds	r6, #1
 8002436:	e7f2      	b.n	800241e <__libc_init_array+0x1e>
 8002438:	08002490 	.word	0x08002490
 800243c:	08002490 	.word	0x08002490
 8002440:	08002490 	.word	0x08002490
 8002444:	08002494 	.word	0x08002494

08002448 <memset>:
 8002448:	4402      	add	r2, r0
 800244a:	4603      	mov	r3, r0
 800244c:	4293      	cmp	r3, r2
 800244e:	d100      	bne.n	8002452 <memset+0xa>
 8002450:	4770      	bx	lr
 8002452:	f803 1b01 	strb.w	r1, [r3], #1
 8002456:	e7f9      	b.n	800244c <memset+0x4>

08002458 <_init>:
 8002458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245a:	bf00      	nop
 800245c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245e:	bc08      	pop	{r3}
 8002460:	469e      	mov	lr, r3
 8002462:	4770      	bx	lr

08002464 <_fini>:
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	bf00      	nop
 8002468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246a:	bc08      	pop	{r3}
 800246c:	469e      	mov	lr, r3
 800246e:	4770      	bx	lr
