
UART_pollingMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000338c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800352c  0800352c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037dc  080037dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080037dc  080037dc  000137dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e4  080037e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  0800385c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  0800385c  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008123  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177c  00000000  00000000  000281c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00029940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002a028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001628a  00000000  00000000  0002a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000073f8  00000000  00000000  00040912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e83  00000000  00000000  00047d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cdb8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e0  00000000  00000000  000cdbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003514 	.word	0x08003514

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003514 	.word	0x08003514

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 faeb 	bl	8000b68 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t opt = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	71fb      	strb	r3, [r7, #7]

  printMessage:

  printWelcomeMessage();
 8000596:	f000 f8b7 	bl	8000708 <printWelcomeMessage>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f811 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f899 	bl	80006d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f86d 	bl	8000680 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  opt = readUserInput();
 80005a6:	f000 f8d9 	bl	800075c <readUserInput>
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	  		processUserInput(opt);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f8f3 	bl	800079c <processUserInput>
	  		if(opt == 3)
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	d1f4      	bne.n	80005a6 <main+0x1e>
	  			goto printMessage;
 80005bc:	e7eb      	b.n	8000596 <main+0xe>
	...

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fde2 	bl	8002198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <SystemClock_Config+0xb8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <SystemClock_Config+0xb8>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <SystemClock_Config+0xb8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <SystemClock_Config+0xbc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <SystemClock_Config+0xbc>)
 800060e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <SystemClock_Config+0xbc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062c:	2300      	movs	r3, #0
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fda5 	bl	8001184 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000640:	f000 f912 	bl	8000868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 f808 	bl	8001674 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800066a:	f000 f8fd 	bl	8000868 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART2_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b8:	f001 f9ac 	bl	8001a14 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f8d1 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000098 	.word	0x20000098
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_GPIO_Init+0x30>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <MX_GPIO_Init+0x30>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_GPIO_Init+0x30>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <printWelcomeMessage>:

/* USER CODE BEGIN 4 */
void printWelcomeMessage(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	/*The two strings "\033[0;0H" and "\033[2J" are escape sequences.
	They are standard sequences of chars used to manipulate the terminal console.
	The first one places the cursor in the top-left part of the available console screen, and the second one clears the screen*/
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	2206      	movs	r2, #6
 8000712:	490d      	ldr	r1, [pc, #52]	; (8000748 <printWelcomeMessage+0x40>)
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <printWelcomeMessage+0x44>)
 8000716:	f001 f9ca 	bl	8001aae <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	2204      	movs	r2, #4
 8000720:	490b      	ldr	r1, [pc, #44]	; (8000750 <printWelcomeMessage+0x48>)
 8000722:	480a      	ldr	r0, [pc, #40]	; (800074c <printWelcomeMessage+0x44>)
 8000724:	f001 f9c3 	bl	8001aae <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	222a      	movs	r2, #42	; 0x2a
 800072e:	4909      	ldr	r1, [pc, #36]	; (8000754 <printWelcomeMessage+0x4c>)
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <printWelcomeMessage+0x44>)
 8000732:	f001 f9bc 	bl	8001aae <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	2283      	movs	r2, #131	; 0x83
 800073c:	4906      	ldr	r1, [pc, #24]	; (8000758 <printWelcomeMessage+0x50>)
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <printWelcomeMessage+0x44>)
 8000740:	f001 f9b5 	bl	8001aae <HAL_UART_Transmit>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800352c 	.word	0x0800352c
 800074c:	20000098 	.word	0x20000098
 8000750:	08003534 	.word	0x08003534
 8000754:	0800353c 	.word	0x0800353c
 8000758:	08003568 	.word	0x08003568

0800075c <readUserInput>:

uint8_t readUserInput(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	char readBuf[1];

	HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	2204      	movs	r2, #4
 8000768:	490a      	ldr	r1, [pc, #40]	; (8000794 <readUserInput+0x38>)
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <readUserInput+0x3c>)
 800076c:	f001 f99f 	bl	8001aae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 8000770:	1d39      	adds	r1, r7, #4
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	2201      	movs	r2, #1
 8000778:	4807      	ldr	r0, [pc, #28]	; (8000798 <readUserInput+0x3c>)
 800077a:	f001 fa2a 	bl	8001bd2 <HAL_UART_Receive>
	return atoi(readBuf);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fcdb 	bl	800213c <atoi>
 8000786:	4603      	mov	r3, r0
 8000788:	b2db      	uxtb	r3, r3
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	080035ec 	.word	0x080035ec
 8000798:	20000098 	.word	0x20000098

0800079c <processUserInput>:


uint8_t processUserInput(uint8_t opt) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	char msg[30];

	if(!opt || opt > 3)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <processUserInput+0x16>
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d901      	bls.n	80007b6 <processUserInput+0x1a>
		return 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e046      	b.n	8000844 <processUserInput+0xa8>

	printf(msg, "%d", opt);
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	4923      	ldr	r1, [pc, #140]	; (800084c <processUserInput+0xb0>)
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fcf2 	bl	80021a8 <iprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd09 	bl	80001e0 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	f107 0108 	add.w	r1, r7, #8
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	481d      	ldr	r0, [pc, #116]	; (8000850 <processUserInput+0xb4>)
 80007dc:	f001 f967 	bl	8001aae <HAL_UART_Transmit>

	switch(opt) {
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b03      	cmp	r3, #3
 80007e4:	d02b      	beq.n	800083e <processUserInput+0xa2>
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	dc2b      	bgt.n	8000842 <processUserInput+0xa6>
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d002      	beq.n	80007f4 <processUserInput+0x58>
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d005      	beq.n	80007fe <processUserInput+0x62>
 80007f2:	e026      	b.n	8000842 <processUserInput+0xa6>
	case 1:
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007f4:	2120      	movs	r1, #32
 80007f6:	4817      	ldr	r0, [pc, #92]	; (8000854 <processUserInput+0xb8>)
 80007f8:	f000 fcaa 	bl	8001150 <HAL_GPIO_TogglePin>
		break;
 80007fc:	e021      	b.n	8000842 <processUserInput+0xa6>
	case 2:
		sprintf(msg, "\r\nUSER BUTTON status: %s", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET ? "PRESSED" : "RELEASED");
 80007fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000802:	4815      	ldr	r0, [pc, #84]	; (8000858 <processUserInput+0xbc>)
 8000804:	f000 fc8c 	bl	8001120 <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <processUserInput+0x76>
 800080e:	4a13      	ldr	r2, [pc, #76]	; (800085c <processUserInput+0xc0>)
 8000810:	e000      	b.n	8000814 <processUserInput+0x78>
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <processUserInput+0xc4>)
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	4912      	ldr	r1, [pc, #72]	; (8000864 <processUserInput+0xc8>)
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fcdc 	bl	80021d8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fcdb 	bl	80001e0 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	f107 0108 	add.w	r1, r7, #8
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <processUserInput+0xb4>)
 8000838:	f001 f939 	bl	8001aae <HAL_UART_Transmit>
		break;
 800083c:	e001      	b.n	8000842 <processUserInput+0xa6>
	case 3:
		return 2;
 800083e:	2302      	movs	r3, #2
 8000840:	e000      	b.n	8000844 <processUserInput+0xa8>
	};

	return 1;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	080035f4 	.word	0x080035f4
 8000850:	20000098 	.word	0x20000098
 8000854:	40020000 	.word	0x40020000
 8000858:	40020800 	.word	0x40020800
 800085c:	080035f8 	.word	0x080035f8
 8000860:	08003600 	.word	0x08003600
 8000864:	0800360c 	.word	0x0800360c

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <HAL_UART_MspInit+0x84>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d12b      	bne.n	800093e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_UART_MspInit+0x88>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_UART_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_UART_MspInit+0x88>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_UART_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091e:	230c      	movs	r3, #12
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092e:	2307      	movs	r3, #7
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_UART_MspInit+0x8c>)
 800093a:	f000 fa6d 	bl	8000e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40004400 	.word	0x40004400
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f934 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	e00a      	b.n	80009d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ba:	f3af 8000 	nop.w
 80009be:	4601      	mov	r1, r0
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf0      	blt.n	80009ba <_read+0x12>
	}

return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	e009      	b.n	8000a08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	60ba      	str	r2, [r7, #8]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3301      	adds	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbf1      	blt.n	80009f4 <_write+0x12>
	}
	return len;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_close>:

int _close(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a42:	605a      	str	r2, [r3, #4]
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <_isatty>:

int _isatty(int file)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
	return 1;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f001 fb46 	bl	8002144 <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20018000 	.word	0x20018000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	2000008c 	.word	0x2000008c
 8000aec:	200000f0 	.word	0x200000f0

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b1a:	490e      	ldr	r1, [pc, #56]	; (8000b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b30:	4c0b      	ldr	r4, [pc, #44]	; (8000b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b3e:	f7ff ffd7 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f001 fb05 	bl	8002150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fd1f 	bl	8000588 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b58:	080037ec 	.word	0x080037ec
  ldr r2, =_sbss
 8000b5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b60:	200000f0 	.word	0x200000f0

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f90d 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe6a 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f917 	bl	8000dfe <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f8ed 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200000dc 	.word	0x200000dc

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200000dc 	.word	0x200000dc

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff47 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff5c 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb0 	bl	8000d6c <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e159      	b.n	80010e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8148 	bne.w	80010e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d005      	beq.n	8000e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d130      	bne.n	8000ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 0201 	and.w	r2, r3, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d017      	beq.n	8000f08 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d123      	bne.n	8000f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	69b9      	ldr	r1, [r7, #24]
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80a2 	beq.w	80010e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b57      	ldr	r3, [pc, #348]	; (8001100 <HAL_GPIO_Init+0x2e8>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a56      	ldr	r2, [pc, #344]	; (8001100 <HAL_GPIO_Init+0x2e8>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b54      	ldr	r3, [pc, #336]	; (8001100 <HAL_GPIO_Init+0x2e8>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a52      	ldr	r2, [pc, #328]	; (8001104 <HAL_GPIO_Init+0x2ec>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a49      	ldr	r2, [pc, #292]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d019      	beq.n	800101a <HAL_GPIO_Init+0x202>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a48      	ldr	r2, [pc, #288]	; (800110c <HAL_GPIO_Init+0x2f4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d013      	beq.n	8001016 <HAL_GPIO_Init+0x1fe>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a47      	ldr	r2, [pc, #284]	; (8001110 <HAL_GPIO_Init+0x2f8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d00d      	beq.n	8001012 <HAL_GPIO_Init+0x1fa>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a46      	ldr	r2, [pc, #280]	; (8001114 <HAL_GPIO_Init+0x2fc>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d007      	beq.n	800100e <HAL_GPIO_Init+0x1f6>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a45      	ldr	r2, [pc, #276]	; (8001118 <HAL_GPIO_Init+0x300>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d101      	bne.n	800100a <HAL_GPIO_Init+0x1f2>
 8001006:	2304      	movs	r3, #4
 8001008:	e008      	b.n	800101c <HAL_GPIO_Init+0x204>
 800100a:	2307      	movs	r3, #7
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x204>
 800100e:	2303      	movs	r3, #3
 8001010:	e004      	b.n	800101c <HAL_GPIO_Init+0x204>
 8001012:	2302      	movs	r3, #2
 8001014:	e002      	b.n	800101c <HAL_GPIO_Init+0x204>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x204>
 800101a:	2300      	movs	r3, #0
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	f002 0203 	and.w	r2, r2, #3
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	4093      	lsls	r3, r2
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800102c:	4935      	ldr	r1, [pc, #212]	; (8001104 <HAL_GPIO_Init+0x2ec>)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_GPIO_Init+0x304>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800105e:	4a2f      	ldr	r2, [pc, #188]	; (800111c <HAL_GPIO_Init+0x304>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <HAL_GPIO_Init+0x304>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001088:	4a24      	ldr	r2, [pc, #144]	; (800111c <HAL_GPIO_Init+0x304>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_GPIO_Init+0x304>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b2:	4a1a      	ldr	r2, [pc, #104]	; (800111c <HAL_GPIO_Init+0x304>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_GPIO_Init+0x304>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010dc:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_GPIO_Init+0x304>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3301      	adds	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	f67f aea2 	bls.w	8000e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40013800 	.word	0x40013800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40021000 	.word	0x40021000
 800111c:	40013c00 	.word	0x40013c00

08001120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	4013      	ands	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d002      	beq.n	800113e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e001      	b.n	8001142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4013      	ands	r3, r2
 8001168:	041a      	lsls	r2, r3, #16
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43d9      	mvns	r1, r3
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	400b      	ands	r3, r1
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e264      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d075      	beq.n	800128e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a2:	4ba3      	ldr	r3, [pc, #652]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d00c      	beq.n	80011c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ae:	4ba0      	ldr	r3, [pc, #640]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d112      	bne.n	80011e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ba:	4b9d      	ldr	r3, [pc, #628]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011c6:	d10b      	bne.n	80011e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	4b99      	ldr	r3, [pc, #612]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d05b      	beq.n	800128c <HAL_RCC_OscConfig+0x108>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d157      	bne.n	800128c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e23f      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e8:	d106      	bne.n	80011f8 <HAL_RCC_OscConfig+0x74>
 80011ea:	4b91      	ldr	r3, [pc, #580]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a90      	ldr	r2, [pc, #576]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e01d      	b.n	8001234 <HAL_RCC_OscConfig+0xb0>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0x98>
 8001202:	4b8b      	ldr	r3, [pc, #556]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a8a      	ldr	r2, [pc, #552]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b88      	ldr	r3, [pc, #544]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a87      	ldr	r2, [pc, #540]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xb0>
 800121c:	4b84      	ldr	r3, [pc, #528]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a83      	ldr	r2, [pc, #524]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b81      	ldr	r3, [pc, #516]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a80      	ldr	r2, [pc, #512]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fcfa 	bl	8000c34 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fcf6 	bl	8000c34 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e204      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b76      	ldr	r3, [pc, #472]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0xc0>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fce6 	bl	8000c34 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fce2 	bl	8000c34 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1f0      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	4b6c      	ldr	r3, [pc, #432]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0xe8>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d063      	beq.n	8001362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	4b65      	ldr	r3, [pc, #404]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a6:	4b62      	ldr	r3, [pc, #392]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d11c      	bne.n	80012ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b2:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d116      	bne.n	80012ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	4b5c      	ldr	r3, [pc, #368]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x152>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e1c4      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4b56      	ldr	r3, [pc, #344]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4952      	ldr	r1, [pc, #328]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	e03a      	b.n	8001362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <HAL_RCC_OscConfig+0x2b0>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fa:	f7ff fc9b 	bl	8000c34 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fc97 	bl	8000c34 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1a5      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	4b46      	ldr	r3, [pc, #280]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b43      	ldr	r3, [pc, #268]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4940      	ldr	r1, [pc, #256]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001336:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <HAL_RCC_OscConfig+0x2b0>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff fc7a 	bl	8000c34 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fc76 	bl	8000c34 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e184      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	4b36      	ldr	r3, [pc, #216]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d030      	beq.n	80013d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d016      	beq.n	80013a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <HAL_RCC_OscConfig+0x2b4>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137c:	f7ff fc5a 	bl	8000c34 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fc56 	bl	8000c34 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e164      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x200>
 80013a2:	e015      	b.n	80013d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_RCC_OscConfig+0x2b4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fc43 	bl	8000c34 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc3f 	bl	8000c34 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e14d      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f0      	bne.n	80013b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80a0 	beq.w	800151e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10f      	bne.n	800140e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800140a:	2301      	movs	r3, #1
 800140c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_RCC_OscConfig+0x2b8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d121      	bne.n	800145e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_RCC_OscConfig+0x2b8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_RCC_OscConfig+0x2b8>)
 8001420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001426:	f7ff fc05 	bl	8000c34 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142c:	e011      	b.n	8001452 <HAL_RCC_OscConfig+0x2ce>
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	42470000 	.word	0x42470000
 8001438:	42470e80 	.word	0x42470e80
 800143c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001440:	f7ff fbf8 	bl	8000c34 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e106      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001452:	4b85      	ldr	r3, [pc, #532]	; (8001668 <HAL_RCC_OscConfig+0x4e4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d106      	bne.n	8001474 <HAL_RCC_OscConfig+0x2f0>
 8001466:	4b81      	ldr	r3, [pc, #516]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	4a80      	ldr	r2, [pc, #512]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6713      	str	r3, [r2, #112]	; 0x70
 8001472:	e01c      	b.n	80014ae <HAL_RCC_OscConfig+0x32a>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b05      	cmp	r3, #5
 800147a:	d10c      	bne.n	8001496 <HAL_RCC_OscConfig+0x312>
 800147c:	4b7b      	ldr	r3, [pc, #492]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	4a7a      	ldr	r2, [pc, #488]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6713      	str	r3, [r2, #112]	; 0x70
 8001488:	4b78      	ldr	r3, [pc, #480]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	4a77      	ldr	r2, [pc, #476]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6713      	str	r3, [r2, #112]	; 0x70
 8001494:	e00b      	b.n	80014ae <HAL_RCC_OscConfig+0x32a>
 8001496:	4b75      	ldr	r3, [pc, #468]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 8001498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149a:	4a74      	ldr	r2, [pc, #464]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	6713      	str	r3, [r2, #112]	; 0x70
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a6:	4a71      	ldr	r2, [pc, #452]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 80014a8:	f023 0304 	bic.w	r3, r3, #4
 80014ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d015      	beq.n	80014e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b6:	f7ff fbbd 	bl	8000c34 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff fbb9 	bl	8000c34 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0c5      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d4:	4b65      	ldr	r3, [pc, #404]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0ee      	beq.n	80014be <HAL_RCC_OscConfig+0x33a>
 80014e0:	e014      	b.n	800150c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fba7 	bl	8000c34 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e8:	e00a      	b.n	8001500 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ea:	f7ff fba3 	bl	8000c34 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e0af      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001500:	4b5a      	ldr	r3, [pc, #360]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ee      	bne.n	80014ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d105      	bne.n	800151e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001512:	4b56      	ldr	r3, [pc, #344]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a55      	ldr	r2, [pc, #340]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 8001518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 809b 	beq.w	800165e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001528:	4b50      	ldr	r3, [pc, #320]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	d05c      	beq.n	80015ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d141      	bne.n	80015c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153c:	4b4c      	ldr	r3, [pc, #304]	; (8001670 <HAL_RCC_OscConfig+0x4ec>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff fb77 	bl	8000c34 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154a:	f7ff fb73 	bl	8000c34 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e081      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155c:	4b43      	ldr	r3, [pc, #268]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69da      	ldr	r2, [r3, #28]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	019b      	lsls	r3, r3, #6
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	3b01      	subs	r3, #1
 8001582:	041b      	lsls	r3, r3, #16
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	061b      	lsls	r3, r3, #24
 800158c:	4937      	ldr	r1, [pc, #220]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_RCC_OscConfig+0x4ec>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fb4c 	bl	8000c34 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fb48 	bl	8000c34 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e056      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x41c>
 80015be:	e04e      	b.n	800165e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_RCC_OscConfig+0x4ec>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb35 	bl	8000c34 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fb31 	bl	8000c34 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e03f      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x44a>
 80015ec:	e037      	b.n	800165e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e032      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_RCC_OscConfig+0x4e8>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d028      	beq.n	800165a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d121      	bne.n	800165a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d11a      	bne.n	800165a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800162a:	4013      	ands	r3, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001630:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001632:	4293      	cmp	r3, r2
 8001634:	d111      	bne.n	800165a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d107      	bne.n	800165a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001656:	429a      	cmp	r2, r3
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40007000 	.word	0x40007000
 800166c:	40023800 	.word	0x40023800
 8001670:	42470060 	.word	0x42470060

08001674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0cc      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d90c      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b65      	ldr	r3, [pc, #404]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0b8      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c8:	4b59      	ldr	r3, [pc, #356]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a58      	ldr	r2, [pc, #352]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e0:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ec:	4b50      	ldr	r3, [pc, #320]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	494d      	ldr	r1, [pc, #308]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d044      	beq.n	8001794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d119      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e07f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d003      	beq.n	8001732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	2b03      	cmp	r3, #3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e067      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f023 0203 	bic.w	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4934      	ldr	r1, [pc, #208]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	4313      	orrs	r3, r2
 8001762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001764:	f7ff fa66 	bl	8000c34 <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff fa62 	bl	8000c34 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e04f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 020c 	and.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	429a      	cmp	r2, r3
 8001792:	d1eb      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d20c      	bcs.n	80017bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e032      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4916      	ldr	r1, [pc, #88]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d009      	beq.n	80017fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	490e      	ldr	r1, [pc, #56]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fa:	f000 f821 	bl	8001840 <HAL_RCC_GetSysClockFreq>
 80017fe:	4602      	mov	r2, r0
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	490a      	ldr	r1, [pc, #40]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	5ccb      	ldrb	r3, [r1, r3]
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f9c6 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00
 8001830:	40023800 	.word	0x40023800
 8001834:	08003628 	.word	0x08003628
 8001838:	20000000 	.word	0x20000000
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001846:	2100      	movs	r1, #0
 8001848:	6079      	str	r1, [r7, #4]
 800184a:	2100      	movs	r1, #0
 800184c:	60f9      	str	r1, [r7, #12]
 800184e:	2100      	movs	r1, #0
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001852:	2100      	movs	r1, #0
 8001854:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001856:	4952      	ldr	r1, [pc, #328]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001858:	6889      	ldr	r1, [r1, #8]
 800185a:	f001 010c 	and.w	r1, r1, #12
 800185e:	2908      	cmp	r1, #8
 8001860:	d00d      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x3e>
 8001862:	2908      	cmp	r1, #8
 8001864:	f200 8094 	bhi.w	8001990 <HAL_RCC_GetSysClockFreq+0x150>
 8001868:	2900      	cmp	r1, #0
 800186a:	d002      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0x32>
 800186c:	2904      	cmp	r1, #4
 800186e:	d003      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x38>
 8001870:	e08e      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001872:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001874:	60bb      	str	r3, [r7, #8]
       break;
 8001876:	e08e      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b4b      	ldr	r3, [pc, #300]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800187a:	60bb      	str	r3, [r7, #8]
      break;
 800187c:	e08b      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800187e:	4948      	ldr	r1, [pc, #288]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001880:	6849      	ldr	r1, [r1, #4]
 8001882:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001886:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001888:	4945      	ldr	r1, [pc, #276]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800188a:	6849      	ldr	r1, [r1, #4]
 800188c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001890:	2900      	cmp	r1, #0
 8001892:	d024      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001894:	4942      	ldr	r1, [pc, #264]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001896:	6849      	ldr	r1, [r1, #4]
 8001898:	0989      	lsrs	r1, r1, #6
 800189a:	4608      	mov	r0, r1
 800189c:	f04f 0100 	mov.w	r1, #0
 80018a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80018a4:	f04f 0500 	mov.w	r5, #0
 80018a8:	ea00 0204 	and.w	r2, r0, r4
 80018ac:	ea01 0305 	and.w	r3, r1, r5
 80018b0:	493d      	ldr	r1, [pc, #244]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80018b2:	fb01 f003 	mul.w	r0, r1, r3
 80018b6:	2100      	movs	r1, #0
 80018b8:	fb01 f102 	mul.w	r1, r1, r2
 80018bc:	1844      	adds	r4, r0, r1
 80018be:	493a      	ldr	r1, [pc, #232]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80018c0:	fba2 0101 	umull	r0, r1, r2, r1
 80018c4:	1863      	adds	r3, r4, r1
 80018c6:	4619      	mov	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	461a      	mov	r2, r3
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	f7fe fcde 	bl	8000290 <__aeabi_uldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4613      	mov	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e04a      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018de:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	099b      	lsrs	r3, r3, #6
 80018e4:	461a      	mov	r2, r3
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	ea02 0400 	and.w	r4, r2, r0
 80018f6:	ea03 0501 	and.w	r5, r3, r1
 80018fa:	4620      	mov	r0, r4
 80018fc:	4629      	mov	r1, r5
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	014b      	lsls	r3, r1, #5
 8001908:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800190c:	0142      	lsls	r2, r0, #5
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	1b00      	subs	r0, r0, r4
 8001914:	eb61 0105 	sbc.w	r1, r1, r5
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	018b      	lsls	r3, r1, #6
 8001922:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001926:	0182      	lsls	r2, r0, #6
 8001928:	1a12      	subs	r2, r2, r0
 800192a:	eb63 0301 	sbc.w	r3, r3, r1
 800192e:	f04f 0000 	mov.w	r0, #0
 8001932:	f04f 0100 	mov.w	r1, #0
 8001936:	00d9      	lsls	r1, r3, #3
 8001938:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800193c:	00d0      	lsls	r0, r2, #3
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	1912      	adds	r2, r2, r4
 8001944:	eb45 0303 	adc.w	r3, r5, r3
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	0299      	lsls	r1, r3, #10
 8001952:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001956:	0290      	lsls	r0, r2, #10
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	461a      	mov	r2, r3
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	f7fe fc92 	bl	8000290 <__aeabi_uldivmod>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4613      	mov	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	3301      	adds	r3, #1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	60bb      	str	r3, [r7, #8]
      break;
 800198e:	e002      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001992:	60bb      	str	r3, [r7, #8]
      break;
 8001994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001996:	68bb      	ldr	r3, [r7, #8]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bdb0      	pop	{r4, r5, r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	00f42400 	.word	0x00f42400
 80019a8:	017d7840 	.word	0x017d7840

080019ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000000 	.word	0x20000000

080019c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019c8:	f7ff fff0 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	0a9b      	lsrs	r3, r3, #10
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	4903      	ldr	r1, [pc, #12]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	08003638 	.word	0x08003638

080019ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019f0:	f7ff ffdc 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	0b5b      	lsrs	r3, r3, #13
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4903      	ldr	r1, [pc, #12]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	08003638 	.word	0x08003638

08001a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e03f      	b.n	8001aa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe ff42 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	; 0x24
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f9a7 	bl	8001dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b08a      	sub	sp, #40	; 0x28
 8001ab2:	af02      	add	r7, sp, #8
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d17c      	bne.n	8001bc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <HAL_UART_Transmit+0x2c>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e075      	b.n	8001bca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_UART_Transmit+0x3e>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e06e      	b.n	8001bca <HAL_UART_Transmit+0x11c>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2221      	movs	r2, #33	; 0x21
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b02:	f7ff f897 	bl	8000c34 <HAL_GetTick>
 8001b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1c:	d108      	bne.n	8001b30 <HAL_UART_Transmit+0x82>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	e003      	b.n	8001b38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b40:	e02a      	b.n	8001b98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f8e2 	bl	8001d16 <UART_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e036      	b.n	8001bca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	3302      	adds	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	e007      	b.n	8001b8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1cf      	bne.n	8001b42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2140      	movs	r1, #64	; 0x40
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f8b2 	bl	8001d16 <UART_WaitOnFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e006      	b.n	8001bca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e000      	b.n	8001bca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bc8:	2302      	movs	r3, #2
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b08a      	sub	sp, #40	; 0x28
 8001bd6:	af02      	add	r7, sp, #8
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	f040 808c 	bne.w	8001d0c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_UART_Receive+0x2e>
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e084      	b.n	8001d0e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Receive+0x40>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e07d      	b.n	8001d0e <HAL_UART_Receive+0x13c>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2222      	movs	r2, #34	; 0x22
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c2e:	f7ff f801 	bl	8000c34 <HAL_GetTick>
 8001c32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	88fa      	ldrh	r2, [r7, #6]
 8001c38:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	88fa      	ldrh	r2, [r7, #6]
 8001c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c48:	d108      	bne.n	8001c5c <HAL_UART_Receive+0x8a>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d104      	bne.n	8001c5c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	e003      	b.n	8001c64 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c6c:	e043      	b.n	8001cf6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2200      	movs	r2, #0
 8001c76:	2120      	movs	r1, #32
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f84c 	bl	8001d16 <UART_WaitOnFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e042      	b.n	8001d0e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	e01f      	b.n	8001ce8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb0:	d007      	beq.n	8001cc2 <HAL_UART_Receive+0xf0>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_UART_Receive+0xfe>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	e008      	b.n	8001ce2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1b6      	bne.n	8001c6e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e000      	b.n	8001d0e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001d0c:	2302      	movs	r3, #2
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4613      	mov	r3, r2
 8001d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d26:	e02c      	b.n	8001d82 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2e:	d028      	beq.n	8001d82 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d36:	f7fe ff7d 	bl	8000c34 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d21d      	bcs.n	8001d82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d54:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e00f      	b.n	8001da2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d0c3      	beq.n	8001d28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db0:	b09f      	sub	sp, #124	; 0x7c
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc2:	68d9      	ldr	r1, [r3, #12]
 8001dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	ea40 0301 	orr.w	r3, r0, r1
 8001dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001df0:	f021 010c 	bic.w	r1, r1, #12
 8001df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0a:	6999      	ldr	r1, [r3, #24]
 8001e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	ea40 0301 	orr.w	r3, r0, r1
 8001e14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4bc5      	ldr	r3, [pc, #788]	; (8002130 <UART_SetConfig+0x384>)
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d004      	beq.n	8001e2a <UART_SetConfig+0x7e>
 8001e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4bc3      	ldr	r3, [pc, #780]	; (8002134 <UART_SetConfig+0x388>)
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d103      	bne.n	8001e32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e2a:	f7ff fddf 	bl	80019ec <HAL_RCC_GetPCLK2Freq>
 8001e2e:	6778      	str	r0, [r7, #116]	; 0x74
 8001e30:	e002      	b.n	8001e38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e32:	f7ff fdc7 	bl	80019c4 <HAL_RCC_GetPCLK1Freq>
 8001e36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e40:	f040 80b6 	bne.w	8001fb0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e46:	461c      	mov	r4, r3
 8001e48:	f04f 0500 	mov.w	r5, #0
 8001e4c:	4622      	mov	r2, r4
 8001e4e:	462b      	mov	r3, r5
 8001e50:	1891      	adds	r1, r2, r2
 8001e52:	6439      	str	r1, [r7, #64]	; 0x40
 8001e54:	415b      	adcs	r3, r3
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
 8001e58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e5c:	1912      	adds	r2, r2, r4
 8001e5e:	eb45 0303 	adc.w	r3, r5, r3
 8001e62:	f04f 0000 	mov.w	r0, #0
 8001e66:	f04f 0100 	mov.w	r1, #0
 8001e6a:	00d9      	lsls	r1, r3, #3
 8001e6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e70:	00d0      	lsls	r0, r2, #3
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	1911      	adds	r1, r2, r4
 8001e78:	6639      	str	r1, [r7, #96]	; 0x60
 8001e7a:	416b      	adcs	r3, r5
 8001e7c:	667b      	str	r3, [r7, #100]	; 0x64
 8001e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	1891      	adds	r1, r2, r2
 8001e8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e8c:	415b      	adcs	r3, r3
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e98:	f7fe f9fa 	bl	8000290 <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4ba5      	ldr	r3, [pc, #660]	; (8002138 <UART_SetConfig+0x38c>)
 8001ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	011e      	lsls	r6, r3, #4
 8001eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eac:	461c      	mov	r4, r3
 8001eae:	f04f 0500 	mov.w	r5, #0
 8001eb2:	4622      	mov	r2, r4
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	1891      	adds	r1, r2, r2
 8001eb8:	6339      	str	r1, [r7, #48]	; 0x30
 8001eba:	415b      	adcs	r3, r3
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ebe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ec2:	1912      	adds	r2, r2, r4
 8001ec4:	eb45 0303 	adc.w	r3, r5, r3
 8001ec8:	f04f 0000 	mov.w	r0, #0
 8001ecc:	f04f 0100 	mov.w	r1, #0
 8001ed0:	00d9      	lsls	r1, r3, #3
 8001ed2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ed6:	00d0      	lsls	r0, r2, #3
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	1911      	adds	r1, r2, r4
 8001ede:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ee0:	416b      	adcs	r3, r5
 8001ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	1891      	adds	r1, r2, r2
 8001ef0:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ef2:	415b      	adcs	r3, r3
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001efa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001efe:	f7fe f9c7 	bl	8000290 <__aeabi_uldivmod>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4b8c      	ldr	r3, [pc, #560]	; (8002138 <UART_SetConfig+0x38c>)
 8001f08:	fba3 1302 	umull	r1, r3, r3, r2
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	2164      	movs	r1, #100	; 0x64
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	3332      	adds	r3, #50	; 0x32
 8001f1a:	4a87      	ldr	r2, [pc, #540]	; (8002138 <UART_SetConfig+0x38c>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	095b      	lsrs	r3, r3, #5
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f28:	441e      	add	r6, r3
 8001f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f04f 0100 	mov.w	r1, #0
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	1894      	adds	r4, r2, r2
 8001f38:	623c      	str	r4, [r7, #32]
 8001f3a:	415b      	adcs	r3, r3
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f42:	1812      	adds	r2, r2, r0
 8001f44:	eb41 0303 	adc.w	r3, r1, r3
 8001f48:	f04f 0400 	mov.w	r4, #0
 8001f4c:	f04f 0500 	mov.w	r5, #0
 8001f50:	00dd      	lsls	r5, r3, #3
 8001f52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f56:	00d4      	lsls	r4, r2, #3
 8001f58:	4622      	mov	r2, r4
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	1814      	adds	r4, r2, r0
 8001f5e:	653c      	str	r4, [r7, #80]	; 0x50
 8001f60:	414b      	adcs	r3, r1
 8001f62:	657b      	str	r3, [r7, #84]	; 0x54
 8001f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	1891      	adds	r1, r2, r2
 8001f70:	61b9      	str	r1, [r7, #24]
 8001f72:	415b      	adcs	r3, r3
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001f7e:	f7fe f987 	bl	8000290 <__aeabi_uldivmod>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4b6c      	ldr	r3, [pc, #432]	; (8002138 <UART_SetConfig+0x38c>)
 8001f88:	fba3 1302 	umull	r1, r3, r3, r2
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	2164      	movs	r1, #100	; 0x64
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	3332      	adds	r3, #50	; 0x32
 8001f9a:	4a67      	ldr	r2, [pc, #412]	; (8002138 <UART_SetConfig+0x38c>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	f003 0207 	and.w	r2, r3, #7
 8001fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4432      	add	r2, r6
 8001fac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fae:	e0b9      	b.n	8002124 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb2:	461c      	mov	r4, r3
 8001fb4:	f04f 0500 	mov.w	r5, #0
 8001fb8:	4622      	mov	r2, r4
 8001fba:	462b      	mov	r3, r5
 8001fbc:	1891      	adds	r1, r2, r2
 8001fbe:	6139      	str	r1, [r7, #16]
 8001fc0:	415b      	adcs	r3, r3
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fc8:	1912      	adds	r2, r2, r4
 8001fca:	eb45 0303 	adc.w	r3, r5, r3
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	00d9      	lsls	r1, r3, #3
 8001fd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fdc:	00d0      	lsls	r0, r2, #3
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	eb12 0804 	adds.w	r8, r2, r4
 8001fe6:	eb43 0905 	adc.w	r9, r3, r5
 8001fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f04f 0100 	mov.w	r1, #0
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	008b      	lsls	r3, r1, #2
 8001ffe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002002:	0082      	lsls	r2, r0, #2
 8002004:	4640      	mov	r0, r8
 8002006:	4649      	mov	r1, r9
 8002008:	f7fe f942 	bl	8000290 <__aeabi_uldivmod>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4b49      	ldr	r3, [pc, #292]	; (8002138 <UART_SetConfig+0x38c>)
 8002012:	fba3 2302 	umull	r2, r3, r3, r2
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	011e      	lsls	r6, r3, #4
 800201a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800201c:	4618      	mov	r0, r3
 800201e:	f04f 0100 	mov.w	r1, #0
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	1894      	adds	r4, r2, r2
 8002028:	60bc      	str	r4, [r7, #8]
 800202a:	415b      	adcs	r3, r3
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002032:	1812      	adds	r2, r2, r0
 8002034:	eb41 0303 	adc.w	r3, r1, r3
 8002038:	f04f 0400 	mov.w	r4, #0
 800203c:	f04f 0500 	mov.w	r5, #0
 8002040:	00dd      	lsls	r5, r3, #3
 8002042:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002046:	00d4      	lsls	r4, r2, #3
 8002048:	4622      	mov	r2, r4
 800204a:	462b      	mov	r3, r5
 800204c:	1814      	adds	r4, r2, r0
 800204e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002050:	414b      	adcs	r3, r1
 8002052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4618      	mov	r0, r3
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	008b      	lsls	r3, r1, #2
 8002068:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800206c:	0082      	lsls	r2, r0, #2
 800206e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002072:	f7fe f90d 	bl	8000290 <__aeabi_uldivmod>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <UART_SetConfig+0x38c>)
 800207c:	fba3 1302 	umull	r1, r3, r3, r2
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	2164      	movs	r1, #100	; 0x64
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	3332      	adds	r3, #50	; 0x32
 800208e:	4a2a      	ldr	r2, [pc, #168]	; (8002138 <UART_SetConfig+0x38c>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800209a:	441e      	add	r6, r3
 800209c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800209e:	4618      	mov	r0, r3
 80020a0:	f04f 0100 	mov.w	r1, #0
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	1894      	adds	r4, r2, r2
 80020aa:	603c      	str	r4, [r7, #0]
 80020ac:	415b      	adcs	r3, r3
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020b4:	1812      	adds	r2, r2, r0
 80020b6:	eb41 0303 	adc.w	r3, r1, r3
 80020ba:	f04f 0400 	mov.w	r4, #0
 80020be:	f04f 0500 	mov.w	r5, #0
 80020c2:	00dd      	lsls	r5, r3, #3
 80020c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80020c8:	00d4      	lsls	r4, r2, #3
 80020ca:	4622      	mov	r2, r4
 80020cc:	462b      	mov	r3, r5
 80020ce:	eb12 0a00 	adds.w	sl, r2, r0
 80020d2:	eb43 0b01 	adc.w	fp, r3, r1
 80020d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4618      	mov	r0, r3
 80020dc:	f04f 0100 	mov.w	r1, #0
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	008b      	lsls	r3, r1, #2
 80020ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020ee:	0082      	lsls	r2, r0, #2
 80020f0:	4650      	mov	r0, sl
 80020f2:	4659      	mov	r1, fp
 80020f4:	f7fe f8cc 	bl	8000290 <__aeabi_uldivmod>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <UART_SetConfig+0x38c>)
 80020fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2164      	movs	r1, #100	; 0x64
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	3332      	adds	r3, #50	; 0x32
 8002110:	4a09      	ldr	r2, [pc, #36]	; (8002138 <UART_SetConfig+0x38c>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	f003 020f 	and.w	r2, r3, #15
 800211c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4432      	add	r2, r6
 8002122:	609a      	str	r2, [r3, #8]
}
 8002124:	bf00      	nop
 8002126:	377c      	adds	r7, #124	; 0x7c
 8002128:	46bd      	mov	sp, r7
 800212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800212e:	bf00      	nop
 8002130:	40011000 	.word	0x40011000
 8002134:	40011400 	.word	0x40011400
 8002138:	51eb851f 	.word	0x51eb851f

0800213c <atoi>:
 800213c:	220a      	movs	r2, #10
 800213e:	2100      	movs	r1, #0
 8002140:	f000 b8ee 	b.w	8002320 <strtol>

08002144 <__errno>:
 8002144:	4b01      	ldr	r3, [pc, #4]	; (800214c <__errno+0x8>)
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	2000000c 	.word	0x2000000c

08002150 <__libc_init_array>:
 8002150:	b570      	push	{r4, r5, r6, lr}
 8002152:	4d0d      	ldr	r5, [pc, #52]	; (8002188 <__libc_init_array+0x38>)
 8002154:	4c0d      	ldr	r4, [pc, #52]	; (800218c <__libc_init_array+0x3c>)
 8002156:	1b64      	subs	r4, r4, r5
 8002158:	10a4      	asrs	r4, r4, #2
 800215a:	2600      	movs	r6, #0
 800215c:	42a6      	cmp	r6, r4
 800215e:	d109      	bne.n	8002174 <__libc_init_array+0x24>
 8002160:	4d0b      	ldr	r5, [pc, #44]	; (8002190 <__libc_init_array+0x40>)
 8002162:	4c0c      	ldr	r4, [pc, #48]	; (8002194 <__libc_init_array+0x44>)
 8002164:	f001 f9d6 	bl	8003514 <_init>
 8002168:	1b64      	subs	r4, r4, r5
 800216a:	10a4      	asrs	r4, r4, #2
 800216c:	2600      	movs	r6, #0
 800216e:	42a6      	cmp	r6, r4
 8002170:	d105      	bne.n	800217e <__libc_init_array+0x2e>
 8002172:	bd70      	pop	{r4, r5, r6, pc}
 8002174:	f855 3b04 	ldr.w	r3, [r5], #4
 8002178:	4798      	blx	r3
 800217a:	3601      	adds	r6, #1
 800217c:	e7ee      	b.n	800215c <__libc_init_array+0xc>
 800217e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002182:	4798      	blx	r3
 8002184:	3601      	adds	r6, #1
 8002186:	e7f2      	b.n	800216e <__libc_init_array+0x1e>
 8002188:	080037e4 	.word	0x080037e4
 800218c:	080037e4 	.word	0x080037e4
 8002190:	080037e4 	.word	0x080037e4
 8002194:	080037e8 	.word	0x080037e8

08002198 <memset>:
 8002198:	4402      	add	r2, r0
 800219a:	4603      	mov	r3, r0
 800219c:	4293      	cmp	r3, r2
 800219e:	d100      	bne.n	80021a2 <memset+0xa>
 80021a0:	4770      	bx	lr
 80021a2:	f803 1b01 	strb.w	r1, [r3], #1
 80021a6:	e7f9      	b.n	800219c <memset+0x4>

080021a8 <iprintf>:
 80021a8:	b40f      	push	{r0, r1, r2, r3}
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <iprintf+0x2c>)
 80021ac:	b513      	push	{r0, r1, r4, lr}
 80021ae:	681c      	ldr	r4, [r3, #0]
 80021b0:	b124      	cbz	r4, 80021bc <iprintf+0x14>
 80021b2:	69a3      	ldr	r3, [r4, #24]
 80021b4:	b913      	cbnz	r3, 80021bc <iprintf+0x14>
 80021b6:	4620      	mov	r0, r4
 80021b8:	f000 f914 	bl	80023e4 <__sinit>
 80021bc:	ab05      	add	r3, sp, #20
 80021be:	9a04      	ldr	r2, [sp, #16]
 80021c0:	68a1      	ldr	r1, [r4, #8]
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	4620      	mov	r0, r4
 80021c6:	f000 fb8d 	bl	80028e4 <_vfiprintf_r>
 80021ca:	b002      	add	sp, #8
 80021cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021d0:	b004      	add	sp, #16
 80021d2:	4770      	bx	lr
 80021d4:	2000000c 	.word	0x2000000c

080021d8 <siprintf>:
 80021d8:	b40e      	push	{r1, r2, r3}
 80021da:	b500      	push	{lr}
 80021dc:	b09c      	sub	sp, #112	; 0x70
 80021de:	ab1d      	add	r3, sp, #116	; 0x74
 80021e0:	9002      	str	r0, [sp, #8]
 80021e2:	9006      	str	r0, [sp, #24]
 80021e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021e8:	4809      	ldr	r0, [pc, #36]	; (8002210 <siprintf+0x38>)
 80021ea:	9107      	str	r1, [sp, #28]
 80021ec:	9104      	str	r1, [sp, #16]
 80021ee:	4909      	ldr	r1, [pc, #36]	; (8002214 <siprintf+0x3c>)
 80021f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80021f4:	9105      	str	r1, [sp, #20]
 80021f6:	6800      	ldr	r0, [r0, #0]
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	a902      	add	r1, sp, #8
 80021fc:	f000 fa48 	bl	8002690 <_svfiprintf_r>
 8002200:	9b02      	ldr	r3, [sp, #8]
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	b01c      	add	sp, #112	; 0x70
 8002208:	f85d eb04 	ldr.w	lr, [sp], #4
 800220c:	b003      	add	sp, #12
 800220e:	4770      	bx	lr
 8002210:	2000000c 	.word	0x2000000c
 8002214:	ffff0208 	.word	0xffff0208

08002218 <_strtol_l.isra.0>:
 8002218:	2b01      	cmp	r3, #1
 800221a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800221e:	d001      	beq.n	8002224 <_strtol_l.isra.0+0xc>
 8002220:	2b24      	cmp	r3, #36	; 0x24
 8002222:	d906      	bls.n	8002232 <_strtol_l.isra.0+0x1a>
 8002224:	f7ff ff8e 	bl	8002144 <__errno>
 8002228:	2316      	movs	r3, #22
 800222a:	6003      	str	r3, [r0, #0]
 800222c:	2000      	movs	r0, #0
 800222e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002232:	4f3a      	ldr	r7, [pc, #232]	; (800231c <_strtol_l.isra.0+0x104>)
 8002234:	468e      	mov	lr, r1
 8002236:	4676      	mov	r6, lr
 8002238:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800223c:	5de5      	ldrb	r5, [r4, r7]
 800223e:	f015 0508 	ands.w	r5, r5, #8
 8002242:	d1f8      	bne.n	8002236 <_strtol_l.isra.0+0x1e>
 8002244:	2c2d      	cmp	r4, #45	; 0x2d
 8002246:	d134      	bne.n	80022b2 <_strtol_l.isra.0+0x9a>
 8002248:	f89e 4000 	ldrb.w	r4, [lr]
 800224c:	f04f 0801 	mov.w	r8, #1
 8002250:	f106 0e02 	add.w	lr, r6, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d05c      	beq.n	8002312 <_strtol_l.isra.0+0xfa>
 8002258:	2b10      	cmp	r3, #16
 800225a:	d10c      	bne.n	8002276 <_strtol_l.isra.0+0x5e>
 800225c:	2c30      	cmp	r4, #48	; 0x30
 800225e:	d10a      	bne.n	8002276 <_strtol_l.isra.0+0x5e>
 8002260:	f89e 4000 	ldrb.w	r4, [lr]
 8002264:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002268:	2c58      	cmp	r4, #88	; 0x58
 800226a:	d14d      	bne.n	8002308 <_strtol_l.isra.0+0xf0>
 800226c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8002270:	2310      	movs	r3, #16
 8002272:	f10e 0e02 	add.w	lr, lr, #2
 8002276:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800227a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800227e:	2600      	movs	r6, #0
 8002280:	fbbc f9f3 	udiv	r9, ip, r3
 8002284:	4635      	mov	r5, r6
 8002286:	fb03 ca19 	mls	sl, r3, r9, ip
 800228a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800228e:	2f09      	cmp	r7, #9
 8002290:	d818      	bhi.n	80022c4 <_strtol_l.isra.0+0xac>
 8002292:	463c      	mov	r4, r7
 8002294:	42a3      	cmp	r3, r4
 8002296:	dd24      	ble.n	80022e2 <_strtol_l.isra.0+0xca>
 8002298:	2e00      	cmp	r6, #0
 800229a:	db1f      	blt.n	80022dc <_strtol_l.isra.0+0xc4>
 800229c:	45a9      	cmp	r9, r5
 800229e:	d31d      	bcc.n	80022dc <_strtol_l.isra.0+0xc4>
 80022a0:	d101      	bne.n	80022a6 <_strtol_l.isra.0+0x8e>
 80022a2:	45a2      	cmp	sl, r4
 80022a4:	db1a      	blt.n	80022dc <_strtol_l.isra.0+0xc4>
 80022a6:	fb05 4503 	mla	r5, r5, r3, r4
 80022aa:	2601      	movs	r6, #1
 80022ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80022b0:	e7eb      	b.n	800228a <_strtol_l.isra.0+0x72>
 80022b2:	2c2b      	cmp	r4, #43	; 0x2b
 80022b4:	bf08      	it	eq
 80022b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80022ba:	46a8      	mov	r8, r5
 80022bc:	bf08      	it	eq
 80022be:	f106 0e02 	addeq.w	lr, r6, #2
 80022c2:	e7c7      	b.n	8002254 <_strtol_l.isra.0+0x3c>
 80022c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80022c8:	2f19      	cmp	r7, #25
 80022ca:	d801      	bhi.n	80022d0 <_strtol_l.isra.0+0xb8>
 80022cc:	3c37      	subs	r4, #55	; 0x37
 80022ce:	e7e1      	b.n	8002294 <_strtol_l.isra.0+0x7c>
 80022d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80022d4:	2f19      	cmp	r7, #25
 80022d6:	d804      	bhi.n	80022e2 <_strtol_l.isra.0+0xca>
 80022d8:	3c57      	subs	r4, #87	; 0x57
 80022da:	e7db      	b.n	8002294 <_strtol_l.isra.0+0x7c>
 80022dc:	f04f 36ff 	mov.w	r6, #4294967295
 80022e0:	e7e4      	b.n	80022ac <_strtol_l.isra.0+0x94>
 80022e2:	2e00      	cmp	r6, #0
 80022e4:	da05      	bge.n	80022f2 <_strtol_l.isra.0+0xda>
 80022e6:	2322      	movs	r3, #34	; 0x22
 80022e8:	6003      	str	r3, [r0, #0]
 80022ea:	4665      	mov	r5, ip
 80022ec:	b942      	cbnz	r2, 8002300 <_strtol_l.isra.0+0xe8>
 80022ee:	4628      	mov	r0, r5
 80022f0:	e79d      	b.n	800222e <_strtol_l.isra.0+0x16>
 80022f2:	f1b8 0f00 	cmp.w	r8, #0
 80022f6:	d000      	beq.n	80022fa <_strtol_l.isra.0+0xe2>
 80022f8:	426d      	negs	r5, r5
 80022fa:	2a00      	cmp	r2, #0
 80022fc:	d0f7      	beq.n	80022ee <_strtol_l.isra.0+0xd6>
 80022fe:	b10e      	cbz	r6, 8002304 <_strtol_l.isra.0+0xec>
 8002300:	f10e 31ff 	add.w	r1, lr, #4294967295
 8002304:	6011      	str	r1, [r2, #0]
 8002306:	e7f2      	b.n	80022ee <_strtol_l.isra.0+0xd6>
 8002308:	2430      	movs	r4, #48	; 0x30
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1b3      	bne.n	8002276 <_strtol_l.isra.0+0x5e>
 800230e:	2308      	movs	r3, #8
 8002310:	e7b1      	b.n	8002276 <_strtol_l.isra.0+0x5e>
 8002312:	2c30      	cmp	r4, #48	; 0x30
 8002314:	d0a4      	beq.n	8002260 <_strtol_l.isra.0+0x48>
 8002316:	230a      	movs	r3, #10
 8002318:	e7ad      	b.n	8002276 <_strtol_l.isra.0+0x5e>
 800231a:	bf00      	nop
 800231c:	08003645 	.word	0x08003645

08002320 <strtol>:
 8002320:	4613      	mov	r3, r2
 8002322:	460a      	mov	r2, r1
 8002324:	4601      	mov	r1, r0
 8002326:	4802      	ldr	r0, [pc, #8]	; (8002330 <strtol+0x10>)
 8002328:	6800      	ldr	r0, [r0, #0]
 800232a:	f7ff bf75 	b.w	8002218 <_strtol_l.isra.0>
 800232e:	bf00      	nop
 8002330:	2000000c 	.word	0x2000000c

08002334 <std>:
 8002334:	2300      	movs	r3, #0
 8002336:	b510      	push	{r4, lr}
 8002338:	4604      	mov	r4, r0
 800233a:	e9c0 3300 	strd	r3, r3, [r0]
 800233e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002342:	6083      	str	r3, [r0, #8]
 8002344:	8181      	strh	r1, [r0, #12]
 8002346:	6643      	str	r3, [r0, #100]	; 0x64
 8002348:	81c2      	strh	r2, [r0, #14]
 800234a:	6183      	str	r3, [r0, #24]
 800234c:	4619      	mov	r1, r3
 800234e:	2208      	movs	r2, #8
 8002350:	305c      	adds	r0, #92	; 0x5c
 8002352:	f7ff ff21 	bl	8002198 <memset>
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <std+0x38>)
 8002358:	6263      	str	r3, [r4, #36]	; 0x24
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <std+0x3c>)
 800235c:	62a3      	str	r3, [r4, #40]	; 0x28
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <std+0x40>)
 8002360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <std+0x44>)
 8002364:	6224      	str	r4, [r4, #32]
 8002366:	6323      	str	r3, [r4, #48]	; 0x30
 8002368:	bd10      	pop	{r4, pc}
 800236a:	bf00      	nop
 800236c:	08002e8d 	.word	0x08002e8d
 8002370:	08002eaf 	.word	0x08002eaf
 8002374:	08002ee7 	.word	0x08002ee7
 8002378:	08002f0b 	.word	0x08002f0b

0800237c <_cleanup_r>:
 800237c:	4901      	ldr	r1, [pc, #4]	; (8002384 <_cleanup_r+0x8>)
 800237e:	f000 b8af 	b.w	80024e0 <_fwalk_reent>
 8002382:	bf00      	nop
 8002384:	080031e5 	.word	0x080031e5

08002388 <__sfmoreglue>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	1e4a      	subs	r2, r1, #1
 800238c:	2568      	movs	r5, #104	; 0x68
 800238e:	4355      	muls	r5, r2
 8002390:	460e      	mov	r6, r1
 8002392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002396:	f000 f8c5 	bl	8002524 <_malloc_r>
 800239a:	4604      	mov	r4, r0
 800239c:	b140      	cbz	r0, 80023b0 <__sfmoreglue+0x28>
 800239e:	2100      	movs	r1, #0
 80023a0:	e9c0 1600 	strd	r1, r6, [r0]
 80023a4:	300c      	adds	r0, #12
 80023a6:	60a0      	str	r0, [r4, #8]
 80023a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80023ac:	f7ff fef4 	bl	8002198 <memset>
 80023b0:	4620      	mov	r0, r4
 80023b2:	bd70      	pop	{r4, r5, r6, pc}

080023b4 <__sfp_lock_acquire>:
 80023b4:	4801      	ldr	r0, [pc, #4]	; (80023bc <__sfp_lock_acquire+0x8>)
 80023b6:	f000 b8b3 	b.w	8002520 <__retarget_lock_acquire_recursive>
 80023ba:	bf00      	nop
 80023bc:	200000e8 	.word	0x200000e8

080023c0 <__sfp_lock_release>:
 80023c0:	4801      	ldr	r0, [pc, #4]	; (80023c8 <__sfp_lock_release+0x8>)
 80023c2:	f000 b8ae 	b.w	8002522 <__retarget_lock_release_recursive>
 80023c6:	bf00      	nop
 80023c8:	200000e8 	.word	0x200000e8

080023cc <__sinit_lock_acquire>:
 80023cc:	4801      	ldr	r0, [pc, #4]	; (80023d4 <__sinit_lock_acquire+0x8>)
 80023ce:	f000 b8a7 	b.w	8002520 <__retarget_lock_acquire_recursive>
 80023d2:	bf00      	nop
 80023d4:	200000e3 	.word	0x200000e3

080023d8 <__sinit_lock_release>:
 80023d8:	4801      	ldr	r0, [pc, #4]	; (80023e0 <__sinit_lock_release+0x8>)
 80023da:	f000 b8a2 	b.w	8002522 <__retarget_lock_release_recursive>
 80023de:	bf00      	nop
 80023e0:	200000e3 	.word	0x200000e3

080023e4 <__sinit>:
 80023e4:	b510      	push	{r4, lr}
 80023e6:	4604      	mov	r4, r0
 80023e8:	f7ff fff0 	bl	80023cc <__sinit_lock_acquire>
 80023ec:	69a3      	ldr	r3, [r4, #24]
 80023ee:	b11b      	cbz	r3, 80023f8 <__sinit+0x14>
 80023f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023f4:	f7ff bff0 	b.w	80023d8 <__sinit_lock_release>
 80023f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80023fc:	6523      	str	r3, [r4, #80]	; 0x50
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <__sinit+0x68>)
 8002400:	4a13      	ldr	r2, [pc, #76]	; (8002450 <__sinit+0x6c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	62a2      	str	r2, [r4, #40]	; 0x28
 8002406:	42a3      	cmp	r3, r4
 8002408:	bf04      	itt	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	61a3      	streq	r3, [r4, #24]
 800240e:	4620      	mov	r0, r4
 8002410:	f000 f820 	bl	8002454 <__sfp>
 8002414:	6060      	str	r0, [r4, #4]
 8002416:	4620      	mov	r0, r4
 8002418:	f000 f81c 	bl	8002454 <__sfp>
 800241c:	60a0      	str	r0, [r4, #8]
 800241e:	4620      	mov	r0, r4
 8002420:	f000 f818 	bl	8002454 <__sfp>
 8002424:	2200      	movs	r2, #0
 8002426:	60e0      	str	r0, [r4, #12]
 8002428:	2104      	movs	r1, #4
 800242a:	6860      	ldr	r0, [r4, #4]
 800242c:	f7ff ff82 	bl	8002334 <std>
 8002430:	68a0      	ldr	r0, [r4, #8]
 8002432:	2201      	movs	r2, #1
 8002434:	2109      	movs	r1, #9
 8002436:	f7ff ff7d 	bl	8002334 <std>
 800243a:	68e0      	ldr	r0, [r4, #12]
 800243c:	2202      	movs	r2, #2
 800243e:	2112      	movs	r1, #18
 8002440:	f7ff ff78 	bl	8002334 <std>
 8002444:	2301      	movs	r3, #1
 8002446:	61a3      	str	r3, [r4, #24]
 8002448:	e7d2      	b.n	80023f0 <__sinit+0xc>
 800244a:	bf00      	nop
 800244c:	08003640 	.word	0x08003640
 8002450:	0800237d 	.word	0x0800237d

08002454 <__sfp>:
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002456:	4607      	mov	r7, r0
 8002458:	f7ff ffac 	bl	80023b4 <__sfp_lock_acquire>
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <__sfp+0x84>)
 800245e:	681e      	ldr	r6, [r3, #0]
 8002460:	69b3      	ldr	r3, [r6, #24]
 8002462:	b913      	cbnz	r3, 800246a <__sfp+0x16>
 8002464:	4630      	mov	r0, r6
 8002466:	f7ff ffbd 	bl	80023e4 <__sinit>
 800246a:	3648      	adds	r6, #72	; 0x48
 800246c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002470:	3b01      	subs	r3, #1
 8002472:	d503      	bpl.n	800247c <__sfp+0x28>
 8002474:	6833      	ldr	r3, [r6, #0]
 8002476:	b30b      	cbz	r3, 80024bc <__sfp+0x68>
 8002478:	6836      	ldr	r6, [r6, #0]
 800247a:	e7f7      	b.n	800246c <__sfp+0x18>
 800247c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002480:	b9d5      	cbnz	r5, 80024b8 <__sfp+0x64>
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <__sfp+0x88>)
 8002484:	60e3      	str	r3, [r4, #12]
 8002486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800248a:	6665      	str	r5, [r4, #100]	; 0x64
 800248c:	f000 f847 	bl	800251e <__retarget_lock_init_recursive>
 8002490:	f7ff ff96 	bl	80023c0 <__sfp_lock_release>
 8002494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800249c:	6025      	str	r5, [r4, #0]
 800249e:	61a5      	str	r5, [r4, #24]
 80024a0:	2208      	movs	r2, #8
 80024a2:	4629      	mov	r1, r5
 80024a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80024a8:	f7ff fe76 	bl	8002198 <memset>
 80024ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80024b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80024b4:	4620      	mov	r0, r4
 80024b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024b8:	3468      	adds	r4, #104	; 0x68
 80024ba:	e7d9      	b.n	8002470 <__sfp+0x1c>
 80024bc:	2104      	movs	r1, #4
 80024be:	4638      	mov	r0, r7
 80024c0:	f7ff ff62 	bl	8002388 <__sfmoreglue>
 80024c4:	4604      	mov	r4, r0
 80024c6:	6030      	str	r0, [r6, #0]
 80024c8:	2800      	cmp	r0, #0
 80024ca:	d1d5      	bne.n	8002478 <__sfp+0x24>
 80024cc:	f7ff ff78 	bl	80023c0 <__sfp_lock_release>
 80024d0:	230c      	movs	r3, #12
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	e7ee      	b.n	80024b4 <__sfp+0x60>
 80024d6:	bf00      	nop
 80024d8:	08003640 	.word	0x08003640
 80024dc:	ffff0001 	.word	0xffff0001

080024e0 <_fwalk_reent>:
 80024e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024e4:	4606      	mov	r6, r0
 80024e6:	4688      	mov	r8, r1
 80024e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80024ec:	2700      	movs	r7, #0
 80024ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024f2:	f1b9 0901 	subs.w	r9, r9, #1
 80024f6:	d505      	bpl.n	8002504 <_fwalk_reent+0x24>
 80024f8:	6824      	ldr	r4, [r4, #0]
 80024fa:	2c00      	cmp	r4, #0
 80024fc:	d1f7      	bne.n	80024ee <_fwalk_reent+0xe>
 80024fe:	4638      	mov	r0, r7
 8002500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002504:	89ab      	ldrh	r3, [r5, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d907      	bls.n	800251a <_fwalk_reent+0x3a>
 800250a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800250e:	3301      	adds	r3, #1
 8002510:	d003      	beq.n	800251a <_fwalk_reent+0x3a>
 8002512:	4629      	mov	r1, r5
 8002514:	4630      	mov	r0, r6
 8002516:	47c0      	blx	r8
 8002518:	4307      	orrs	r7, r0
 800251a:	3568      	adds	r5, #104	; 0x68
 800251c:	e7e9      	b.n	80024f2 <_fwalk_reent+0x12>

0800251e <__retarget_lock_init_recursive>:
 800251e:	4770      	bx	lr

08002520 <__retarget_lock_acquire_recursive>:
 8002520:	4770      	bx	lr

08002522 <__retarget_lock_release_recursive>:
 8002522:	4770      	bx	lr

08002524 <_malloc_r>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	1ccd      	adds	r5, r1, #3
 8002528:	f025 0503 	bic.w	r5, r5, #3
 800252c:	3508      	adds	r5, #8
 800252e:	2d0c      	cmp	r5, #12
 8002530:	bf38      	it	cc
 8002532:	250c      	movcc	r5, #12
 8002534:	2d00      	cmp	r5, #0
 8002536:	4606      	mov	r6, r0
 8002538:	db01      	blt.n	800253e <_malloc_r+0x1a>
 800253a:	42a9      	cmp	r1, r5
 800253c:	d903      	bls.n	8002546 <_malloc_r+0x22>
 800253e:	230c      	movs	r3, #12
 8002540:	6033      	str	r3, [r6, #0]
 8002542:	2000      	movs	r0, #0
 8002544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002546:	f000 ff27 	bl	8003398 <__malloc_lock>
 800254a:	4921      	ldr	r1, [pc, #132]	; (80025d0 <_malloc_r+0xac>)
 800254c:	680a      	ldr	r2, [r1, #0]
 800254e:	4614      	mov	r4, r2
 8002550:	b99c      	cbnz	r4, 800257a <_malloc_r+0x56>
 8002552:	4f20      	ldr	r7, [pc, #128]	; (80025d4 <_malloc_r+0xb0>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	b923      	cbnz	r3, 8002562 <_malloc_r+0x3e>
 8002558:	4621      	mov	r1, r4
 800255a:	4630      	mov	r0, r6
 800255c:	f000 fc86 	bl	8002e6c <_sbrk_r>
 8002560:	6038      	str	r0, [r7, #0]
 8002562:	4629      	mov	r1, r5
 8002564:	4630      	mov	r0, r6
 8002566:	f000 fc81 	bl	8002e6c <_sbrk_r>
 800256a:	1c43      	adds	r3, r0, #1
 800256c:	d123      	bne.n	80025b6 <_malloc_r+0x92>
 800256e:	230c      	movs	r3, #12
 8002570:	6033      	str	r3, [r6, #0]
 8002572:	4630      	mov	r0, r6
 8002574:	f000 ff16 	bl	80033a4 <__malloc_unlock>
 8002578:	e7e3      	b.n	8002542 <_malloc_r+0x1e>
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	1b5b      	subs	r3, r3, r5
 800257e:	d417      	bmi.n	80025b0 <_malloc_r+0x8c>
 8002580:	2b0b      	cmp	r3, #11
 8002582:	d903      	bls.n	800258c <_malloc_r+0x68>
 8002584:	6023      	str	r3, [r4, #0]
 8002586:	441c      	add	r4, r3
 8002588:	6025      	str	r5, [r4, #0]
 800258a:	e004      	b.n	8002596 <_malloc_r+0x72>
 800258c:	6863      	ldr	r3, [r4, #4]
 800258e:	42a2      	cmp	r2, r4
 8002590:	bf0c      	ite	eq
 8002592:	600b      	streq	r3, [r1, #0]
 8002594:	6053      	strne	r3, [r2, #4]
 8002596:	4630      	mov	r0, r6
 8002598:	f000 ff04 	bl	80033a4 <__malloc_unlock>
 800259c:	f104 000b 	add.w	r0, r4, #11
 80025a0:	1d23      	adds	r3, r4, #4
 80025a2:	f020 0007 	bic.w	r0, r0, #7
 80025a6:	1ac2      	subs	r2, r0, r3
 80025a8:	d0cc      	beq.n	8002544 <_malloc_r+0x20>
 80025aa:	1a1b      	subs	r3, r3, r0
 80025ac:	50a3      	str	r3, [r4, r2]
 80025ae:	e7c9      	b.n	8002544 <_malloc_r+0x20>
 80025b0:	4622      	mov	r2, r4
 80025b2:	6864      	ldr	r4, [r4, #4]
 80025b4:	e7cc      	b.n	8002550 <_malloc_r+0x2c>
 80025b6:	1cc4      	adds	r4, r0, #3
 80025b8:	f024 0403 	bic.w	r4, r4, #3
 80025bc:	42a0      	cmp	r0, r4
 80025be:	d0e3      	beq.n	8002588 <_malloc_r+0x64>
 80025c0:	1a21      	subs	r1, r4, r0
 80025c2:	4630      	mov	r0, r6
 80025c4:	f000 fc52 	bl	8002e6c <_sbrk_r>
 80025c8:	3001      	adds	r0, #1
 80025ca:	d1dd      	bne.n	8002588 <_malloc_r+0x64>
 80025cc:	e7cf      	b.n	800256e <_malloc_r+0x4a>
 80025ce:	bf00      	nop
 80025d0:	20000090 	.word	0x20000090
 80025d4:	20000094 	.word	0x20000094

080025d8 <__ssputs_r>:
 80025d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025dc:	688e      	ldr	r6, [r1, #8]
 80025de:	429e      	cmp	r6, r3
 80025e0:	4682      	mov	sl, r0
 80025e2:	460c      	mov	r4, r1
 80025e4:	4690      	mov	r8, r2
 80025e6:	461f      	mov	r7, r3
 80025e8:	d838      	bhi.n	800265c <__ssputs_r+0x84>
 80025ea:	898a      	ldrh	r2, [r1, #12]
 80025ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80025f0:	d032      	beq.n	8002658 <__ssputs_r+0x80>
 80025f2:	6825      	ldr	r5, [r4, #0]
 80025f4:	6909      	ldr	r1, [r1, #16]
 80025f6:	eba5 0901 	sub.w	r9, r5, r1
 80025fa:	6965      	ldr	r5, [r4, #20]
 80025fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002600:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002604:	3301      	adds	r3, #1
 8002606:	444b      	add	r3, r9
 8002608:	106d      	asrs	r5, r5, #1
 800260a:	429d      	cmp	r5, r3
 800260c:	bf38      	it	cc
 800260e:	461d      	movcc	r5, r3
 8002610:	0553      	lsls	r3, r2, #21
 8002612:	d531      	bpl.n	8002678 <__ssputs_r+0xa0>
 8002614:	4629      	mov	r1, r5
 8002616:	f7ff ff85 	bl	8002524 <_malloc_r>
 800261a:	4606      	mov	r6, r0
 800261c:	b950      	cbnz	r0, 8002634 <__ssputs_r+0x5c>
 800261e:	230c      	movs	r3, #12
 8002620:	f8ca 3000 	str.w	r3, [sl]
 8002624:	89a3      	ldrh	r3, [r4, #12]
 8002626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800262a:	81a3      	strh	r3, [r4, #12]
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002634:	6921      	ldr	r1, [r4, #16]
 8002636:	464a      	mov	r2, r9
 8002638:	f000 fe86 	bl	8003348 <memcpy>
 800263c:	89a3      	ldrh	r3, [r4, #12]
 800263e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002646:	81a3      	strh	r3, [r4, #12]
 8002648:	6126      	str	r6, [r4, #16]
 800264a:	6165      	str	r5, [r4, #20]
 800264c:	444e      	add	r6, r9
 800264e:	eba5 0509 	sub.w	r5, r5, r9
 8002652:	6026      	str	r6, [r4, #0]
 8002654:	60a5      	str	r5, [r4, #8]
 8002656:	463e      	mov	r6, r7
 8002658:	42be      	cmp	r6, r7
 800265a:	d900      	bls.n	800265e <__ssputs_r+0x86>
 800265c:	463e      	mov	r6, r7
 800265e:	4632      	mov	r2, r6
 8002660:	6820      	ldr	r0, [r4, #0]
 8002662:	4641      	mov	r1, r8
 8002664:	f000 fe7e 	bl	8003364 <memmove>
 8002668:	68a3      	ldr	r3, [r4, #8]
 800266a:	6822      	ldr	r2, [r4, #0]
 800266c:	1b9b      	subs	r3, r3, r6
 800266e:	4432      	add	r2, r6
 8002670:	60a3      	str	r3, [r4, #8]
 8002672:	6022      	str	r2, [r4, #0]
 8002674:	2000      	movs	r0, #0
 8002676:	e7db      	b.n	8002630 <__ssputs_r+0x58>
 8002678:	462a      	mov	r2, r5
 800267a:	f000 fee9 	bl	8003450 <_realloc_r>
 800267e:	4606      	mov	r6, r0
 8002680:	2800      	cmp	r0, #0
 8002682:	d1e1      	bne.n	8002648 <__ssputs_r+0x70>
 8002684:	6921      	ldr	r1, [r4, #16]
 8002686:	4650      	mov	r0, sl
 8002688:	f000 fe92 	bl	80033b0 <_free_r>
 800268c:	e7c7      	b.n	800261e <__ssputs_r+0x46>
	...

08002690 <_svfiprintf_r>:
 8002690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002694:	4698      	mov	r8, r3
 8002696:	898b      	ldrh	r3, [r1, #12]
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	b09d      	sub	sp, #116	; 0x74
 800269c:	4607      	mov	r7, r0
 800269e:	460d      	mov	r5, r1
 80026a0:	4614      	mov	r4, r2
 80026a2:	d50e      	bpl.n	80026c2 <_svfiprintf_r+0x32>
 80026a4:	690b      	ldr	r3, [r1, #16]
 80026a6:	b963      	cbnz	r3, 80026c2 <_svfiprintf_r+0x32>
 80026a8:	2140      	movs	r1, #64	; 0x40
 80026aa:	f7ff ff3b 	bl	8002524 <_malloc_r>
 80026ae:	6028      	str	r0, [r5, #0]
 80026b0:	6128      	str	r0, [r5, #16]
 80026b2:	b920      	cbnz	r0, 80026be <_svfiprintf_r+0x2e>
 80026b4:	230c      	movs	r3, #12
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	e0d1      	b.n	8002862 <_svfiprintf_r+0x1d2>
 80026be:	2340      	movs	r3, #64	; 0x40
 80026c0:	616b      	str	r3, [r5, #20]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9309      	str	r3, [sp, #36]	; 0x24
 80026c6:	2320      	movs	r3, #32
 80026c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80026d0:	2330      	movs	r3, #48	; 0x30
 80026d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800287c <_svfiprintf_r+0x1ec>
 80026d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026da:	f04f 0901 	mov.w	r9, #1
 80026de:	4623      	mov	r3, r4
 80026e0:	469a      	mov	sl, r3
 80026e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026e6:	b10a      	cbz	r2, 80026ec <_svfiprintf_r+0x5c>
 80026e8:	2a25      	cmp	r2, #37	; 0x25
 80026ea:	d1f9      	bne.n	80026e0 <_svfiprintf_r+0x50>
 80026ec:	ebba 0b04 	subs.w	fp, sl, r4
 80026f0:	d00b      	beq.n	800270a <_svfiprintf_r+0x7a>
 80026f2:	465b      	mov	r3, fp
 80026f4:	4622      	mov	r2, r4
 80026f6:	4629      	mov	r1, r5
 80026f8:	4638      	mov	r0, r7
 80026fa:	f7ff ff6d 	bl	80025d8 <__ssputs_r>
 80026fe:	3001      	adds	r0, #1
 8002700:	f000 80aa 	beq.w	8002858 <_svfiprintf_r+0x1c8>
 8002704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002706:	445a      	add	r2, fp
 8002708:	9209      	str	r2, [sp, #36]	; 0x24
 800270a:	f89a 3000 	ldrb.w	r3, [sl]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80a2 	beq.w	8002858 <_svfiprintf_r+0x1c8>
 8002714:	2300      	movs	r3, #0
 8002716:	f04f 32ff 	mov.w	r2, #4294967295
 800271a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800271e:	f10a 0a01 	add.w	sl, sl, #1
 8002722:	9304      	str	r3, [sp, #16]
 8002724:	9307      	str	r3, [sp, #28]
 8002726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800272a:	931a      	str	r3, [sp, #104]	; 0x68
 800272c:	4654      	mov	r4, sl
 800272e:	2205      	movs	r2, #5
 8002730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002734:	4851      	ldr	r0, [pc, #324]	; (800287c <_svfiprintf_r+0x1ec>)
 8002736:	f7fd fd5b 	bl	80001f0 <memchr>
 800273a:	9a04      	ldr	r2, [sp, #16]
 800273c:	b9d8      	cbnz	r0, 8002776 <_svfiprintf_r+0xe6>
 800273e:	06d0      	lsls	r0, r2, #27
 8002740:	bf44      	itt	mi
 8002742:	2320      	movmi	r3, #32
 8002744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002748:	0711      	lsls	r1, r2, #28
 800274a:	bf44      	itt	mi
 800274c:	232b      	movmi	r3, #43	; 0x2b
 800274e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002752:	f89a 3000 	ldrb.w	r3, [sl]
 8002756:	2b2a      	cmp	r3, #42	; 0x2a
 8002758:	d015      	beq.n	8002786 <_svfiprintf_r+0xf6>
 800275a:	9a07      	ldr	r2, [sp, #28]
 800275c:	4654      	mov	r4, sl
 800275e:	2000      	movs	r0, #0
 8002760:	f04f 0c0a 	mov.w	ip, #10
 8002764:	4621      	mov	r1, r4
 8002766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800276a:	3b30      	subs	r3, #48	; 0x30
 800276c:	2b09      	cmp	r3, #9
 800276e:	d94e      	bls.n	800280e <_svfiprintf_r+0x17e>
 8002770:	b1b0      	cbz	r0, 80027a0 <_svfiprintf_r+0x110>
 8002772:	9207      	str	r2, [sp, #28]
 8002774:	e014      	b.n	80027a0 <_svfiprintf_r+0x110>
 8002776:	eba0 0308 	sub.w	r3, r0, r8
 800277a:	fa09 f303 	lsl.w	r3, r9, r3
 800277e:	4313      	orrs	r3, r2
 8002780:	9304      	str	r3, [sp, #16]
 8002782:	46a2      	mov	sl, r4
 8002784:	e7d2      	b.n	800272c <_svfiprintf_r+0x9c>
 8002786:	9b03      	ldr	r3, [sp, #12]
 8002788:	1d19      	adds	r1, r3, #4
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	9103      	str	r1, [sp, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	bfbb      	ittet	lt
 8002792:	425b      	neglt	r3, r3
 8002794:	f042 0202 	orrlt.w	r2, r2, #2
 8002798:	9307      	strge	r3, [sp, #28]
 800279a:	9307      	strlt	r3, [sp, #28]
 800279c:	bfb8      	it	lt
 800279e:	9204      	strlt	r2, [sp, #16]
 80027a0:	7823      	ldrb	r3, [r4, #0]
 80027a2:	2b2e      	cmp	r3, #46	; 0x2e
 80027a4:	d10c      	bne.n	80027c0 <_svfiprintf_r+0x130>
 80027a6:	7863      	ldrb	r3, [r4, #1]
 80027a8:	2b2a      	cmp	r3, #42	; 0x2a
 80027aa:	d135      	bne.n	8002818 <_svfiprintf_r+0x188>
 80027ac:	9b03      	ldr	r3, [sp, #12]
 80027ae:	1d1a      	adds	r2, r3, #4
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	9203      	str	r2, [sp, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bfb8      	it	lt
 80027b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80027bc:	3402      	adds	r4, #2
 80027be:	9305      	str	r3, [sp, #20]
 80027c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800288c <_svfiprintf_r+0x1fc>
 80027c4:	7821      	ldrb	r1, [r4, #0]
 80027c6:	2203      	movs	r2, #3
 80027c8:	4650      	mov	r0, sl
 80027ca:	f7fd fd11 	bl	80001f0 <memchr>
 80027ce:	b140      	cbz	r0, 80027e2 <_svfiprintf_r+0x152>
 80027d0:	2340      	movs	r3, #64	; 0x40
 80027d2:	eba0 000a 	sub.w	r0, r0, sl
 80027d6:	fa03 f000 	lsl.w	r0, r3, r0
 80027da:	9b04      	ldr	r3, [sp, #16]
 80027dc:	4303      	orrs	r3, r0
 80027de:	3401      	adds	r4, #1
 80027e0:	9304      	str	r3, [sp, #16]
 80027e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027e6:	4826      	ldr	r0, [pc, #152]	; (8002880 <_svfiprintf_r+0x1f0>)
 80027e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027ec:	2206      	movs	r2, #6
 80027ee:	f7fd fcff 	bl	80001f0 <memchr>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d038      	beq.n	8002868 <_svfiprintf_r+0x1d8>
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <_svfiprintf_r+0x1f4>)
 80027f8:	bb1b      	cbnz	r3, 8002842 <_svfiprintf_r+0x1b2>
 80027fa:	9b03      	ldr	r3, [sp, #12]
 80027fc:	3307      	adds	r3, #7
 80027fe:	f023 0307 	bic.w	r3, r3, #7
 8002802:	3308      	adds	r3, #8
 8002804:	9303      	str	r3, [sp, #12]
 8002806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002808:	4433      	add	r3, r6
 800280a:	9309      	str	r3, [sp, #36]	; 0x24
 800280c:	e767      	b.n	80026de <_svfiprintf_r+0x4e>
 800280e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002812:	460c      	mov	r4, r1
 8002814:	2001      	movs	r0, #1
 8002816:	e7a5      	b.n	8002764 <_svfiprintf_r+0xd4>
 8002818:	2300      	movs	r3, #0
 800281a:	3401      	adds	r4, #1
 800281c:	9305      	str	r3, [sp, #20]
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 0c0a 	mov.w	ip, #10
 8002824:	4620      	mov	r0, r4
 8002826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800282a:	3a30      	subs	r2, #48	; 0x30
 800282c:	2a09      	cmp	r2, #9
 800282e:	d903      	bls.n	8002838 <_svfiprintf_r+0x1a8>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0c5      	beq.n	80027c0 <_svfiprintf_r+0x130>
 8002834:	9105      	str	r1, [sp, #20]
 8002836:	e7c3      	b.n	80027c0 <_svfiprintf_r+0x130>
 8002838:	fb0c 2101 	mla	r1, ip, r1, r2
 800283c:	4604      	mov	r4, r0
 800283e:	2301      	movs	r3, #1
 8002840:	e7f0      	b.n	8002824 <_svfiprintf_r+0x194>
 8002842:	ab03      	add	r3, sp, #12
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	462a      	mov	r2, r5
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <_svfiprintf_r+0x1f8>)
 800284a:	a904      	add	r1, sp, #16
 800284c:	4638      	mov	r0, r7
 800284e:	f3af 8000 	nop.w
 8002852:	1c42      	adds	r2, r0, #1
 8002854:	4606      	mov	r6, r0
 8002856:	d1d6      	bne.n	8002806 <_svfiprintf_r+0x176>
 8002858:	89ab      	ldrh	r3, [r5, #12]
 800285a:	065b      	lsls	r3, r3, #25
 800285c:	f53f af2c 	bmi.w	80026b8 <_svfiprintf_r+0x28>
 8002860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002862:	b01d      	add	sp, #116	; 0x74
 8002864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002868:	ab03      	add	r3, sp, #12
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	462a      	mov	r2, r5
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <_svfiprintf_r+0x1f8>)
 8002870:	a904      	add	r1, sp, #16
 8002872:	4638      	mov	r0, r7
 8002874:	f000 f9d4 	bl	8002c20 <_printf_i>
 8002878:	e7eb      	b.n	8002852 <_svfiprintf_r+0x1c2>
 800287a:	bf00      	nop
 800287c:	080037a8 	.word	0x080037a8
 8002880:	080037b2 	.word	0x080037b2
 8002884:	00000000 	.word	0x00000000
 8002888:	080025d9 	.word	0x080025d9
 800288c:	080037ae 	.word	0x080037ae

08002890 <__sfputc_r>:
 8002890:	6893      	ldr	r3, [r2, #8]
 8002892:	3b01      	subs	r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	b410      	push	{r4}
 8002898:	6093      	str	r3, [r2, #8]
 800289a:	da08      	bge.n	80028ae <__sfputc_r+0x1e>
 800289c:	6994      	ldr	r4, [r2, #24]
 800289e:	42a3      	cmp	r3, r4
 80028a0:	db01      	blt.n	80028a6 <__sfputc_r+0x16>
 80028a2:	290a      	cmp	r1, #10
 80028a4:	d103      	bne.n	80028ae <__sfputc_r+0x1e>
 80028a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028aa:	f000 bb33 	b.w	8002f14 <__swbuf_r>
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	1c58      	adds	r0, r3, #1
 80028b2:	6010      	str	r0, [r2, #0]
 80028b4:	7019      	strb	r1, [r3, #0]
 80028b6:	4608      	mov	r0, r1
 80028b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028bc:	4770      	bx	lr

080028be <__sfputs_r>:
 80028be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c0:	4606      	mov	r6, r0
 80028c2:	460f      	mov	r7, r1
 80028c4:	4614      	mov	r4, r2
 80028c6:	18d5      	adds	r5, r2, r3
 80028c8:	42ac      	cmp	r4, r5
 80028ca:	d101      	bne.n	80028d0 <__sfputs_r+0x12>
 80028cc:	2000      	movs	r0, #0
 80028ce:	e007      	b.n	80028e0 <__sfputs_r+0x22>
 80028d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028d4:	463a      	mov	r2, r7
 80028d6:	4630      	mov	r0, r6
 80028d8:	f7ff ffda 	bl	8002890 <__sfputc_r>
 80028dc:	1c43      	adds	r3, r0, #1
 80028de:	d1f3      	bne.n	80028c8 <__sfputs_r+0xa>
 80028e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028e4 <_vfiprintf_r>:
 80028e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e8:	460d      	mov	r5, r1
 80028ea:	b09d      	sub	sp, #116	; 0x74
 80028ec:	4614      	mov	r4, r2
 80028ee:	4698      	mov	r8, r3
 80028f0:	4606      	mov	r6, r0
 80028f2:	b118      	cbz	r0, 80028fc <_vfiprintf_r+0x18>
 80028f4:	6983      	ldr	r3, [r0, #24]
 80028f6:	b90b      	cbnz	r3, 80028fc <_vfiprintf_r+0x18>
 80028f8:	f7ff fd74 	bl	80023e4 <__sinit>
 80028fc:	4b89      	ldr	r3, [pc, #548]	; (8002b24 <_vfiprintf_r+0x240>)
 80028fe:	429d      	cmp	r5, r3
 8002900:	d11b      	bne.n	800293a <_vfiprintf_r+0x56>
 8002902:	6875      	ldr	r5, [r6, #4]
 8002904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002906:	07d9      	lsls	r1, r3, #31
 8002908:	d405      	bmi.n	8002916 <_vfiprintf_r+0x32>
 800290a:	89ab      	ldrh	r3, [r5, #12]
 800290c:	059a      	lsls	r2, r3, #22
 800290e:	d402      	bmi.n	8002916 <_vfiprintf_r+0x32>
 8002910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002912:	f7ff fe05 	bl	8002520 <__retarget_lock_acquire_recursive>
 8002916:	89ab      	ldrh	r3, [r5, #12]
 8002918:	071b      	lsls	r3, r3, #28
 800291a:	d501      	bpl.n	8002920 <_vfiprintf_r+0x3c>
 800291c:	692b      	ldr	r3, [r5, #16]
 800291e:	b9eb      	cbnz	r3, 800295c <_vfiprintf_r+0x78>
 8002920:	4629      	mov	r1, r5
 8002922:	4630      	mov	r0, r6
 8002924:	f000 fb5a 	bl	8002fdc <__swsetup_r>
 8002928:	b1c0      	cbz	r0, 800295c <_vfiprintf_r+0x78>
 800292a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800292c:	07dc      	lsls	r4, r3, #31
 800292e:	d50e      	bpl.n	800294e <_vfiprintf_r+0x6a>
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	b01d      	add	sp, #116	; 0x74
 8002936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800293a:	4b7b      	ldr	r3, [pc, #492]	; (8002b28 <_vfiprintf_r+0x244>)
 800293c:	429d      	cmp	r5, r3
 800293e:	d101      	bne.n	8002944 <_vfiprintf_r+0x60>
 8002940:	68b5      	ldr	r5, [r6, #8]
 8002942:	e7df      	b.n	8002904 <_vfiprintf_r+0x20>
 8002944:	4b79      	ldr	r3, [pc, #484]	; (8002b2c <_vfiprintf_r+0x248>)
 8002946:	429d      	cmp	r5, r3
 8002948:	bf08      	it	eq
 800294a:	68f5      	ldreq	r5, [r6, #12]
 800294c:	e7da      	b.n	8002904 <_vfiprintf_r+0x20>
 800294e:	89ab      	ldrh	r3, [r5, #12]
 8002950:	0598      	lsls	r0, r3, #22
 8002952:	d4ed      	bmi.n	8002930 <_vfiprintf_r+0x4c>
 8002954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002956:	f7ff fde4 	bl	8002522 <__retarget_lock_release_recursive>
 800295a:	e7e9      	b.n	8002930 <_vfiprintf_r+0x4c>
 800295c:	2300      	movs	r3, #0
 800295e:	9309      	str	r3, [sp, #36]	; 0x24
 8002960:	2320      	movs	r3, #32
 8002962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002966:	f8cd 800c 	str.w	r8, [sp, #12]
 800296a:	2330      	movs	r3, #48	; 0x30
 800296c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002b30 <_vfiprintf_r+0x24c>
 8002970:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002974:	f04f 0901 	mov.w	r9, #1
 8002978:	4623      	mov	r3, r4
 800297a:	469a      	mov	sl, r3
 800297c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002980:	b10a      	cbz	r2, 8002986 <_vfiprintf_r+0xa2>
 8002982:	2a25      	cmp	r2, #37	; 0x25
 8002984:	d1f9      	bne.n	800297a <_vfiprintf_r+0x96>
 8002986:	ebba 0b04 	subs.w	fp, sl, r4
 800298a:	d00b      	beq.n	80029a4 <_vfiprintf_r+0xc0>
 800298c:	465b      	mov	r3, fp
 800298e:	4622      	mov	r2, r4
 8002990:	4629      	mov	r1, r5
 8002992:	4630      	mov	r0, r6
 8002994:	f7ff ff93 	bl	80028be <__sfputs_r>
 8002998:	3001      	adds	r0, #1
 800299a:	f000 80aa 	beq.w	8002af2 <_vfiprintf_r+0x20e>
 800299e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029a0:	445a      	add	r2, fp
 80029a2:	9209      	str	r2, [sp, #36]	; 0x24
 80029a4:	f89a 3000 	ldrb.w	r3, [sl]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a2 	beq.w	8002af2 <_vfiprintf_r+0x20e>
 80029ae:	2300      	movs	r3, #0
 80029b0:	f04f 32ff 	mov.w	r2, #4294967295
 80029b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029b8:	f10a 0a01 	add.w	sl, sl, #1
 80029bc:	9304      	str	r3, [sp, #16]
 80029be:	9307      	str	r3, [sp, #28]
 80029c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029c4:	931a      	str	r3, [sp, #104]	; 0x68
 80029c6:	4654      	mov	r4, sl
 80029c8:	2205      	movs	r2, #5
 80029ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ce:	4858      	ldr	r0, [pc, #352]	; (8002b30 <_vfiprintf_r+0x24c>)
 80029d0:	f7fd fc0e 	bl	80001f0 <memchr>
 80029d4:	9a04      	ldr	r2, [sp, #16]
 80029d6:	b9d8      	cbnz	r0, 8002a10 <_vfiprintf_r+0x12c>
 80029d8:	06d1      	lsls	r1, r2, #27
 80029da:	bf44      	itt	mi
 80029dc:	2320      	movmi	r3, #32
 80029de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029e2:	0713      	lsls	r3, r2, #28
 80029e4:	bf44      	itt	mi
 80029e6:	232b      	movmi	r3, #43	; 0x2b
 80029e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029ec:	f89a 3000 	ldrb.w	r3, [sl]
 80029f0:	2b2a      	cmp	r3, #42	; 0x2a
 80029f2:	d015      	beq.n	8002a20 <_vfiprintf_r+0x13c>
 80029f4:	9a07      	ldr	r2, [sp, #28]
 80029f6:	4654      	mov	r4, sl
 80029f8:	2000      	movs	r0, #0
 80029fa:	f04f 0c0a 	mov.w	ip, #10
 80029fe:	4621      	mov	r1, r4
 8002a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a04:	3b30      	subs	r3, #48	; 0x30
 8002a06:	2b09      	cmp	r3, #9
 8002a08:	d94e      	bls.n	8002aa8 <_vfiprintf_r+0x1c4>
 8002a0a:	b1b0      	cbz	r0, 8002a3a <_vfiprintf_r+0x156>
 8002a0c:	9207      	str	r2, [sp, #28]
 8002a0e:	e014      	b.n	8002a3a <_vfiprintf_r+0x156>
 8002a10:	eba0 0308 	sub.w	r3, r0, r8
 8002a14:	fa09 f303 	lsl.w	r3, r9, r3
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	9304      	str	r3, [sp, #16]
 8002a1c:	46a2      	mov	sl, r4
 8002a1e:	e7d2      	b.n	80029c6 <_vfiprintf_r+0xe2>
 8002a20:	9b03      	ldr	r3, [sp, #12]
 8002a22:	1d19      	adds	r1, r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	9103      	str	r1, [sp, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bfbb      	ittet	lt
 8002a2c:	425b      	neglt	r3, r3
 8002a2e:	f042 0202 	orrlt.w	r2, r2, #2
 8002a32:	9307      	strge	r3, [sp, #28]
 8002a34:	9307      	strlt	r3, [sp, #28]
 8002a36:	bfb8      	it	lt
 8002a38:	9204      	strlt	r2, [sp, #16]
 8002a3a:	7823      	ldrb	r3, [r4, #0]
 8002a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8002a3e:	d10c      	bne.n	8002a5a <_vfiprintf_r+0x176>
 8002a40:	7863      	ldrb	r3, [r4, #1]
 8002a42:	2b2a      	cmp	r3, #42	; 0x2a
 8002a44:	d135      	bne.n	8002ab2 <_vfiprintf_r+0x1ce>
 8002a46:	9b03      	ldr	r3, [sp, #12]
 8002a48:	1d1a      	adds	r2, r3, #4
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	9203      	str	r2, [sp, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bfb8      	it	lt
 8002a52:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a56:	3402      	adds	r4, #2
 8002a58:	9305      	str	r3, [sp, #20]
 8002a5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002b40 <_vfiprintf_r+0x25c>
 8002a5e:	7821      	ldrb	r1, [r4, #0]
 8002a60:	2203      	movs	r2, #3
 8002a62:	4650      	mov	r0, sl
 8002a64:	f7fd fbc4 	bl	80001f0 <memchr>
 8002a68:	b140      	cbz	r0, 8002a7c <_vfiprintf_r+0x198>
 8002a6a:	2340      	movs	r3, #64	; 0x40
 8002a6c:	eba0 000a 	sub.w	r0, r0, sl
 8002a70:	fa03 f000 	lsl.w	r0, r3, r0
 8002a74:	9b04      	ldr	r3, [sp, #16]
 8002a76:	4303      	orrs	r3, r0
 8002a78:	3401      	adds	r4, #1
 8002a7a:	9304      	str	r3, [sp, #16]
 8002a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a80:	482c      	ldr	r0, [pc, #176]	; (8002b34 <_vfiprintf_r+0x250>)
 8002a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a86:	2206      	movs	r2, #6
 8002a88:	f7fd fbb2 	bl	80001f0 <memchr>
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d03f      	beq.n	8002b10 <_vfiprintf_r+0x22c>
 8002a90:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <_vfiprintf_r+0x254>)
 8002a92:	bb1b      	cbnz	r3, 8002adc <_vfiprintf_r+0x1f8>
 8002a94:	9b03      	ldr	r3, [sp, #12]
 8002a96:	3307      	adds	r3, #7
 8002a98:	f023 0307 	bic.w	r3, r3, #7
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	9303      	str	r3, [sp, #12]
 8002aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa2:	443b      	add	r3, r7
 8002aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8002aa6:	e767      	b.n	8002978 <_vfiprintf_r+0x94>
 8002aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002aac:	460c      	mov	r4, r1
 8002aae:	2001      	movs	r0, #1
 8002ab0:	e7a5      	b.n	80029fe <_vfiprintf_r+0x11a>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	3401      	adds	r4, #1
 8002ab6:	9305      	str	r3, [sp, #20]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f04f 0c0a 	mov.w	ip, #10
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ac4:	3a30      	subs	r2, #48	; 0x30
 8002ac6:	2a09      	cmp	r2, #9
 8002ac8:	d903      	bls.n	8002ad2 <_vfiprintf_r+0x1ee>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0c5      	beq.n	8002a5a <_vfiprintf_r+0x176>
 8002ace:	9105      	str	r1, [sp, #20]
 8002ad0:	e7c3      	b.n	8002a5a <_vfiprintf_r+0x176>
 8002ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e7f0      	b.n	8002abe <_vfiprintf_r+0x1da>
 8002adc:	ab03      	add	r3, sp, #12
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	462a      	mov	r2, r5
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <_vfiprintf_r+0x258>)
 8002ae4:	a904      	add	r1, sp, #16
 8002ae6:	4630      	mov	r0, r6
 8002ae8:	f3af 8000 	nop.w
 8002aec:	4607      	mov	r7, r0
 8002aee:	1c78      	adds	r0, r7, #1
 8002af0:	d1d6      	bne.n	8002aa0 <_vfiprintf_r+0x1bc>
 8002af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002af4:	07d9      	lsls	r1, r3, #31
 8002af6:	d405      	bmi.n	8002b04 <_vfiprintf_r+0x220>
 8002af8:	89ab      	ldrh	r3, [r5, #12]
 8002afa:	059a      	lsls	r2, r3, #22
 8002afc:	d402      	bmi.n	8002b04 <_vfiprintf_r+0x220>
 8002afe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b00:	f7ff fd0f 	bl	8002522 <__retarget_lock_release_recursive>
 8002b04:	89ab      	ldrh	r3, [r5, #12]
 8002b06:	065b      	lsls	r3, r3, #25
 8002b08:	f53f af12 	bmi.w	8002930 <_vfiprintf_r+0x4c>
 8002b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b0e:	e711      	b.n	8002934 <_vfiprintf_r+0x50>
 8002b10:	ab03      	add	r3, sp, #12
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	462a      	mov	r2, r5
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <_vfiprintf_r+0x258>)
 8002b18:	a904      	add	r1, sp, #16
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	f000 f880 	bl	8002c20 <_printf_i>
 8002b20:	e7e4      	b.n	8002aec <_vfiprintf_r+0x208>
 8002b22:	bf00      	nop
 8002b24:	08003768 	.word	0x08003768
 8002b28:	08003788 	.word	0x08003788
 8002b2c:	08003748 	.word	0x08003748
 8002b30:	080037a8 	.word	0x080037a8
 8002b34:	080037b2 	.word	0x080037b2
 8002b38:	00000000 	.word	0x00000000
 8002b3c:	080028bf 	.word	0x080028bf
 8002b40:	080037ae 	.word	0x080037ae

08002b44 <_printf_common>:
 8002b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b48:	4616      	mov	r6, r2
 8002b4a:	4699      	mov	r9, r3
 8002b4c:	688a      	ldr	r2, [r1, #8]
 8002b4e:	690b      	ldr	r3, [r1, #16]
 8002b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b54:	4293      	cmp	r3, r2
 8002b56:	bfb8      	it	lt
 8002b58:	4613      	movlt	r3, r2
 8002b5a:	6033      	str	r3, [r6, #0]
 8002b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b60:	4607      	mov	r7, r0
 8002b62:	460c      	mov	r4, r1
 8002b64:	b10a      	cbz	r2, 8002b6a <_printf_common+0x26>
 8002b66:	3301      	adds	r3, #1
 8002b68:	6033      	str	r3, [r6, #0]
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	0699      	lsls	r1, r3, #26
 8002b6e:	bf42      	ittt	mi
 8002b70:	6833      	ldrmi	r3, [r6, #0]
 8002b72:	3302      	addmi	r3, #2
 8002b74:	6033      	strmi	r3, [r6, #0]
 8002b76:	6825      	ldr	r5, [r4, #0]
 8002b78:	f015 0506 	ands.w	r5, r5, #6
 8002b7c:	d106      	bne.n	8002b8c <_printf_common+0x48>
 8002b7e:	f104 0a19 	add.w	sl, r4, #25
 8002b82:	68e3      	ldr	r3, [r4, #12]
 8002b84:	6832      	ldr	r2, [r6, #0]
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	42ab      	cmp	r3, r5
 8002b8a:	dc26      	bgt.n	8002bda <_printf_common+0x96>
 8002b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b90:	1e13      	subs	r3, r2, #0
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	bf18      	it	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	0692      	lsls	r2, r2, #26
 8002b9a:	d42b      	bmi.n	8002bf4 <_printf_common+0xb0>
 8002b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	4638      	mov	r0, r7
 8002ba4:	47c0      	blx	r8
 8002ba6:	3001      	adds	r0, #1
 8002ba8:	d01e      	beq.n	8002be8 <_printf_common+0xa4>
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	68e5      	ldr	r5, [r4, #12]
 8002bae:	6832      	ldr	r2, [r6, #0]
 8002bb0:	f003 0306 	and.w	r3, r3, #6
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	bf08      	it	eq
 8002bb8:	1aad      	subeq	r5, r5, r2
 8002bba:	68a3      	ldr	r3, [r4, #8]
 8002bbc:	6922      	ldr	r2, [r4, #16]
 8002bbe:	bf0c      	ite	eq
 8002bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bc4:	2500      	movne	r5, #0
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	bfc4      	itt	gt
 8002bca:	1a9b      	subgt	r3, r3, r2
 8002bcc:	18ed      	addgt	r5, r5, r3
 8002bce:	2600      	movs	r6, #0
 8002bd0:	341a      	adds	r4, #26
 8002bd2:	42b5      	cmp	r5, r6
 8002bd4:	d11a      	bne.n	8002c0c <_printf_common+0xc8>
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	e008      	b.n	8002bec <_printf_common+0xa8>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	4652      	mov	r2, sl
 8002bde:	4649      	mov	r1, r9
 8002be0:	4638      	mov	r0, r7
 8002be2:	47c0      	blx	r8
 8002be4:	3001      	adds	r0, #1
 8002be6:	d103      	bne.n	8002bf0 <_printf_common+0xac>
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bf0:	3501      	adds	r5, #1
 8002bf2:	e7c6      	b.n	8002b82 <_printf_common+0x3e>
 8002bf4:	18e1      	adds	r1, r4, r3
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	2030      	movs	r0, #48	; 0x30
 8002bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bfe:	4422      	add	r2, r4
 8002c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c08:	3302      	adds	r3, #2
 8002c0a:	e7c7      	b.n	8002b9c <_printf_common+0x58>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	4622      	mov	r2, r4
 8002c10:	4649      	mov	r1, r9
 8002c12:	4638      	mov	r0, r7
 8002c14:	47c0      	blx	r8
 8002c16:	3001      	adds	r0, #1
 8002c18:	d0e6      	beq.n	8002be8 <_printf_common+0xa4>
 8002c1a:	3601      	adds	r6, #1
 8002c1c:	e7d9      	b.n	8002bd2 <_printf_common+0x8e>
	...

08002c20 <_printf_i>:
 8002c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c24:	460c      	mov	r4, r1
 8002c26:	4691      	mov	r9, r2
 8002c28:	7e27      	ldrb	r7, [r4, #24]
 8002c2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002c2c:	2f78      	cmp	r7, #120	; 0x78
 8002c2e:	4680      	mov	r8, r0
 8002c30:	469a      	mov	sl, r3
 8002c32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c36:	d807      	bhi.n	8002c48 <_printf_i+0x28>
 8002c38:	2f62      	cmp	r7, #98	; 0x62
 8002c3a:	d80a      	bhi.n	8002c52 <_printf_i+0x32>
 8002c3c:	2f00      	cmp	r7, #0
 8002c3e:	f000 80d8 	beq.w	8002df2 <_printf_i+0x1d2>
 8002c42:	2f58      	cmp	r7, #88	; 0x58
 8002c44:	f000 80a3 	beq.w	8002d8e <_printf_i+0x16e>
 8002c48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c50:	e03a      	b.n	8002cc8 <_printf_i+0xa8>
 8002c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c56:	2b15      	cmp	r3, #21
 8002c58:	d8f6      	bhi.n	8002c48 <_printf_i+0x28>
 8002c5a:	a001      	add	r0, pc, #4	; (adr r0, 8002c60 <_printf_i+0x40>)
 8002c5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002c60:	08002cb9 	.word	0x08002cb9
 8002c64:	08002ccd 	.word	0x08002ccd
 8002c68:	08002c49 	.word	0x08002c49
 8002c6c:	08002c49 	.word	0x08002c49
 8002c70:	08002c49 	.word	0x08002c49
 8002c74:	08002c49 	.word	0x08002c49
 8002c78:	08002ccd 	.word	0x08002ccd
 8002c7c:	08002c49 	.word	0x08002c49
 8002c80:	08002c49 	.word	0x08002c49
 8002c84:	08002c49 	.word	0x08002c49
 8002c88:	08002c49 	.word	0x08002c49
 8002c8c:	08002dd9 	.word	0x08002dd9
 8002c90:	08002cfd 	.word	0x08002cfd
 8002c94:	08002dbb 	.word	0x08002dbb
 8002c98:	08002c49 	.word	0x08002c49
 8002c9c:	08002c49 	.word	0x08002c49
 8002ca0:	08002dfb 	.word	0x08002dfb
 8002ca4:	08002c49 	.word	0x08002c49
 8002ca8:	08002cfd 	.word	0x08002cfd
 8002cac:	08002c49 	.word	0x08002c49
 8002cb0:	08002c49 	.word	0x08002c49
 8002cb4:	08002dc3 	.word	0x08002dc3
 8002cb8:	680b      	ldr	r3, [r1, #0]
 8002cba:	1d1a      	adds	r2, r3, #4
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	600a      	str	r2, [r1, #0]
 8002cc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0a3      	b.n	8002e14 <_printf_i+0x1f4>
 8002ccc:	6825      	ldr	r5, [r4, #0]
 8002cce:	6808      	ldr	r0, [r1, #0]
 8002cd0:	062e      	lsls	r6, r5, #24
 8002cd2:	f100 0304 	add.w	r3, r0, #4
 8002cd6:	d50a      	bpl.n	8002cee <_printf_i+0xce>
 8002cd8:	6805      	ldr	r5, [r0, #0]
 8002cda:	600b      	str	r3, [r1, #0]
 8002cdc:	2d00      	cmp	r5, #0
 8002cde:	da03      	bge.n	8002ce8 <_printf_i+0xc8>
 8002ce0:	232d      	movs	r3, #45	; 0x2d
 8002ce2:	426d      	negs	r5, r5
 8002ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ce8:	485e      	ldr	r0, [pc, #376]	; (8002e64 <_printf_i+0x244>)
 8002cea:	230a      	movs	r3, #10
 8002cec:	e019      	b.n	8002d22 <_printf_i+0x102>
 8002cee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002cf2:	6805      	ldr	r5, [r0, #0]
 8002cf4:	600b      	str	r3, [r1, #0]
 8002cf6:	bf18      	it	ne
 8002cf8:	b22d      	sxthne	r5, r5
 8002cfa:	e7ef      	b.n	8002cdc <_printf_i+0xbc>
 8002cfc:	680b      	ldr	r3, [r1, #0]
 8002cfe:	6825      	ldr	r5, [r4, #0]
 8002d00:	1d18      	adds	r0, r3, #4
 8002d02:	6008      	str	r0, [r1, #0]
 8002d04:	0628      	lsls	r0, r5, #24
 8002d06:	d501      	bpl.n	8002d0c <_printf_i+0xec>
 8002d08:	681d      	ldr	r5, [r3, #0]
 8002d0a:	e002      	b.n	8002d12 <_printf_i+0xf2>
 8002d0c:	0669      	lsls	r1, r5, #25
 8002d0e:	d5fb      	bpl.n	8002d08 <_printf_i+0xe8>
 8002d10:	881d      	ldrh	r5, [r3, #0]
 8002d12:	4854      	ldr	r0, [pc, #336]	; (8002e64 <_printf_i+0x244>)
 8002d14:	2f6f      	cmp	r7, #111	; 0x6f
 8002d16:	bf0c      	ite	eq
 8002d18:	2308      	moveq	r3, #8
 8002d1a:	230a      	movne	r3, #10
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d22:	6866      	ldr	r6, [r4, #4]
 8002d24:	60a6      	str	r6, [r4, #8]
 8002d26:	2e00      	cmp	r6, #0
 8002d28:	bfa2      	ittt	ge
 8002d2a:	6821      	ldrge	r1, [r4, #0]
 8002d2c:	f021 0104 	bicge.w	r1, r1, #4
 8002d30:	6021      	strge	r1, [r4, #0]
 8002d32:	b90d      	cbnz	r5, 8002d38 <_printf_i+0x118>
 8002d34:	2e00      	cmp	r6, #0
 8002d36:	d04d      	beq.n	8002dd4 <_printf_i+0x1b4>
 8002d38:	4616      	mov	r6, r2
 8002d3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d3e:	fb03 5711 	mls	r7, r3, r1, r5
 8002d42:	5dc7      	ldrb	r7, [r0, r7]
 8002d44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d48:	462f      	mov	r7, r5
 8002d4a:	42bb      	cmp	r3, r7
 8002d4c:	460d      	mov	r5, r1
 8002d4e:	d9f4      	bls.n	8002d3a <_printf_i+0x11a>
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d10b      	bne.n	8002d6c <_printf_i+0x14c>
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	07df      	lsls	r7, r3, #31
 8002d58:	d508      	bpl.n	8002d6c <_printf_i+0x14c>
 8002d5a:	6923      	ldr	r3, [r4, #16]
 8002d5c:	6861      	ldr	r1, [r4, #4]
 8002d5e:	4299      	cmp	r1, r3
 8002d60:	bfde      	ittt	le
 8002d62:	2330      	movle	r3, #48	; 0x30
 8002d64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d6c:	1b92      	subs	r2, r2, r6
 8002d6e:	6122      	str	r2, [r4, #16]
 8002d70:	f8cd a000 	str.w	sl, [sp]
 8002d74:	464b      	mov	r3, r9
 8002d76:	aa03      	add	r2, sp, #12
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4640      	mov	r0, r8
 8002d7c:	f7ff fee2 	bl	8002b44 <_printf_common>
 8002d80:	3001      	adds	r0, #1
 8002d82:	d14c      	bne.n	8002e1e <_printf_i+0x1fe>
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	b004      	add	sp, #16
 8002d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d8e:	4835      	ldr	r0, [pc, #212]	; (8002e64 <_printf_i+0x244>)
 8002d90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	680e      	ldr	r6, [r1, #0]
 8002d98:	061f      	lsls	r7, r3, #24
 8002d9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002d9e:	600e      	str	r6, [r1, #0]
 8002da0:	d514      	bpl.n	8002dcc <_printf_i+0x1ac>
 8002da2:	07d9      	lsls	r1, r3, #31
 8002da4:	bf44      	itt	mi
 8002da6:	f043 0320 	orrmi.w	r3, r3, #32
 8002daa:	6023      	strmi	r3, [r4, #0]
 8002dac:	b91d      	cbnz	r5, 8002db6 <_printf_i+0x196>
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	f023 0320 	bic.w	r3, r3, #32
 8002db4:	6023      	str	r3, [r4, #0]
 8002db6:	2310      	movs	r3, #16
 8002db8:	e7b0      	b.n	8002d1c <_printf_i+0xfc>
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	f043 0320 	orr.w	r3, r3, #32
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	2378      	movs	r3, #120	; 0x78
 8002dc4:	4828      	ldr	r0, [pc, #160]	; (8002e68 <_printf_i+0x248>)
 8002dc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002dca:	e7e3      	b.n	8002d94 <_printf_i+0x174>
 8002dcc:	065e      	lsls	r6, r3, #25
 8002dce:	bf48      	it	mi
 8002dd0:	b2ad      	uxthmi	r5, r5
 8002dd2:	e7e6      	b.n	8002da2 <_printf_i+0x182>
 8002dd4:	4616      	mov	r6, r2
 8002dd6:	e7bb      	b.n	8002d50 <_printf_i+0x130>
 8002dd8:	680b      	ldr	r3, [r1, #0]
 8002dda:	6826      	ldr	r6, [r4, #0]
 8002ddc:	6960      	ldr	r0, [r4, #20]
 8002dde:	1d1d      	adds	r5, r3, #4
 8002de0:	600d      	str	r5, [r1, #0]
 8002de2:	0635      	lsls	r5, r6, #24
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	d501      	bpl.n	8002dec <_printf_i+0x1cc>
 8002de8:	6018      	str	r0, [r3, #0]
 8002dea:	e002      	b.n	8002df2 <_printf_i+0x1d2>
 8002dec:	0671      	lsls	r1, r6, #25
 8002dee:	d5fb      	bpl.n	8002de8 <_printf_i+0x1c8>
 8002df0:	8018      	strh	r0, [r3, #0]
 8002df2:	2300      	movs	r3, #0
 8002df4:	6123      	str	r3, [r4, #16]
 8002df6:	4616      	mov	r6, r2
 8002df8:	e7ba      	b.n	8002d70 <_printf_i+0x150>
 8002dfa:	680b      	ldr	r3, [r1, #0]
 8002dfc:	1d1a      	adds	r2, r3, #4
 8002dfe:	600a      	str	r2, [r1, #0]
 8002e00:	681e      	ldr	r6, [r3, #0]
 8002e02:	6862      	ldr	r2, [r4, #4]
 8002e04:	2100      	movs	r1, #0
 8002e06:	4630      	mov	r0, r6
 8002e08:	f7fd f9f2 	bl	80001f0 <memchr>
 8002e0c:	b108      	cbz	r0, 8002e12 <_printf_i+0x1f2>
 8002e0e:	1b80      	subs	r0, r0, r6
 8002e10:	6060      	str	r0, [r4, #4]
 8002e12:	6863      	ldr	r3, [r4, #4]
 8002e14:	6123      	str	r3, [r4, #16]
 8002e16:	2300      	movs	r3, #0
 8002e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e1c:	e7a8      	b.n	8002d70 <_printf_i+0x150>
 8002e1e:	6923      	ldr	r3, [r4, #16]
 8002e20:	4632      	mov	r2, r6
 8002e22:	4649      	mov	r1, r9
 8002e24:	4640      	mov	r0, r8
 8002e26:	47d0      	blx	sl
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d0ab      	beq.n	8002d84 <_printf_i+0x164>
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	079b      	lsls	r3, r3, #30
 8002e30:	d413      	bmi.n	8002e5a <_printf_i+0x23a>
 8002e32:	68e0      	ldr	r0, [r4, #12]
 8002e34:	9b03      	ldr	r3, [sp, #12]
 8002e36:	4298      	cmp	r0, r3
 8002e38:	bfb8      	it	lt
 8002e3a:	4618      	movlt	r0, r3
 8002e3c:	e7a4      	b.n	8002d88 <_printf_i+0x168>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	4632      	mov	r2, r6
 8002e42:	4649      	mov	r1, r9
 8002e44:	4640      	mov	r0, r8
 8002e46:	47d0      	blx	sl
 8002e48:	3001      	adds	r0, #1
 8002e4a:	d09b      	beq.n	8002d84 <_printf_i+0x164>
 8002e4c:	3501      	adds	r5, #1
 8002e4e:	68e3      	ldr	r3, [r4, #12]
 8002e50:	9903      	ldr	r1, [sp, #12]
 8002e52:	1a5b      	subs	r3, r3, r1
 8002e54:	42ab      	cmp	r3, r5
 8002e56:	dcf2      	bgt.n	8002e3e <_printf_i+0x21e>
 8002e58:	e7eb      	b.n	8002e32 <_printf_i+0x212>
 8002e5a:	2500      	movs	r5, #0
 8002e5c:	f104 0619 	add.w	r6, r4, #25
 8002e60:	e7f5      	b.n	8002e4e <_printf_i+0x22e>
 8002e62:	bf00      	nop
 8002e64:	080037b9 	.word	0x080037b9
 8002e68:	080037ca 	.word	0x080037ca

08002e6c <_sbrk_r>:
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	4d06      	ldr	r5, [pc, #24]	; (8002e88 <_sbrk_r+0x1c>)
 8002e70:	2300      	movs	r3, #0
 8002e72:	4604      	mov	r4, r0
 8002e74:	4608      	mov	r0, r1
 8002e76:	602b      	str	r3, [r5, #0]
 8002e78:	f7fd fe04 	bl	8000a84 <_sbrk>
 8002e7c:	1c43      	adds	r3, r0, #1
 8002e7e:	d102      	bne.n	8002e86 <_sbrk_r+0x1a>
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	b103      	cbz	r3, 8002e86 <_sbrk_r+0x1a>
 8002e84:	6023      	str	r3, [r4, #0]
 8002e86:	bd38      	pop	{r3, r4, r5, pc}
 8002e88:	200000ec 	.word	0x200000ec

08002e8c <__sread>:
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	460c      	mov	r4, r1
 8002e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e94:	f000 fb02 	bl	800349c <_read_r>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	bfab      	itete	ge
 8002e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8002ea0:	181b      	addge	r3, r3, r0
 8002ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ea6:	bfac      	ite	ge
 8002ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002eaa:	81a3      	strhlt	r3, [r4, #12]
 8002eac:	bd10      	pop	{r4, pc}

08002eae <__swrite>:
 8002eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eb2:	461f      	mov	r7, r3
 8002eb4:	898b      	ldrh	r3, [r1, #12]
 8002eb6:	05db      	lsls	r3, r3, #23
 8002eb8:	4605      	mov	r5, r0
 8002eba:	460c      	mov	r4, r1
 8002ebc:	4616      	mov	r6, r2
 8002ebe:	d505      	bpl.n	8002ecc <__swrite+0x1e>
 8002ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f000 f9c8 	bl	800325c <_lseek_r>
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ed6:	81a3      	strh	r3, [r4, #12]
 8002ed8:	4632      	mov	r2, r6
 8002eda:	463b      	mov	r3, r7
 8002edc:	4628      	mov	r0, r5
 8002ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee2:	f000 b869 	b.w	8002fb8 <_write_r>

08002ee6 <__sseek>:
 8002ee6:	b510      	push	{r4, lr}
 8002ee8:	460c      	mov	r4, r1
 8002eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eee:	f000 f9b5 	bl	800325c <_lseek_r>
 8002ef2:	1c43      	adds	r3, r0, #1
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	bf15      	itete	ne
 8002ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f02:	81a3      	strheq	r3, [r4, #12]
 8002f04:	bf18      	it	ne
 8002f06:	81a3      	strhne	r3, [r4, #12]
 8002f08:	bd10      	pop	{r4, pc}

08002f0a <__sclose>:
 8002f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f0e:	f000 b8d3 	b.w	80030b8 <_close_r>
	...

08002f14 <__swbuf_r>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	460e      	mov	r6, r1
 8002f18:	4614      	mov	r4, r2
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	b118      	cbz	r0, 8002f26 <__swbuf_r+0x12>
 8002f1e:	6983      	ldr	r3, [r0, #24]
 8002f20:	b90b      	cbnz	r3, 8002f26 <__swbuf_r+0x12>
 8002f22:	f7ff fa5f 	bl	80023e4 <__sinit>
 8002f26:	4b21      	ldr	r3, [pc, #132]	; (8002fac <__swbuf_r+0x98>)
 8002f28:	429c      	cmp	r4, r3
 8002f2a:	d12b      	bne.n	8002f84 <__swbuf_r+0x70>
 8002f2c:	686c      	ldr	r4, [r5, #4]
 8002f2e:	69a3      	ldr	r3, [r4, #24]
 8002f30:	60a3      	str	r3, [r4, #8]
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	071a      	lsls	r2, r3, #28
 8002f36:	d52f      	bpl.n	8002f98 <__swbuf_r+0x84>
 8002f38:	6923      	ldr	r3, [r4, #16]
 8002f3a:	b36b      	cbz	r3, 8002f98 <__swbuf_r+0x84>
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	6820      	ldr	r0, [r4, #0]
 8002f40:	1ac0      	subs	r0, r0, r3
 8002f42:	6963      	ldr	r3, [r4, #20]
 8002f44:	b2f6      	uxtb	r6, r6
 8002f46:	4283      	cmp	r3, r0
 8002f48:	4637      	mov	r7, r6
 8002f4a:	dc04      	bgt.n	8002f56 <__swbuf_r+0x42>
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	4628      	mov	r0, r5
 8002f50:	f000 f948 	bl	80031e4 <_fflush_r>
 8002f54:	bb30      	cbnz	r0, 8002fa4 <__swbuf_r+0x90>
 8002f56:	68a3      	ldr	r3, [r4, #8]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	60a3      	str	r3, [r4, #8]
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	6022      	str	r2, [r4, #0]
 8002f62:	701e      	strb	r6, [r3, #0]
 8002f64:	6963      	ldr	r3, [r4, #20]
 8002f66:	3001      	adds	r0, #1
 8002f68:	4283      	cmp	r3, r0
 8002f6a:	d004      	beq.n	8002f76 <__swbuf_r+0x62>
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	07db      	lsls	r3, r3, #31
 8002f70:	d506      	bpl.n	8002f80 <__swbuf_r+0x6c>
 8002f72:	2e0a      	cmp	r6, #10
 8002f74:	d104      	bne.n	8002f80 <__swbuf_r+0x6c>
 8002f76:	4621      	mov	r1, r4
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f000 f933 	bl	80031e4 <_fflush_r>
 8002f7e:	b988      	cbnz	r0, 8002fa4 <__swbuf_r+0x90>
 8002f80:	4638      	mov	r0, r7
 8002f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <__swbuf_r+0x9c>)
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d101      	bne.n	8002f8e <__swbuf_r+0x7a>
 8002f8a:	68ac      	ldr	r4, [r5, #8]
 8002f8c:	e7cf      	b.n	8002f2e <__swbuf_r+0x1a>
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <__swbuf_r+0xa0>)
 8002f90:	429c      	cmp	r4, r3
 8002f92:	bf08      	it	eq
 8002f94:	68ec      	ldreq	r4, [r5, #12]
 8002f96:	e7ca      	b.n	8002f2e <__swbuf_r+0x1a>
 8002f98:	4621      	mov	r1, r4
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	f000 f81e 	bl	8002fdc <__swsetup_r>
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d0cb      	beq.n	8002f3c <__swbuf_r+0x28>
 8002fa4:	f04f 37ff 	mov.w	r7, #4294967295
 8002fa8:	e7ea      	b.n	8002f80 <__swbuf_r+0x6c>
 8002faa:	bf00      	nop
 8002fac:	08003768 	.word	0x08003768
 8002fb0:	08003788 	.word	0x08003788
 8002fb4:	08003748 	.word	0x08003748

08002fb8 <_write_r>:
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	4d07      	ldr	r5, [pc, #28]	; (8002fd8 <_write_r+0x20>)
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	4608      	mov	r0, r1
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	602a      	str	r2, [r5, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f7fd fd0b 	bl	80009e2 <_write>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d102      	bne.n	8002fd6 <_write_r+0x1e>
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	b103      	cbz	r3, 8002fd6 <_write_r+0x1e>
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	bd38      	pop	{r3, r4, r5, pc}
 8002fd8:	200000ec 	.word	0x200000ec

08002fdc <__swsetup_r>:
 8002fdc:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <__swsetup_r+0xcc>)
 8002fde:	b570      	push	{r4, r5, r6, lr}
 8002fe0:	681d      	ldr	r5, [r3, #0]
 8002fe2:	4606      	mov	r6, r0
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	b125      	cbz	r5, 8002ff2 <__swsetup_r+0x16>
 8002fe8:	69ab      	ldr	r3, [r5, #24]
 8002fea:	b913      	cbnz	r3, 8002ff2 <__swsetup_r+0x16>
 8002fec:	4628      	mov	r0, r5
 8002fee:	f7ff f9f9 	bl	80023e4 <__sinit>
 8002ff2:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <__swsetup_r+0xd0>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	d10f      	bne.n	8003018 <__swsetup_r+0x3c>
 8002ff8:	686c      	ldr	r4, [r5, #4]
 8002ffa:	89a3      	ldrh	r3, [r4, #12]
 8002ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003000:	0719      	lsls	r1, r3, #28
 8003002:	d42c      	bmi.n	800305e <__swsetup_r+0x82>
 8003004:	06dd      	lsls	r5, r3, #27
 8003006:	d411      	bmi.n	800302c <__swsetup_r+0x50>
 8003008:	2309      	movs	r3, #9
 800300a:	6033      	str	r3, [r6, #0]
 800300c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003010:	81a3      	strh	r3, [r4, #12]
 8003012:	f04f 30ff 	mov.w	r0, #4294967295
 8003016:	e03e      	b.n	8003096 <__swsetup_r+0xba>
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <__swsetup_r+0xd4>)
 800301a:	429c      	cmp	r4, r3
 800301c:	d101      	bne.n	8003022 <__swsetup_r+0x46>
 800301e:	68ac      	ldr	r4, [r5, #8]
 8003020:	e7eb      	b.n	8002ffa <__swsetup_r+0x1e>
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <__swsetup_r+0xd8>)
 8003024:	429c      	cmp	r4, r3
 8003026:	bf08      	it	eq
 8003028:	68ec      	ldreq	r4, [r5, #12]
 800302a:	e7e6      	b.n	8002ffa <__swsetup_r+0x1e>
 800302c:	0758      	lsls	r0, r3, #29
 800302e:	d512      	bpl.n	8003056 <__swsetup_r+0x7a>
 8003030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003032:	b141      	cbz	r1, 8003046 <__swsetup_r+0x6a>
 8003034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003038:	4299      	cmp	r1, r3
 800303a:	d002      	beq.n	8003042 <__swsetup_r+0x66>
 800303c:	4630      	mov	r0, r6
 800303e:	f000 f9b7 	bl	80033b0 <_free_r>
 8003042:	2300      	movs	r3, #0
 8003044:	6363      	str	r3, [r4, #52]	; 0x34
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	2300      	movs	r3, #0
 8003050:	6063      	str	r3, [r4, #4]
 8003052:	6923      	ldr	r3, [r4, #16]
 8003054:	6023      	str	r3, [r4, #0]
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	f043 0308 	orr.w	r3, r3, #8
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	6923      	ldr	r3, [r4, #16]
 8003060:	b94b      	cbnz	r3, 8003076 <__swsetup_r+0x9a>
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800306c:	d003      	beq.n	8003076 <__swsetup_r+0x9a>
 800306e:	4621      	mov	r1, r4
 8003070:	4630      	mov	r0, r6
 8003072:	f000 f929 	bl	80032c8 <__smakebuf_r>
 8003076:	89a0      	ldrh	r0, [r4, #12]
 8003078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800307c:	f010 0301 	ands.w	r3, r0, #1
 8003080:	d00a      	beq.n	8003098 <__swsetup_r+0xbc>
 8003082:	2300      	movs	r3, #0
 8003084:	60a3      	str	r3, [r4, #8]
 8003086:	6963      	ldr	r3, [r4, #20]
 8003088:	425b      	negs	r3, r3
 800308a:	61a3      	str	r3, [r4, #24]
 800308c:	6923      	ldr	r3, [r4, #16]
 800308e:	b943      	cbnz	r3, 80030a2 <__swsetup_r+0xc6>
 8003090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003094:	d1ba      	bne.n	800300c <__swsetup_r+0x30>
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	0781      	lsls	r1, r0, #30
 800309a:	bf58      	it	pl
 800309c:	6963      	ldrpl	r3, [r4, #20]
 800309e:	60a3      	str	r3, [r4, #8]
 80030a0:	e7f4      	b.n	800308c <__swsetup_r+0xb0>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e7f7      	b.n	8003096 <__swsetup_r+0xba>
 80030a6:	bf00      	nop
 80030a8:	2000000c 	.word	0x2000000c
 80030ac:	08003768 	.word	0x08003768
 80030b0:	08003788 	.word	0x08003788
 80030b4:	08003748 	.word	0x08003748

080030b8 <_close_r>:
 80030b8:	b538      	push	{r3, r4, r5, lr}
 80030ba:	4d06      	ldr	r5, [pc, #24]	; (80030d4 <_close_r+0x1c>)
 80030bc:	2300      	movs	r3, #0
 80030be:	4604      	mov	r4, r0
 80030c0:	4608      	mov	r0, r1
 80030c2:	602b      	str	r3, [r5, #0]
 80030c4:	f7fd fca9 	bl	8000a1a <_close>
 80030c8:	1c43      	adds	r3, r0, #1
 80030ca:	d102      	bne.n	80030d2 <_close_r+0x1a>
 80030cc:	682b      	ldr	r3, [r5, #0]
 80030ce:	b103      	cbz	r3, 80030d2 <_close_r+0x1a>
 80030d0:	6023      	str	r3, [r4, #0]
 80030d2:	bd38      	pop	{r3, r4, r5, pc}
 80030d4:	200000ec 	.word	0x200000ec

080030d8 <__sflush_r>:
 80030d8:	898a      	ldrh	r2, [r1, #12]
 80030da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030de:	4605      	mov	r5, r0
 80030e0:	0710      	lsls	r0, r2, #28
 80030e2:	460c      	mov	r4, r1
 80030e4:	d458      	bmi.n	8003198 <__sflush_r+0xc0>
 80030e6:	684b      	ldr	r3, [r1, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	dc05      	bgt.n	80030f8 <__sflush_r+0x20>
 80030ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	dc02      	bgt.n	80030f8 <__sflush_r+0x20>
 80030f2:	2000      	movs	r0, #0
 80030f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030fa:	2e00      	cmp	r6, #0
 80030fc:	d0f9      	beq.n	80030f2 <__sflush_r+0x1a>
 80030fe:	2300      	movs	r3, #0
 8003100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003104:	682f      	ldr	r7, [r5, #0]
 8003106:	602b      	str	r3, [r5, #0]
 8003108:	d032      	beq.n	8003170 <__sflush_r+0x98>
 800310a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	075a      	lsls	r2, r3, #29
 8003110:	d505      	bpl.n	800311e <__sflush_r+0x46>
 8003112:	6863      	ldr	r3, [r4, #4]
 8003114:	1ac0      	subs	r0, r0, r3
 8003116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003118:	b10b      	cbz	r3, 800311e <__sflush_r+0x46>
 800311a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800311c:	1ac0      	subs	r0, r0, r3
 800311e:	2300      	movs	r3, #0
 8003120:	4602      	mov	r2, r0
 8003122:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003124:	6a21      	ldr	r1, [r4, #32]
 8003126:	4628      	mov	r0, r5
 8003128:	47b0      	blx	r6
 800312a:	1c43      	adds	r3, r0, #1
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	d106      	bne.n	800313e <__sflush_r+0x66>
 8003130:	6829      	ldr	r1, [r5, #0]
 8003132:	291d      	cmp	r1, #29
 8003134:	d82c      	bhi.n	8003190 <__sflush_r+0xb8>
 8003136:	4a2a      	ldr	r2, [pc, #168]	; (80031e0 <__sflush_r+0x108>)
 8003138:	40ca      	lsrs	r2, r1
 800313a:	07d6      	lsls	r6, r2, #31
 800313c:	d528      	bpl.n	8003190 <__sflush_r+0xb8>
 800313e:	2200      	movs	r2, #0
 8003140:	6062      	str	r2, [r4, #4]
 8003142:	04d9      	lsls	r1, r3, #19
 8003144:	6922      	ldr	r2, [r4, #16]
 8003146:	6022      	str	r2, [r4, #0]
 8003148:	d504      	bpl.n	8003154 <__sflush_r+0x7c>
 800314a:	1c42      	adds	r2, r0, #1
 800314c:	d101      	bne.n	8003152 <__sflush_r+0x7a>
 800314e:	682b      	ldr	r3, [r5, #0]
 8003150:	b903      	cbnz	r3, 8003154 <__sflush_r+0x7c>
 8003152:	6560      	str	r0, [r4, #84]	; 0x54
 8003154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003156:	602f      	str	r7, [r5, #0]
 8003158:	2900      	cmp	r1, #0
 800315a:	d0ca      	beq.n	80030f2 <__sflush_r+0x1a>
 800315c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003160:	4299      	cmp	r1, r3
 8003162:	d002      	beq.n	800316a <__sflush_r+0x92>
 8003164:	4628      	mov	r0, r5
 8003166:	f000 f923 	bl	80033b0 <_free_r>
 800316a:	2000      	movs	r0, #0
 800316c:	6360      	str	r0, [r4, #52]	; 0x34
 800316e:	e7c1      	b.n	80030f4 <__sflush_r+0x1c>
 8003170:	6a21      	ldr	r1, [r4, #32]
 8003172:	2301      	movs	r3, #1
 8003174:	4628      	mov	r0, r5
 8003176:	47b0      	blx	r6
 8003178:	1c41      	adds	r1, r0, #1
 800317a:	d1c7      	bne.n	800310c <__sflush_r+0x34>
 800317c:	682b      	ldr	r3, [r5, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0c4      	beq.n	800310c <__sflush_r+0x34>
 8003182:	2b1d      	cmp	r3, #29
 8003184:	d001      	beq.n	800318a <__sflush_r+0xb2>
 8003186:	2b16      	cmp	r3, #22
 8003188:	d101      	bne.n	800318e <__sflush_r+0xb6>
 800318a:	602f      	str	r7, [r5, #0]
 800318c:	e7b1      	b.n	80030f2 <__sflush_r+0x1a>
 800318e:	89a3      	ldrh	r3, [r4, #12]
 8003190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003194:	81a3      	strh	r3, [r4, #12]
 8003196:	e7ad      	b.n	80030f4 <__sflush_r+0x1c>
 8003198:	690f      	ldr	r7, [r1, #16]
 800319a:	2f00      	cmp	r7, #0
 800319c:	d0a9      	beq.n	80030f2 <__sflush_r+0x1a>
 800319e:	0793      	lsls	r3, r2, #30
 80031a0:	680e      	ldr	r6, [r1, #0]
 80031a2:	bf08      	it	eq
 80031a4:	694b      	ldreq	r3, [r1, #20]
 80031a6:	600f      	str	r7, [r1, #0]
 80031a8:	bf18      	it	ne
 80031aa:	2300      	movne	r3, #0
 80031ac:	eba6 0807 	sub.w	r8, r6, r7
 80031b0:	608b      	str	r3, [r1, #8]
 80031b2:	f1b8 0f00 	cmp.w	r8, #0
 80031b6:	dd9c      	ble.n	80030f2 <__sflush_r+0x1a>
 80031b8:	6a21      	ldr	r1, [r4, #32]
 80031ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031bc:	4643      	mov	r3, r8
 80031be:	463a      	mov	r2, r7
 80031c0:	4628      	mov	r0, r5
 80031c2:	47b0      	blx	r6
 80031c4:	2800      	cmp	r0, #0
 80031c6:	dc06      	bgt.n	80031d6 <__sflush_r+0xfe>
 80031c8:	89a3      	ldrh	r3, [r4, #12]
 80031ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ce:	81a3      	strh	r3, [r4, #12]
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	e78e      	b.n	80030f4 <__sflush_r+0x1c>
 80031d6:	4407      	add	r7, r0
 80031d8:	eba8 0800 	sub.w	r8, r8, r0
 80031dc:	e7e9      	b.n	80031b2 <__sflush_r+0xda>
 80031de:	bf00      	nop
 80031e0:	20400001 	.word	0x20400001

080031e4 <_fflush_r>:
 80031e4:	b538      	push	{r3, r4, r5, lr}
 80031e6:	690b      	ldr	r3, [r1, #16]
 80031e8:	4605      	mov	r5, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	b913      	cbnz	r3, 80031f4 <_fflush_r+0x10>
 80031ee:	2500      	movs	r5, #0
 80031f0:	4628      	mov	r0, r5
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	b118      	cbz	r0, 80031fe <_fflush_r+0x1a>
 80031f6:	6983      	ldr	r3, [r0, #24]
 80031f8:	b90b      	cbnz	r3, 80031fe <_fflush_r+0x1a>
 80031fa:	f7ff f8f3 	bl	80023e4 <__sinit>
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <_fflush_r+0x6c>)
 8003200:	429c      	cmp	r4, r3
 8003202:	d11b      	bne.n	800323c <_fflush_r+0x58>
 8003204:	686c      	ldr	r4, [r5, #4]
 8003206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ef      	beq.n	80031ee <_fflush_r+0xa>
 800320e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003210:	07d0      	lsls	r0, r2, #31
 8003212:	d404      	bmi.n	800321e <_fflush_r+0x3a>
 8003214:	0599      	lsls	r1, r3, #22
 8003216:	d402      	bmi.n	800321e <_fflush_r+0x3a>
 8003218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800321a:	f7ff f981 	bl	8002520 <__retarget_lock_acquire_recursive>
 800321e:	4628      	mov	r0, r5
 8003220:	4621      	mov	r1, r4
 8003222:	f7ff ff59 	bl	80030d8 <__sflush_r>
 8003226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003228:	07da      	lsls	r2, r3, #31
 800322a:	4605      	mov	r5, r0
 800322c:	d4e0      	bmi.n	80031f0 <_fflush_r+0xc>
 800322e:	89a3      	ldrh	r3, [r4, #12]
 8003230:	059b      	lsls	r3, r3, #22
 8003232:	d4dd      	bmi.n	80031f0 <_fflush_r+0xc>
 8003234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003236:	f7ff f974 	bl	8002522 <__retarget_lock_release_recursive>
 800323a:	e7d9      	b.n	80031f0 <_fflush_r+0xc>
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <_fflush_r+0x70>)
 800323e:	429c      	cmp	r4, r3
 8003240:	d101      	bne.n	8003246 <_fflush_r+0x62>
 8003242:	68ac      	ldr	r4, [r5, #8]
 8003244:	e7df      	b.n	8003206 <_fflush_r+0x22>
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <_fflush_r+0x74>)
 8003248:	429c      	cmp	r4, r3
 800324a:	bf08      	it	eq
 800324c:	68ec      	ldreq	r4, [r5, #12]
 800324e:	e7da      	b.n	8003206 <_fflush_r+0x22>
 8003250:	08003768 	.word	0x08003768
 8003254:	08003788 	.word	0x08003788
 8003258:	08003748 	.word	0x08003748

0800325c <_lseek_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	4d07      	ldr	r5, [pc, #28]	; (800327c <_lseek_r+0x20>)
 8003260:	4604      	mov	r4, r0
 8003262:	4608      	mov	r0, r1
 8003264:	4611      	mov	r1, r2
 8003266:	2200      	movs	r2, #0
 8003268:	602a      	str	r2, [r5, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	f7fd fbfc 	bl	8000a68 <_lseek>
 8003270:	1c43      	adds	r3, r0, #1
 8003272:	d102      	bne.n	800327a <_lseek_r+0x1e>
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	b103      	cbz	r3, 800327a <_lseek_r+0x1e>
 8003278:	6023      	str	r3, [r4, #0]
 800327a:	bd38      	pop	{r3, r4, r5, pc}
 800327c:	200000ec 	.word	0x200000ec

08003280 <__swhatbuf_r>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	460e      	mov	r6, r1
 8003284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003288:	2900      	cmp	r1, #0
 800328a:	b096      	sub	sp, #88	; 0x58
 800328c:	4614      	mov	r4, r2
 800328e:	461d      	mov	r5, r3
 8003290:	da07      	bge.n	80032a2 <__swhatbuf_r+0x22>
 8003292:	2300      	movs	r3, #0
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	89b3      	ldrh	r3, [r6, #12]
 8003298:	061a      	lsls	r2, r3, #24
 800329a:	d410      	bmi.n	80032be <__swhatbuf_r+0x3e>
 800329c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a0:	e00e      	b.n	80032c0 <__swhatbuf_r+0x40>
 80032a2:	466a      	mov	r2, sp
 80032a4:	f000 f90c 	bl	80034c0 <_fstat_r>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	dbf2      	blt.n	8003292 <__swhatbuf_r+0x12>
 80032ac:	9a01      	ldr	r2, [sp, #4]
 80032ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032b6:	425a      	negs	r2, r3
 80032b8:	415a      	adcs	r2, r3
 80032ba:	602a      	str	r2, [r5, #0]
 80032bc:	e7ee      	b.n	800329c <__swhatbuf_r+0x1c>
 80032be:	2340      	movs	r3, #64	; 0x40
 80032c0:	2000      	movs	r0, #0
 80032c2:	6023      	str	r3, [r4, #0]
 80032c4:	b016      	add	sp, #88	; 0x58
 80032c6:	bd70      	pop	{r4, r5, r6, pc}

080032c8 <__smakebuf_r>:
 80032c8:	898b      	ldrh	r3, [r1, #12]
 80032ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032cc:	079d      	lsls	r5, r3, #30
 80032ce:	4606      	mov	r6, r0
 80032d0:	460c      	mov	r4, r1
 80032d2:	d507      	bpl.n	80032e4 <__smakebuf_r+0x1c>
 80032d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032d8:	6023      	str	r3, [r4, #0]
 80032da:	6123      	str	r3, [r4, #16]
 80032dc:	2301      	movs	r3, #1
 80032de:	6163      	str	r3, [r4, #20]
 80032e0:	b002      	add	sp, #8
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	ab01      	add	r3, sp, #4
 80032e6:	466a      	mov	r2, sp
 80032e8:	f7ff ffca 	bl	8003280 <__swhatbuf_r>
 80032ec:	9900      	ldr	r1, [sp, #0]
 80032ee:	4605      	mov	r5, r0
 80032f0:	4630      	mov	r0, r6
 80032f2:	f7ff f917 	bl	8002524 <_malloc_r>
 80032f6:	b948      	cbnz	r0, 800330c <__smakebuf_r+0x44>
 80032f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032fc:	059a      	lsls	r2, r3, #22
 80032fe:	d4ef      	bmi.n	80032e0 <__smakebuf_r+0x18>
 8003300:	f023 0303 	bic.w	r3, r3, #3
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	81a3      	strh	r3, [r4, #12]
 800330a:	e7e3      	b.n	80032d4 <__smakebuf_r+0xc>
 800330c:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <__smakebuf_r+0x7c>)
 800330e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	6020      	str	r0, [r4, #0]
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	81a3      	strh	r3, [r4, #12]
 800331a:	9b00      	ldr	r3, [sp, #0]
 800331c:	6163      	str	r3, [r4, #20]
 800331e:	9b01      	ldr	r3, [sp, #4]
 8003320:	6120      	str	r0, [r4, #16]
 8003322:	b15b      	cbz	r3, 800333c <__smakebuf_r+0x74>
 8003324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003328:	4630      	mov	r0, r6
 800332a:	f000 f8db 	bl	80034e4 <_isatty_r>
 800332e:	b128      	cbz	r0, 800333c <__smakebuf_r+0x74>
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	81a3      	strh	r3, [r4, #12]
 800333c:	89a0      	ldrh	r0, [r4, #12]
 800333e:	4305      	orrs	r5, r0
 8003340:	81a5      	strh	r5, [r4, #12]
 8003342:	e7cd      	b.n	80032e0 <__smakebuf_r+0x18>
 8003344:	0800237d 	.word	0x0800237d

08003348 <memcpy>:
 8003348:	440a      	add	r2, r1
 800334a:	4291      	cmp	r1, r2
 800334c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003350:	d100      	bne.n	8003354 <memcpy+0xc>
 8003352:	4770      	bx	lr
 8003354:	b510      	push	{r4, lr}
 8003356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800335a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800335e:	4291      	cmp	r1, r2
 8003360:	d1f9      	bne.n	8003356 <memcpy+0xe>
 8003362:	bd10      	pop	{r4, pc}

08003364 <memmove>:
 8003364:	4288      	cmp	r0, r1
 8003366:	b510      	push	{r4, lr}
 8003368:	eb01 0402 	add.w	r4, r1, r2
 800336c:	d902      	bls.n	8003374 <memmove+0x10>
 800336e:	4284      	cmp	r4, r0
 8003370:	4623      	mov	r3, r4
 8003372:	d807      	bhi.n	8003384 <memmove+0x20>
 8003374:	1e43      	subs	r3, r0, #1
 8003376:	42a1      	cmp	r1, r4
 8003378:	d008      	beq.n	800338c <memmove+0x28>
 800337a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800337e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003382:	e7f8      	b.n	8003376 <memmove+0x12>
 8003384:	4402      	add	r2, r0
 8003386:	4601      	mov	r1, r0
 8003388:	428a      	cmp	r2, r1
 800338a:	d100      	bne.n	800338e <memmove+0x2a>
 800338c:	bd10      	pop	{r4, pc}
 800338e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003396:	e7f7      	b.n	8003388 <memmove+0x24>

08003398 <__malloc_lock>:
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <__malloc_lock+0x8>)
 800339a:	f7ff b8c1 	b.w	8002520 <__retarget_lock_acquire_recursive>
 800339e:	bf00      	nop
 80033a0:	200000e4 	.word	0x200000e4

080033a4 <__malloc_unlock>:
 80033a4:	4801      	ldr	r0, [pc, #4]	; (80033ac <__malloc_unlock+0x8>)
 80033a6:	f7ff b8bc 	b.w	8002522 <__retarget_lock_release_recursive>
 80033aa:	bf00      	nop
 80033ac:	200000e4 	.word	0x200000e4

080033b0 <_free_r>:
 80033b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033b2:	2900      	cmp	r1, #0
 80033b4:	d048      	beq.n	8003448 <_free_r+0x98>
 80033b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ba:	9001      	str	r0, [sp, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f1a1 0404 	sub.w	r4, r1, #4
 80033c2:	bfb8      	it	lt
 80033c4:	18e4      	addlt	r4, r4, r3
 80033c6:	f7ff ffe7 	bl	8003398 <__malloc_lock>
 80033ca:	4a20      	ldr	r2, [pc, #128]	; (800344c <_free_r+0x9c>)
 80033cc:	9801      	ldr	r0, [sp, #4]
 80033ce:	6813      	ldr	r3, [r2, #0]
 80033d0:	4615      	mov	r5, r2
 80033d2:	b933      	cbnz	r3, 80033e2 <_free_r+0x32>
 80033d4:	6063      	str	r3, [r4, #4]
 80033d6:	6014      	str	r4, [r2, #0]
 80033d8:	b003      	add	sp, #12
 80033da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033de:	f7ff bfe1 	b.w	80033a4 <__malloc_unlock>
 80033e2:	42a3      	cmp	r3, r4
 80033e4:	d90b      	bls.n	80033fe <_free_r+0x4e>
 80033e6:	6821      	ldr	r1, [r4, #0]
 80033e8:	1862      	adds	r2, r4, r1
 80033ea:	4293      	cmp	r3, r2
 80033ec:	bf04      	itt	eq
 80033ee:	681a      	ldreq	r2, [r3, #0]
 80033f0:	685b      	ldreq	r3, [r3, #4]
 80033f2:	6063      	str	r3, [r4, #4]
 80033f4:	bf04      	itt	eq
 80033f6:	1852      	addeq	r2, r2, r1
 80033f8:	6022      	streq	r2, [r4, #0]
 80033fa:	602c      	str	r4, [r5, #0]
 80033fc:	e7ec      	b.n	80033d8 <_free_r+0x28>
 80033fe:	461a      	mov	r2, r3
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	b10b      	cbz	r3, 8003408 <_free_r+0x58>
 8003404:	42a3      	cmp	r3, r4
 8003406:	d9fa      	bls.n	80033fe <_free_r+0x4e>
 8003408:	6811      	ldr	r1, [r2, #0]
 800340a:	1855      	adds	r5, r2, r1
 800340c:	42a5      	cmp	r5, r4
 800340e:	d10b      	bne.n	8003428 <_free_r+0x78>
 8003410:	6824      	ldr	r4, [r4, #0]
 8003412:	4421      	add	r1, r4
 8003414:	1854      	adds	r4, r2, r1
 8003416:	42a3      	cmp	r3, r4
 8003418:	6011      	str	r1, [r2, #0]
 800341a:	d1dd      	bne.n	80033d8 <_free_r+0x28>
 800341c:	681c      	ldr	r4, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	6053      	str	r3, [r2, #4]
 8003422:	4421      	add	r1, r4
 8003424:	6011      	str	r1, [r2, #0]
 8003426:	e7d7      	b.n	80033d8 <_free_r+0x28>
 8003428:	d902      	bls.n	8003430 <_free_r+0x80>
 800342a:	230c      	movs	r3, #12
 800342c:	6003      	str	r3, [r0, #0]
 800342e:	e7d3      	b.n	80033d8 <_free_r+0x28>
 8003430:	6825      	ldr	r5, [r4, #0]
 8003432:	1961      	adds	r1, r4, r5
 8003434:	428b      	cmp	r3, r1
 8003436:	bf04      	itt	eq
 8003438:	6819      	ldreq	r1, [r3, #0]
 800343a:	685b      	ldreq	r3, [r3, #4]
 800343c:	6063      	str	r3, [r4, #4]
 800343e:	bf04      	itt	eq
 8003440:	1949      	addeq	r1, r1, r5
 8003442:	6021      	streq	r1, [r4, #0]
 8003444:	6054      	str	r4, [r2, #4]
 8003446:	e7c7      	b.n	80033d8 <_free_r+0x28>
 8003448:	b003      	add	sp, #12
 800344a:	bd30      	pop	{r4, r5, pc}
 800344c:	20000090 	.word	0x20000090

08003450 <_realloc_r>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	4607      	mov	r7, r0
 8003454:	4614      	mov	r4, r2
 8003456:	460e      	mov	r6, r1
 8003458:	b921      	cbnz	r1, 8003464 <_realloc_r+0x14>
 800345a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800345e:	4611      	mov	r1, r2
 8003460:	f7ff b860 	b.w	8002524 <_malloc_r>
 8003464:	b922      	cbnz	r2, 8003470 <_realloc_r+0x20>
 8003466:	f7ff ffa3 	bl	80033b0 <_free_r>
 800346a:	4625      	mov	r5, r4
 800346c:	4628      	mov	r0, r5
 800346e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003470:	f000 f848 	bl	8003504 <_malloc_usable_size_r>
 8003474:	42a0      	cmp	r0, r4
 8003476:	d20f      	bcs.n	8003498 <_realloc_r+0x48>
 8003478:	4621      	mov	r1, r4
 800347a:	4638      	mov	r0, r7
 800347c:	f7ff f852 	bl	8002524 <_malloc_r>
 8003480:	4605      	mov	r5, r0
 8003482:	2800      	cmp	r0, #0
 8003484:	d0f2      	beq.n	800346c <_realloc_r+0x1c>
 8003486:	4631      	mov	r1, r6
 8003488:	4622      	mov	r2, r4
 800348a:	f7ff ff5d 	bl	8003348 <memcpy>
 800348e:	4631      	mov	r1, r6
 8003490:	4638      	mov	r0, r7
 8003492:	f7ff ff8d 	bl	80033b0 <_free_r>
 8003496:	e7e9      	b.n	800346c <_realloc_r+0x1c>
 8003498:	4635      	mov	r5, r6
 800349a:	e7e7      	b.n	800346c <_realloc_r+0x1c>

0800349c <_read_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	4d07      	ldr	r5, [pc, #28]	; (80034bc <_read_r+0x20>)
 80034a0:	4604      	mov	r4, r0
 80034a2:	4608      	mov	r0, r1
 80034a4:	4611      	mov	r1, r2
 80034a6:	2200      	movs	r2, #0
 80034a8:	602a      	str	r2, [r5, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f7fd fa7c 	bl	80009a8 <_read>
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	d102      	bne.n	80034ba <_read_r+0x1e>
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	b103      	cbz	r3, 80034ba <_read_r+0x1e>
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	bd38      	pop	{r3, r4, r5, pc}
 80034bc:	200000ec 	.word	0x200000ec

080034c0 <_fstat_r>:
 80034c0:	b538      	push	{r3, r4, r5, lr}
 80034c2:	4d07      	ldr	r5, [pc, #28]	; (80034e0 <_fstat_r+0x20>)
 80034c4:	2300      	movs	r3, #0
 80034c6:	4604      	mov	r4, r0
 80034c8:	4608      	mov	r0, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	602b      	str	r3, [r5, #0]
 80034ce:	f7fd fab0 	bl	8000a32 <_fstat>
 80034d2:	1c43      	adds	r3, r0, #1
 80034d4:	d102      	bne.n	80034dc <_fstat_r+0x1c>
 80034d6:	682b      	ldr	r3, [r5, #0]
 80034d8:	b103      	cbz	r3, 80034dc <_fstat_r+0x1c>
 80034da:	6023      	str	r3, [r4, #0]
 80034dc:	bd38      	pop	{r3, r4, r5, pc}
 80034de:	bf00      	nop
 80034e0:	200000ec 	.word	0x200000ec

080034e4 <_isatty_r>:
 80034e4:	b538      	push	{r3, r4, r5, lr}
 80034e6:	4d06      	ldr	r5, [pc, #24]	; (8003500 <_isatty_r+0x1c>)
 80034e8:	2300      	movs	r3, #0
 80034ea:	4604      	mov	r4, r0
 80034ec:	4608      	mov	r0, r1
 80034ee:	602b      	str	r3, [r5, #0]
 80034f0:	f7fd faaf 	bl	8000a52 <_isatty>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	d102      	bne.n	80034fe <_isatty_r+0x1a>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	b103      	cbz	r3, 80034fe <_isatty_r+0x1a>
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	bd38      	pop	{r3, r4, r5, pc}
 8003500:	200000ec 	.word	0x200000ec

08003504 <_malloc_usable_size_r>:
 8003504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003508:	1f18      	subs	r0, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	bfbc      	itt	lt
 800350e:	580b      	ldrlt	r3, [r1, r0]
 8003510:	18c0      	addlt	r0, r0, r3
 8003512:	4770      	bx	lr

08003514 <_init>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	bf00      	nop
 8003518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351a:	bc08      	pop	{r3}
 800351c:	469e      	mov	lr, r3
 800351e:	4770      	bx	lr

08003520 <_fini>:
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003522:	bf00      	nop
 8003524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003526:	bc08      	pop	{r3}
 8003528:	469e      	mov	lr, r3
 800352a:	4770      	bx	lr
